
ES_Lab6_Bonus1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d50c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  0800d6a0  0800d6a0  0000e6a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dae8  0800dae8  0000f200  2**0
                  CONTENTS
  4 .ARM          00000008  0800dae8  0800dae8  0000eae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800daf0  0800daf0  0000f200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800daf0  0800daf0  0000eaf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800daf4  0800daf4  0000eaf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  0800daf8  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bd9c  20000200  0800dcf8  0000f200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000bf9c  0800dcf8  0000ff9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024151  00000000  00000000  0000f230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d01  00000000  00000000  00033381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f38  00000000  00000000  00038088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000182e  00000000  00000000  00039fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006a7f  00000000  00000000  0003b7ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024f10  00000000  00000000  0004226d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001008dc  00000000  00000000  0006717d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00167a59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000098f4  00000000  00000000  00167a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00171390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d684 	.word	0x0800d684

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800d684 	.word	0x0800d684

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3c:	f001 fff1 	bl	8002f22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f40:	f000 f83a 	bl	8000fb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f44:	f000 fa50 	bl	80013e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f48:	f000 fa30 	bl	80013ac <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000f4c:	f000 f896 	bl	800107c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000f50:	f000 f8fa 	bl	8001148 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000f54:	f000 f938 	bl	80011c8 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000f58:	f000 f95c 	bl	8001214 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000f5c:	f000 f998 	bl	8001290 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000f60:	f000 f9c6 	bl	80012f0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f64:	f000 f9f4 	bl	8001350 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_DFSDM_FilterRegularMsbStart_DMA(&hdfsdm1_filter0, RecBuf, AUDIO_REC) == HAL_ERROR) {
 8000f68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f6c:	490c      	ldr	r1, [pc, #48]	@ (8000fa0 <main+0x68>)
 8000f6e:	480d      	ldr	r0, [pc, #52]	@ (8000fa4 <main+0x6c>)
 8000f70:	f002 fb62 	bl	8003638 <HAL_DFSDM_FilterRegularMsbStart_DMA>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d104      	bne.n	8000f84 <main+0x4c>
	  UART_Printf("error\r\n");
 8000f7a:	480b      	ldr	r0, [pc, #44]	@ (8000fa8 <main+0x70>)
 8000f7c:	f001 ff78 	bl	8002e70 <UART_Printf>
	  Error_Handler();
 8000f80:	f000 fbfa 	bl	8001778 <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f84:	f006 f83e 	bl	8007004 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f88:	4a08      	ldr	r2, [pc, #32]	@ (8000fac <main+0x74>)
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4808      	ldr	r0, [pc, #32]	@ (8000fb0 <main+0x78>)
 8000f8e:	f006 f883 	bl	8007098 <osThreadNew>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4a07      	ldr	r2, [pc, #28]	@ (8000fb4 <main+0x7c>)
 8000f96:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f98:	f006 f858 	bl	800704c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <main+0x64>
 8000fa0:	200009e4 	.word	0x200009e4
 8000fa4:	2000021c 	.word	0x2000021c
 8000fa8:	0800d6ac 	.word	0x0800d6ac
 8000fac:	0800d6cc 	.word	0x0800d6cc
 8000fb0:	08001769 	.word	0x08001769
 8000fb4:	200009e0 	.word	0x200009e0

08000fb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b096      	sub	sp, #88	@ 0x58
 8000fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	2244      	movs	r2, #68	@ 0x44
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f009 fb34 	bl	800a634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fcc:	463b      	mov	r3, r7
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fda:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fde:	f003 faf5 	bl	80045cc <HAL_PWREx_ControlVoltageScaling>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fe8:	f000 fbc6 	bl	8001778 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000fec:	f003 fad0 	bl	8004590 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ff0:	4b21      	ldr	r3, [pc, #132]	@ (8001078 <SystemClock_Config+0xc0>)
 8000ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000ff6:	4a20      	ldr	r2, [pc, #128]	@ (8001078 <SystemClock_Config+0xc0>)
 8000ff8:	f023 0318 	bic.w	r3, r3, #24
 8000ffc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001000:	2314      	movs	r3, #20
 8001002:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001004:	2301      	movs	r3, #1
 8001006:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001008:	2301      	movs	r3, #1
 800100a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001010:	2360      	movs	r3, #96	@ 0x60
 8001012:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001014:	2302      	movs	r3, #2
 8001016:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001018:	2301      	movs	r3, #1
 800101a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800101c:	2301      	movs	r3, #1
 800101e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001020:	2328      	movs	r3, #40	@ 0x28
 8001022:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001024:	2307      	movs	r3, #7
 8001026:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001028:	2302      	movs	r3, #2
 800102a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800102c:	2302      	movs	r3, #2
 800102e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4618      	mov	r0, r3
 8001036:	f003 fbeb 	bl	8004810 <HAL_RCC_OscConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001040:	f000 fb9a 	bl	8001778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001044:	230f      	movs	r3, #15
 8001046:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001048:	2303      	movs	r3, #3
 800104a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104c:	2300      	movs	r3, #0
 800104e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001058:	463b      	mov	r3, r7
 800105a:	2104      	movs	r1, #4
 800105c:	4618      	mov	r0, r3
 800105e:	f003 ffb3 	bl	8004fc8 <HAL_RCC_ClockConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001068:	f000 fb86 	bl	8001778 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800106c:	f004 fcba 	bl	80059e4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001070:	bf00      	nop
 8001072:	3758      	adds	r7, #88	@ 0x58
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40021000 	.word	0x40021000

0800107c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8001080:	4b2c      	ldr	r3, [pc, #176]	@ (8001134 <MX_DFSDM1_Init+0xb8>)
 8001082:	4a2d      	ldr	r2, [pc, #180]	@ (8001138 <MX_DFSDM1_Init+0xbc>)
 8001084:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8001086:	4b2b      	ldr	r3, [pc, #172]	@ (8001134 <MX_DFSDM1_Init+0xb8>)
 8001088:	2200      	movs	r2, #0
 800108a:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 800108c:	4b29      	ldr	r3, [pc, #164]	@ (8001134 <MX_DFSDM1_Init+0xb8>)
 800108e:	2201      	movs	r2, #1
 8001090:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8001092:	4b28      	ldr	r3, [pc, #160]	@ (8001134 <MX_DFSDM1_Init+0xb8>)
 8001094:	2201      	movs	r2, #1
 8001096:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8001098:	4b26      	ldr	r3, [pc, #152]	@ (8001134 <MX_DFSDM1_Init+0xb8>)
 800109a:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 800109e:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 259;
 80010a0:	4b24      	ldr	r3, [pc, #144]	@ (8001134 <MX_DFSDM1_Init+0xb8>)
 80010a2:	f240 1203 	movw	r2, #259	@ 0x103
 80010a6:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80010a8:	4b22      	ldr	r3, [pc, #136]	@ (8001134 <MX_DFSDM1_Init+0xb8>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80010ae:	4821      	ldr	r0, [pc, #132]	@ (8001134 <MX_DFSDM1_Init+0xb8>)
 80010b0:	f002 f9a2 	bl	80033f8 <HAL_DFSDM_FilterInit>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_DFSDM1_Init+0x42>
  {
    Error_Handler();
 80010ba:	f000 fb5d 	bl	8001778 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80010be:	4b1f      	ldr	r3, [pc, #124]	@ (800113c <MX_DFSDM1_Init+0xc0>)
 80010c0:	4a1f      	ldr	r2, [pc, #124]	@ (8001140 <MX_DFSDM1_Init+0xc4>)
 80010c2:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80010c4:	4b1d      	ldr	r3, [pc, #116]	@ (800113c <MX_DFSDM1_Init+0xc0>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80010ca:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <MX_DFSDM1_Init+0xc0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 14;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	@ (800113c <MX_DFSDM1_Init+0xc0>)
 80010d2:	220e      	movs	r2, #14
 80010d4:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80010d6:	4b19      	ldr	r3, [pc, #100]	@ (800113c <MX_DFSDM1_Init+0xc0>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80010dc:	4b17      	ldr	r3, [pc, #92]	@ (800113c <MX_DFSDM1_Init+0xc0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80010e2:	4b16      	ldr	r3, [pc, #88]	@ (800113c <MX_DFSDM1_Init+0xc0>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80010e8:	4b14      	ldr	r3, [pc, #80]	@ (800113c <MX_DFSDM1_Init+0xc0>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80010ee:	4b13      	ldr	r3, [pc, #76]	@ (800113c <MX_DFSDM1_Init+0xc0>)
 80010f0:	2204      	movs	r2, #4
 80010f2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80010f4:	4b11      	ldr	r3, [pc, #68]	@ (800113c <MX_DFSDM1_Init+0xc0>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80010fa:	4b10      	ldr	r3, [pc, #64]	@ (800113c <MX_DFSDM1_Init+0xc0>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8001100:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <MX_DFSDM1_Init+0xc0>)
 8001102:	2200      	movs	r2, #0
 8001104:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8001106:	4b0d      	ldr	r3, [pc, #52]	@ (800113c <MX_DFSDM1_Init+0xc0>)
 8001108:	2200      	movs	r2, #0
 800110a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 800110c:	480b      	ldr	r0, [pc, #44]	@ (800113c <MX_DFSDM1_Init+0xc0>)
 800110e:	f002 f8b3 	bl	8003278 <HAL_DFSDM_ChannelInit>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_DFSDM1_Init+0xa0>
  {
    Error_Handler();
 8001118:	f000 fb2e 	bl	8001778 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 800111c:	2201      	movs	r2, #1
 800111e:	4909      	ldr	r1, [pc, #36]	@ (8001144 <MX_DFSDM1_Init+0xc8>)
 8001120:	4804      	ldr	r0, [pc, #16]	@ (8001134 <MX_DFSDM1_Init+0xb8>)
 8001122:	f002 fa43 	bl	80035ac <HAL_DFSDM_FilterConfigRegChannel>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_DFSDM1_Init+0xb4>
  {
    Error_Handler();
 800112c:	f000 fb24 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	2000021c 	.word	0x2000021c
 8001138:	40016100 	.word	0x40016100
 800113c:	20000270 	.word	0x20000270
 8001140:	40016040 	.word	0x40016040
 8001144:	00020004 	.word	0x00020004

08001148 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800114c:	4b1b      	ldr	r3, [pc, #108]	@ (80011bc <MX_I2C2_Init+0x74>)
 800114e:	4a1c      	ldr	r2, [pc, #112]	@ (80011c0 <MX_I2C2_Init+0x78>)
 8001150:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8001152:	4b1a      	ldr	r3, [pc, #104]	@ (80011bc <MX_I2C2_Init+0x74>)
 8001154:	4a1b      	ldr	r2, [pc, #108]	@ (80011c4 <MX_I2C2_Init+0x7c>)
 8001156:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001158:	4b18      	ldr	r3, [pc, #96]	@ (80011bc <MX_I2C2_Init+0x74>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800115e:	4b17      	ldr	r3, [pc, #92]	@ (80011bc <MX_I2C2_Init+0x74>)
 8001160:	2201      	movs	r2, #1
 8001162:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001164:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <MX_I2C2_Init+0x74>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800116a:	4b14      	ldr	r3, [pc, #80]	@ (80011bc <MX_I2C2_Init+0x74>)
 800116c:	2200      	movs	r2, #0
 800116e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001170:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <MX_I2C2_Init+0x74>)
 8001172:	2200      	movs	r2, #0
 8001174:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001176:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <MX_I2C2_Init+0x74>)
 8001178:	2200      	movs	r2, #0
 800117a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800117c:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <MX_I2C2_Init+0x74>)
 800117e:	2200      	movs	r2, #0
 8001180:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001182:	480e      	ldr	r0, [pc, #56]	@ (80011bc <MX_I2C2_Init+0x74>)
 8001184:	f002 ff9e 	bl	80040c4 <HAL_I2C_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800118e:	f000 faf3 	bl	8001778 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001192:	2100      	movs	r1, #0
 8001194:	4809      	ldr	r0, [pc, #36]	@ (80011bc <MX_I2C2_Init+0x74>)
 8001196:	f003 f830 	bl	80041fa <HAL_I2CEx_ConfigAnalogFilter>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80011a0:	f000 faea 	bl	8001778 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80011a4:	2100      	movs	r1, #0
 80011a6:	4805      	ldr	r0, [pc, #20]	@ (80011bc <MX_I2C2_Init+0x74>)
 80011a8:	f003 f872 	bl	8004290 <HAL_I2CEx_ConfigDigitalFilter>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80011b2:	f000 fae1 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200002f0 	.word	0x200002f0
 80011c0:	40005800 	.word	0x40005800
 80011c4:	10d19ce4 	.word	0x10d19ce4

080011c8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <MX_QUADSPI_Init+0x44>)
 80011ce:	4a10      	ldr	r2, [pc, #64]	@ (8001210 <MX_QUADSPI_Init+0x48>)
 80011d0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <MX_QUADSPI_Init+0x44>)
 80011d4:	2202      	movs	r2, #2
 80011d6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <MX_QUADSPI_Init+0x44>)
 80011da:	2204      	movs	r2, #4
 80011dc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80011de:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <MX_QUADSPI_Init+0x44>)
 80011e0:	2210      	movs	r2, #16
 80011e2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80011e4:	4b09      	ldr	r3, [pc, #36]	@ (800120c <MX_QUADSPI_Init+0x44>)
 80011e6:	2217      	movs	r2, #23
 80011e8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <MX_QUADSPI_Init+0x44>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <MX_QUADSPI_Init+0x44>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80011f6:	4805      	ldr	r0, [pc, #20]	@ (800120c <MX_QUADSPI_Init+0x44>)
 80011f8:	f003 fa4e 	bl	8004698 <HAL_QSPI_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001202:	f000 fab9 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000344 	.word	0x20000344
 8001210:	a0001000 	.word	0xa0001000

08001214 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001218:	4b1b      	ldr	r3, [pc, #108]	@ (8001288 <MX_SPI3_Init+0x74>)
 800121a:	4a1c      	ldr	r2, [pc, #112]	@ (800128c <MX_SPI3_Init+0x78>)
 800121c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800121e:	4b1a      	ldr	r3, [pc, #104]	@ (8001288 <MX_SPI3_Init+0x74>)
 8001220:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001224:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001226:	4b18      	ldr	r3, [pc, #96]	@ (8001288 <MX_SPI3_Init+0x74>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800122c:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <MX_SPI3_Init+0x74>)
 800122e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001232:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001234:	4b14      	ldr	r3, [pc, #80]	@ (8001288 <MX_SPI3_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800123a:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <MX_SPI3_Init+0x74>)
 800123c:	2200      	movs	r2, #0
 800123e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001240:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <MX_SPI3_Init+0x74>)
 8001242:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001246:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001248:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <MX_SPI3_Init+0x74>)
 800124a:	2200      	movs	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800124e:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <MX_SPI3_Init+0x74>)
 8001250:	2200      	movs	r2, #0
 8001252:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001254:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <MX_SPI3_Init+0x74>)
 8001256:	2200      	movs	r2, #0
 8001258:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800125a:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <MX_SPI3_Init+0x74>)
 800125c:	2200      	movs	r2, #0
 800125e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001260:	4b09      	ldr	r3, [pc, #36]	@ (8001288 <MX_SPI3_Init+0x74>)
 8001262:	2207      	movs	r2, #7
 8001264:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001266:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <MX_SPI3_Init+0x74>)
 8001268:	2200      	movs	r2, #0
 800126a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <MX_SPI3_Init+0x74>)
 800126e:	2208      	movs	r2, #8
 8001270:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001272:	4805      	ldr	r0, [pc, #20]	@ (8001288 <MX_SPI3_Init+0x74>)
 8001274:	f004 fd98 	bl	8005da8 <HAL_SPI_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800127e:	f000 fa7b 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000388 	.word	0x20000388
 800128c:	40003c00 	.word	0x40003c00

08001290 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001294:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <MX_USART1_UART_Init+0x58>)
 8001296:	4a15      	ldr	r2, [pc, #84]	@ (80012ec <MX_USART1_UART_Init+0x5c>)
 8001298:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800129a:	4b13      	ldr	r3, [pc, #76]	@ (80012e8 <MX_USART1_UART_Init+0x58>)
 800129c:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80012a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012a2:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <MX_USART1_UART_Init+0x58>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <MX_USART1_UART_Init+0x58>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <MX_USART1_UART_Init+0x58>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <MX_USART1_UART_Init+0x58>)
 80012b6:	220c      	movs	r2, #12
 80012b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	@ (80012e8 <MX_USART1_UART_Init+0x58>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c0:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <MX_USART1_UART_Init+0x58>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012c6:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <MX_USART1_UART_Init+0x58>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012cc:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <MX_USART1_UART_Init+0x58>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012d2:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <MX_USART1_UART_Init+0x58>)
 80012d4:	f004 fe0b 	bl	8005eee <HAL_UART_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80012de:	f000 fa4b 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200003ec 	.word	0x200003ec
 80012ec:	40013800 	.word	0x40013800

080012f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012f4:	4b14      	ldr	r3, [pc, #80]	@ (8001348 <MX_USART3_UART_Init+0x58>)
 80012f6:	4a15      	ldr	r2, [pc, #84]	@ (800134c <MX_USART3_UART_Init+0x5c>)
 80012f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012fa:	4b13      	ldr	r3, [pc, #76]	@ (8001348 <MX_USART3_UART_Init+0x58>)
 80012fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001300:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001302:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <MX_USART3_UART_Init+0x58>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001308:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <MX_USART3_UART_Init+0x58>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <MX_USART3_UART_Init+0x58>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001314:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <MX_USART3_UART_Init+0x58>)
 8001316:	220c      	movs	r2, #12
 8001318:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131a:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <MX_USART3_UART_Init+0x58>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001320:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <MX_USART3_UART_Init+0x58>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001326:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <MX_USART3_UART_Init+0x58>)
 8001328:	2200      	movs	r2, #0
 800132a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <MX_USART3_UART_Init+0x58>)
 800132e:	2200      	movs	r2, #0
 8001330:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	@ (8001348 <MX_USART3_UART_Init+0x58>)
 8001334:	f004 fddb 	bl	8005eee <HAL_UART_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800133e:	f000 fa1b 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000474 	.word	0x20000474
 800134c:	40004800 	.word	0x40004800

08001350 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001354:	4b14      	ldr	r3, [pc, #80]	@ (80013a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001356:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800135a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800135c:	4b12      	ldr	r3, [pc, #72]	@ (80013a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800135e:	2206      	movs	r2, #6
 8001360:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001362:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001364:	2202      	movs	r2, #2
 8001366:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001368:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800136a:	2202      	movs	r2, #2
 800136c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800136e:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001370:	2200      	movs	r2, #0
 8001372:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001374:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001376:	2200      	movs	r2, #0
 8001378:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800137a:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800137c:	2200      	movs	r2, #0
 800137e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001380:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001382:	2200      	movs	r2, #0
 8001384:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001386:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001388:	2200      	movs	r2, #0
 800138a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800138e:	2200      	movs	r2, #0
 8001390:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001392:	4805      	ldr	r0, [pc, #20]	@ (80013a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001394:	f002 ffc8 	bl	8004328 <HAL_PCD_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800139e:	f000 f9eb 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200004fc 	.word	0x200004fc

080013ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013b2:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <MX_DMA_Init+0x38>)
 80013b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013b6:	4a0b      	ldr	r2, [pc, #44]	@ (80013e4 <MX_DMA_Init+0x38>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6493      	str	r3, [r2, #72]	@ 0x48
 80013be:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <MX_DMA_Init+0x38>)
 80013c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2105      	movs	r1, #5
 80013ce:	200e      	movs	r0, #14
 80013d0:	f001 ff1b 	bl	800320a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80013d4:	200e      	movs	r0, #14
 80013d6:	f001 ff34 	bl	8003242 <HAL_NVIC_EnableIRQ>

}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000

080013e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	@ 0x28
 80013ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013fe:	4bbc      	ldr	r3, [pc, #752]	@ (80016f0 <MX_GPIO_Init+0x308>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001402:	4abb      	ldr	r2, [pc, #748]	@ (80016f0 <MX_GPIO_Init+0x308>)
 8001404:	f043 0310 	orr.w	r3, r3, #16
 8001408:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800140a:	4bb9      	ldr	r3, [pc, #740]	@ (80016f0 <MX_GPIO_Init+0x308>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140e:	f003 0310 	and.w	r3, r3, #16
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001416:	4bb6      	ldr	r3, [pc, #728]	@ (80016f0 <MX_GPIO_Init+0x308>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141a:	4ab5      	ldr	r2, [pc, #724]	@ (80016f0 <MX_GPIO_Init+0x308>)
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001422:	4bb3      	ldr	r3, [pc, #716]	@ (80016f0 <MX_GPIO_Init+0x308>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	4bb0      	ldr	r3, [pc, #704]	@ (80016f0 <MX_GPIO_Init+0x308>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001432:	4aaf      	ldr	r2, [pc, #700]	@ (80016f0 <MX_GPIO_Init+0x308>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800143a:	4bad      	ldr	r3, [pc, #692]	@ (80016f0 <MX_GPIO_Init+0x308>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001446:	4baa      	ldr	r3, [pc, #680]	@ (80016f0 <MX_GPIO_Init+0x308>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144a:	4aa9      	ldr	r2, [pc, #676]	@ (80016f0 <MX_GPIO_Init+0x308>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001452:	4ba7      	ldr	r3, [pc, #668]	@ (80016f0 <MX_GPIO_Init+0x308>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800145e:	4ba4      	ldr	r3, [pc, #656]	@ (80016f0 <MX_GPIO_Init+0x308>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001462:	4aa3      	ldr	r2, [pc, #652]	@ (80016f0 <MX_GPIO_Init+0x308>)
 8001464:	f043 0308 	orr.w	r3, r3, #8
 8001468:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800146a:	4ba1      	ldr	r3, [pc, #644]	@ (80016f0 <MX_GPIO_Init+0x308>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	f44f 718a 	mov.w	r1, #276	@ 0x114
 800147c:	489d      	ldr	r0, [pc, #628]	@ (80016f4 <MX_GPIO_Init+0x30c>)
 800147e:	f002 fdf1 	bl	8004064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	f248 1104 	movw	r1, #33028	@ 0x8104
 8001488:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800148c:	f002 fdea 	bl	8004064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	f44f 711c 	mov.w	r1, #624	@ 0x270
 8001496:	4898      	ldr	r0, [pc, #608]	@ (80016f8 <MX_GPIO_Init+0x310>)
 8001498:	f002 fde4 	bl	8004064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800149c:	2200      	movs	r2, #0
 800149e:	f24f 0114 	movw	r1, #61460	@ 0xf014
 80014a2:	4896      	ldr	r0, [pc, #600]	@ (80016fc <MX_GPIO_Init+0x314>)
 80014a4:	f002 fdde 	bl	8004064 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80014a8:	2200      	movs	r2, #0
 80014aa:	f241 0181 	movw	r1, #4225	@ 0x1081
 80014ae:	4894      	ldr	r0, [pc, #592]	@ (8001700 <MX_GPIO_Init+0x318>)
 80014b0:	f002 fdd8 	bl	8004064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80014b4:	2201      	movs	r2, #1
 80014b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014ba:	4891      	ldr	r0, [pc, #580]	@ (8001700 <MX_GPIO_Init+0x318>)
 80014bc:	f002 fdd2 	bl	8004064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80014c0:	2201      	movs	r2, #1
 80014c2:	2120      	movs	r1, #32
 80014c4:	488d      	ldr	r0, [pc, #564]	@ (80016fc <MX_GPIO_Init+0x314>)
 80014c6:	f002 fdcd 	bl	8004064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80014ca:	2201      	movs	r2, #1
 80014cc:	2101      	movs	r1, #1
 80014ce:	4889      	ldr	r0, [pc, #548]	@ (80016f4 <MX_GPIO_Init+0x30c>)
 80014d0:	f002 fdc8 	bl	8004064 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80014d4:	f240 1315 	movw	r3, #277	@ 0x115
 80014d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014da:	2301      	movs	r3, #1
 80014dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	4881      	ldr	r0, [pc, #516]	@ (80016f4 <MX_GPIO_Init+0x30c>)
 80014ee:	f002 fbf7 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80014f2:	236a      	movs	r3, #106	@ 0x6a
 80014f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	487b      	ldr	r0, [pc, #492]	@ (80016f4 <MX_GPIO_Init+0x30c>)
 8001508:	f002 fbea 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 800150c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001512:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	4875      	ldr	r0, [pc, #468]	@ (80016f8 <MX_GPIO_Init+0x310>)
 8001524:	f002 fbdc 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin;
 8001528:	230f      	movs	r3, #15
 800152a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800152c:	230b      	movs	r3, #11
 800152e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4619      	mov	r1, r3
 800153a:	486f      	ldr	r0, [pc, #444]	@ (80016f8 <MX_GPIO_Init+0x310>)
 800153c:	f002 fbd0 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001540:	2303      	movs	r3, #3
 8001542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154c:	2303      	movs	r3, #3
 800154e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001550:	2308      	movs	r3, #8
 8001552:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4619      	mov	r1, r3
 800155a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800155e:	f002 fbbf 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001562:	f248 1304 	movw	r3, #33028	@ 0x8104
 8001566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001568:	2301      	movs	r3, #1
 800156a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4619      	mov	r1, r3
 800157a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800157e:	f002 fbaf 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001582:	2308      	movs	r3, #8
 8001584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001592:	2301      	movs	r3, #1
 8001594:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	4619      	mov	r1, r3
 800159c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015a0:	f002 fb9e 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80015a4:	2310      	movs	r3, #16
 80015a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015a8:	230b      	movs	r3, #11
 80015aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	4619      	mov	r1, r3
 80015b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ba:	f002 fb91 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80015be:	23e0      	movs	r3, #224	@ 0xe0
 80015c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015ce:	2305      	movs	r3, #5
 80015d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015dc:	f002 fb80 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80015e0:	f44f 731c 	mov.w	r3, #624	@ 0x270
 80015e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	483f      	ldr	r0, [pc, #252]	@ (80016f8 <MX_GPIO_Init+0x310>)
 80015fa:	f002 fb71 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80015fe:	2301      	movs	r3, #1
 8001600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001602:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	483a      	ldr	r0, [pc, #232]	@ (80016fc <MX_GPIO_Init+0x314>)
 8001614:	f002 fb64 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001618:	2302      	movs	r3, #2
 800161a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800161c:	230b      	movs	r3, #11
 800161e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	4619      	mov	r1, r3
 800162a:	4834      	ldr	r0, [pc, #208]	@ (80016fc <MX_GPIO_Init+0x314>)
 800162c:	f002 fb58 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001630:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8001634:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001636:	2301      	movs	r3, #1
 8001638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	2300      	movs	r3, #0
 8001640:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4619      	mov	r1, r3
 8001648:	482c      	ldr	r0, [pc, #176]	@ (80016fc <MX_GPIO_Init+0x314>)
 800164a:	f002 fb49 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 800164e:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8001652:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001654:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	4826      	ldr	r0, [pc, #152]	@ (8001700 <MX_GPIO_Init+0x318>)
 8001666:	f002 fb3b 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800166a:	f243 0381 	movw	r3, #12417	@ 0x3081
 800166e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001670:	2301      	movs	r3, #1
 8001672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	481f      	ldr	r0, [pc, #124]	@ (8001700 <MX_GPIO_Init+0x318>)
 8001684:	f002 fb2c 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001688:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800168c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800168e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	4816      	ldr	r0, [pc, #88]	@ (80016f8 <MX_GPIO_Init+0x310>)
 80016a0:	f002 fb1e 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80016a4:	2302      	movs	r3, #2
 80016a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016b4:	2305      	movs	r3, #5
 80016b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4619      	mov	r1, r3
 80016be:	4810      	ldr	r0, [pc, #64]	@ (8001700 <MX_GPIO_Init+0x318>)
 80016c0:	f002 fb0e 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80016c4:	2378      	movs	r3, #120	@ 0x78
 80016c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d0:	2303      	movs	r3, #3
 80016d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016d4:	2307      	movs	r3, #7
 80016d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4619      	mov	r1, r3
 80016de:	4808      	ldr	r0, [pc, #32]	@ (8001700 <MX_GPIO_Init+0x318>)
 80016e0:	f002 fafe 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016e4:	2308      	movs	r3, #8
 80016e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	e009      	b.n	8001704 <MX_GPIO_Init+0x31c>
 80016f0:	40021000 	.word	0x40021000
 80016f4:	48001000 	.word	0x48001000
 80016f8:	48000800 	.word	0x48000800
 80016fc:	48000400 	.word	0x48000400
 8001700:	48000c00 	.word	0x48000c00
 8001704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800170a:	230d      	movs	r3, #13
 800170c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	4813      	ldr	r0, [pc, #76]	@ (8001764 <MX_GPIO_Init+0x37c>)
 8001716:	f002 fae3 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800171a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800171e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001720:	2312      	movs	r3, #18
 8001722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800172c:	2304      	movs	r3, #4
 800172e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	480b      	ldr	r0, [pc, #44]	@ (8001764 <MX_GPIO_Init+0x37c>)
 8001738:	f002 fad2 	bl	8003ce0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800173c:	2200      	movs	r2, #0
 800173e:	2105      	movs	r1, #5
 8001740:	2017      	movs	r0, #23
 8001742:	f001 fd62 	bl	800320a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001746:	2017      	movs	r0, #23
 8001748:	f001 fd7b 	bl	8003242 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800174c:	2200      	movs	r2, #0
 800174e:	2105      	movs	r1, #5
 8001750:	2028      	movs	r0, #40	@ 0x28
 8001752:	f001 fd5a 	bl	800320a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001756:	2028      	movs	r0, #40	@ 0x28
 8001758:	f001 fd73 	bl	8003242 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800175c:	bf00      	nop
 800175e:	3728      	adds	r7, #40	@ 0x28
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	48000400 	.word	0x48000400

08001768 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8001770:	2064      	movs	r0, #100	@ 0x64
 8001772:	f005 fd23 	bl	80071bc <osDelay>
 8001776:	e7fb      	b.n	8001770 <StartDefaultTask+0x8>

08001778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800177c:	b672      	cpsid	i
}
 800177e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <Error_Handler+0x8>

08001784 <PSOLA_init>:

static float lw_signal[MAX_PERIOD*2+1] = {0};
static float rw_signal[MAX_PERIOD*2+1] = {0};
/*-------------------*/

void PSOLA_init(float pitch_factor, float formant_factor) {
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	ed87 0a01 	vstr	s0, [r7, #4]
 800178e:	edc7 0a00 	vstr	s1, [r7]
	for (int16_t i = 1; i < PSOLA_HALF_BUF_LEN; i++) {
		audio_out[i] = 0;
	}
	psola_pos = 0;
	*/
	pitch_ratio = pitch_factor;
 8001792:	4a06      	ldr	r2, [pc, #24]	@ (80017ac <PSOLA_init+0x28>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6013      	str	r3, [r2, #0]
	formant_ratio = formant_factor;
 8001798:	4a05      	ldr	r2, [pc, #20]	@ (80017b0 <PSOLA_init+0x2c>)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	6013      	str	r3, [r2, #0]
	}
	for (int16_t i = 1; i < MAX_PERIOD*2+1; i++) {
		rw_signal[i] = 0;
	}
	*/
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000000 	.word	0x20000000
 80017b0:	20000004 	.word	0x20000004

080017b4 <PSOLA_feed>:

static uint8_t start_marker[4] = {0xDE, 0xAD, 0xBE, 0xEF};

void PSOLA_feed(int16_t feed_length, int16_t *feed) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b090      	sub	sp, #64	@ 0x40
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	6039      	str	r1, [r7, #0]
 80017be:	80fb      	strh	r3, [r7, #6]

    for(int16_t feed_pos = 0; feed_pos < feed_length; feed_pos++){
 80017c0:	2300      	movs	r3, #0
 80017c2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80017c4:	f000 bd77 	b.w	80022b6 <PSOLA_feed+0xb02>

    	//HPF
    	float sample = (float)feed[feed_pos];
 80017c8:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	4413      	add	r3, r2
 80017d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d6:	ee07 3a90 	vmov	s15, r3
 80017da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017de:	edc7 7a08 	vstr	s15, [r7, #32]
    	float sample_hpf = sample - prev_sample;
 80017e2:	4bab      	ldr	r3, [pc, #684]	@ (8001a90 <PSOLA_feed+0x2dc>)
 80017e4:	edd3 7a00 	vldr	s15, [r3]
 80017e8:	ed97 7a08 	vldr	s14, [r7, #32]
 80017ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f0:	edc7 7a07 	vstr	s15, [r7, #28]
    	prev_sample = sample;
 80017f4:	4aa6      	ldr	r2, [pc, #664]	@ (8001a90 <PSOLA_feed+0x2dc>)
 80017f6:	6a3b      	ldr	r3, [r7, #32]
 80017f8:	6013      	str	r3, [r2, #0]

    	//ZP-ZFR
    	float sample_zpzfr =
    			sample_hpf +
    			zpzfr_buffer[(zpzfr_pos-1+4)%4] * zpzfr_coeffs[0] +
 80017fa:	4ba6      	ldr	r3, [pc, #664]	@ (8001a94 <PSOLA_feed+0x2e0>)
 80017fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001800:	3303      	adds	r3, #3
 8001802:	425a      	negs	r2, r3
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	f002 0203 	and.w	r2, r2, #3
 800180c:	bf58      	it	pl
 800180e:	4253      	negpl	r3, r2
 8001810:	4aa1      	ldr	r2, [pc, #644]	@ (8001a98 <PSOLA_feed+0x2e4>)
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	edd3 7a00 	vldr	s15, [r3]
 800181a:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8001a9c <PSOLA_feed+0x2e8>
 800181e:	ee27 7a87 	vmul.f32	s14, s15, s14
    			sample_hpf +
 8001822:	edd7 7a07 	vldr	s15, [r7, #28]
 8001826:	ee37 7a27 	vadd.f32	s14, s14, s15
				zpzfr_buffer[(zpzfr_pos-2+4)%4] * zpzfr_coeffs[1] +
 800182a:	4b9a      	ldr	r3, [pc, #616]	@ (8001a94 <PSOLA_feed+0x2e0>)
 800182c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001830:	3302      	adds	r3, #2
 8001832:	425a      	negs	r2, r3
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	f002 0203 	and.w	r2, r2, #3
 800183c:	bf58      	it	pl
 800183e:	4253      	negpl	r3, r2
 8001840:	4a95      	ldr	r2, [pc, #596]	@ (8001a98 <PSOLA_feed+0x2e4>)
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	edd3 7a00 	vldr	s15, [r3]
 800184a:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8001aa0 <PSOLA_feed+0x2ec>
 800184e:	ee67 7aa6 	vmul.f32	s15, s15, s13
    			zpzfr_buffer[(zpzfr_pos-1+4)%4] * zpzfr_coeffs[0] +
 8001852:	ee37 7a27 	vadd.f32	s14, s14, s15
				zpzfr_buffer[(zpzfr_pos-3+4)%4] * zpzfr_coeffs[2] +
 8001856:	4b8f      	ldr	r3, [pc, #572]	@ (8001a94 <PSOLA_feed+0x2e0>)
 8001858:	f9b3 3000 	ldrsh.w	r3, [r3]
 800185c:	3301      	adds	r3, #1
 800185e:	425a      	negs	r2, r3
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	f002 0203 	and.w	r2, r2, #3
 8001868:	bf58      	it	pl
 800186a:	4253      	negpl	r3, r2
 800186c:	4a8a      	ldr	r2, [pc, #552]	@ (8001a98 <PSOLA_feed+0x2e4>)
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	edd3 7a00 	vldr	s15, [r3]
 8001876:	eddf 6a8b 	vldr	s13, [pc, #556]	@ 8001aa4 <PSOLA_feed+0x2f0>
 800187a:	ee67 7aa6 	vmul.f32	s15, s15, s13
				zpzfr_buffer[(zpzfr_pos-2+4)%4] * zpzfr_coeffs[1] +
 800187e:	ee37 7a27 	vadd.f32	s14, s14, s15
				zpzfr_buffer[(zpzfr_pos-4+4)%4] * zpzfr_coeffs[3];
 8001882:	4b84      	ldr	r3, [pc, #528]	@ (8001a94 <PSOLA_feed+0x2e0>)
 8001884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001888:	425a      	negs	r2, r3
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	f002 0203 	and.w	r2, r2, #3
 8001892:	bf58      	it	pl
 8001894:	4253      	negpl	r3, r2
 8001896:	4a80      	ldr	r2, [pc, #512]	@ (8001a98 <PSOLA_feed+0x2e4>)
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	edd3 7a00 	vldr	s15, [r3]
 80018a0:	eddf 6a81 	vldr	s13, [pc, #516]	@ 8001aa8 <PSOLA_feed+0x2f4>
 80018a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
    	float sample_zpzfr =
 80018a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ac:	edc7 7a06 	vstr	s15, [r7, #24]

    	zpzfr_buffer[zpzfr_pos] = sample_zpzfr;
 80018b0:	4b78      	ldr	r3, [pc, #480]	@ (8001a94 <PSOLA_feed+0x2e0>)
 80018b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b6:	4a78      	ldr	r2, [pc, #480]	@ (8001a98 <PSOLA_feed+0x2e4>)
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	601a      	str	r2, [r3, #0]
    	zpzfr_pos = (zpzfr_pos+1)%4;
 80018c0:	4b74      	ldr	r3, [pc, #464]	@ (8001a94 <PSOLA_feed+0x2e0>)
 80018c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c6:	3301      	adds	r3, #1
 80018c8:	425a      	negs	r2, r3
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	f002 0203 	and.w	r2, r2, #3
 80018d2:	bf58      	it	pl
 80018d4:	4253      	negpl	r3, r2
 80018d6:	b21a      	sxth	r2, r3
 80018d8:	4b6e      	ldr	r3, [pc, #440]	@ (8001a94 <PSOLA_feed+0x2e0>)
 80018da:	801a      	strh	r2, [r3, #0]

    	//De-trending (subtracting local mean) with delay of DETREND_N samples
    	float sample_detrended = detrend_buffer[(detrend_pos-DETREND_N+DETREND_BUF_LEN)%DETREND_BUF_LEN] - moving_sum/DETREND_BUF_LEN;
 80018dc:	4b73      	ldr	r3, [pc, #460]	@ (8001aac <PSOLA_feed+0x2f8>)
 80018de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e2:	336e      	adds	r3, #110	@ 0x6e
 80018e4:	4a72      	ldr	r2, [pc, #456]	@ (8001ab0 <PSOLA_feed+0x2fc>)
 80018e6:	fb82 1203 	smull	r1, r2, r2, r3
 80018ea:	441a      	add	r2, r3
 80018ec:	11d1      	asrs	r1, r2, #7
 80018ee:	17da      	asrs	r2, r3, #31
 80018f0:	1a8a      	subs	r2, r1, r2
 80018f2:	21db      	movs	r1, #219	@ 0xdb
 80018f4:	fb01 f202 	mul.w	r2, r1, r2
 80018f8:	1a9a      	subs	r2, r3, r2
 80018fa:	496e      	ldr	r1, [pc, #440]	@ (8001ab4 <PSOLA_feed+0x300>)
 80018fc:	0093      	lsls	r3, r2, #2
 80018fe:	440b      	add	r3, r1
 8001900:	ed93 7a00 	vldr	s14, [r3]
 8001904:	4b6c      	ldr	r3, [pc, #432]	@ (8001ab8 <PSOLA_feed+0x304>)
 8001906:	edd3 6a00 	vldr	s13, [r3]
 800190a:	ed9f 6a6c 	vldr	s12, [pc, #432]	@ 8001abc <PSOLA_feed+0x308>
 800190e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001912:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001916:	edc7 7a05 	vstr	s15, [r7, #20]
    	moving_sum += sample_zpzfr - detrend_buffer[detrend_pos];
 800191a:	4b64      	ldr	r3, [pc, #400]	@ (8001aac <PSOLA_feed+0x2f8>)
 800191c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001920:	4a64      	ldr	r2, [pc, #400]	@ (8001ab4 <PSOLA_feed+0x300>)
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	edd3 7a00 	vldr	s15, [r3]
 800192a:	ed97 7a06 	vldr	s14, [r7, #24]
 800192e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001932:	4b61      	ldr	r3, [pc, #388]	@ (8001ab8 <PSOLA_feed+0x304>)
 8001934:	edd3 7a00 	vldr	s15, [r3]
 8001938:	ee77 7a27 	vadd.f32	s15, s14, s15
 800193c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ab8 <PSOLA_feed+0x304>)
 800193e:	edc3 7a00 	vstr	s15, [r3]
    	detrend_buffer[detrend_pos] = sample_zpzfr;
 8001942:	4b5a      	ldr	r3, [pc, #360]	@ (8001aac <PSOLA_feed+0x2f8>)
 8001944:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001948:	4a5a      	ldr	r2, [pc, #360]	@ (8001ab4 <PSOLA_feed+0x300>)
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	601a      	str	r2, [r3, #0]
    	detrend_pos = (detrend_pos+1)%DETREND_BUF_LEN;
 8001952:	4b56      	ldr	r3, [pc, #344]	@ (8001aac <PSOLA_feed+0x2f8>)
 8001954:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001958:	3301      	adds	r3, #1
 800195a:	4a55      	ldr	r2, [pc, #340]	@ (8001ab0 <PSOLA_feed+0x2fc>)
 800195c:	fb82 1203 	smull	r1, r2, r2, r3
 8001960:	441a      	add	r2, r3
 8001962:	11d1      	asrs	r1, r2, #7
 8001964:	17da      	asrs	r2, r3, #31
 8001966:	1a8a      	subs	r2, r1, r2
 8001968:	21db      	movs	r1, #219	@ 0xdb
 800196a:	fb01 f202 	mul.w	r2, r1, r2
 800196e:	1a9a      	subs	r2, r3, r2
 8001970:	b212      	sxth	r2, r2
 8001972:	4b4e      	ldr	r3, [pc, #312]	@ (8001aac <PSOLA_feed+0x2f8>)
 8001974:	801a      	strh	r2, [r3, #0]

    	//get the original sample with delay of DETREND_N samples
    	float sample_delayed = delay_buffer[delay_pos];
 8001976:	4b52      	ldr	r3, [pc, #328]	@ (8001ac0 <PSOLA_feed+0x30c>)
 8001978:	f9b3 3000 	ldrsh.w	r3, [r3]
 800197c:	4a51      	ldr	r2, [pc, #324]	@ (8001ac4 <PSOLA_feed+0x310>)
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	613b      	str	r3, [r7, #16]
    	delay_buffer[delay_pos] = sample;
 8001986:	4b4e      	ldr	r3, [pc, #312]	@ (8001ac0 <PSOLA_feed+0x30c>)
 8001988:	f9b3 3000 	ldrsh.w	r3, [r3]
 800198c:	4a4d      	ldr	r2, [pc, #308]	@ (8001ac4 <PSOLA_feed+0x310>)
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	6a3a      	ldr	r2, [r7, #32]
 8001994:	601a      	str	r2, [r3, #0]
    	delay_pos = (delay_pos+1)%DETREND_N;
 8001996:	4b4a      	ldr	r3, [pc, #296]	@ (8001ac0 <PSOLA_feed+0x30c>)
 8001998:	f9b3 3000 	ldrsh.w	r3, [r3]
 800199c:	3301      	adds	r3, #1
 800199e:	4a4a      	ldr	r2, [pc, #296]	@ (8001ac8 <PSOLA_feed+0x314>)
 80019a0:	fb82 1203 	smull	r1, r2, r2, r3
 80019a4:	441a      	add	r2, r3
 80019a6:	1191      	asrs	r1, r2, #6
 80019a8:	17da      	asrs	r2, r3, #31
 80019aa:	1a8a      	subs	r2, r1, r2
 80019ac:	216d      	movs	r1, #109	@ 0x6d
 80019ae:	fb01 f202 	mul.w	r2, r1, r2
 80019b2:	1a9a      	subs	r2, r3, r2
 80019b4:	b212      	sxth	r2, r2
 80019b6:	4b42      	ldr	r3, [pc, #264]	@ (8001ac0 <PSOLA_feed+0x30c>)
 80019b8:	801a      	strh	r2, [r3, #0]

    	//Zero-crossing
    	if ((prev_sample_detrended < 0 && sample_detrended >= 0 && psola_pos-prev_peak_pos >= MIN_PERIOD) || psola_pos-prev_peak_pos >= MAX_PERIOD) {
 80019ba:	4b44      	ldr	r3, [pc, #272]	@ (8001acc <PSOLA_feed+0x318>)
 80019bc:	edd3 7a00 	vldr	s15, [r3]
 80019c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c8:	d510      	bpl.n	80019ec <PSOLA_feed+0x238>
 80019ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80019ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d6:	db09      	blt.n	80019ec <PSOLA_feed+0x238>
 80019d8:	4b3d      	ldr	r3, [pc, #244]	@ (8001ad0 <PSOLA_feed+0x31c>)
 80019da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019de:	461a      	mov	r2, r3
 80019e0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ad4 <PSOLA_feed+0x320>)
 80019e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b2b      	cmp	r3, #43	@ 0x2b
 80019ea:	dc0a      	bgt.n	8001a02 <PSOLA_feed+0x24e>
 80019ec:	4b38      	ldr	r3, [pc, #224]	@ (8001ad0 <PSOLA_feed+0x31c>)
 80019ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f2:	461a      	mov	r2, r3
 80019f4:	4b37      	ldr	r3, [pc, #220]	@ (8001ad4 <PSOLA_feed+0x320>)
 80019f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 8001a00:	dd17      	ble.n	8001a32 <PSOLA_feed+0x27e>
    		prev_peak_pos = psola_pos;
 8001a02:	4b33      	ldr	r3, [pc, #204]	@ (8001ad0 <PSOLA_feed+0x31c>)
 8001a04:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a08:	4b32      	ldr	r3, [pc, #200]	@ (8001ad4 <PSOLA_feed+0x320>)
 8001a0a:	801a      	strh	r2, [r3, #0]
    		peaks_list[peaks_list_len] = psola_pos;
 8001a0c:	4b32      	ldr	r3, [pc, #200]	@ (8001ad8 <PSOLA_feed+0x324>)
 8001a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b2e      	ldr	r3, [pc, #184]	@ (8001ad0 <PSOLA_feed+0x31c>)
 8001a16:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001a1a:	4b30      	ldr	r3, [pc, #192]	@ (8001adc <PSOLA_feed+0x328>)
 8001a1c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    		peaks_list_len++;
 8001a20:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad8 <PSOLA_feed+0x324>)
 8001a22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	3301      	adds	r3, #1
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	b21a      	sxth	r2, r3
 8001a2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad8 <PSOLA_feed+0x324>)
 8001a30:	801a      	strh	r2, [r3, #0]
    	}
    	prev_sample_detrended = sample_detrended;
 8001a32:	4a26      	ldr	r2, [pc, #152]	@ (8001acc <PSOLA_feed+0x318>)
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	6013      	str	r3, [r2, #0]

    	// PSOLA

    	psola_in_buffer[psola_pos] = sample_delayed;//copy the sample to in_buffer
 8001a38:	4b25      	ldr	r3, [pc, #148]	@ (8001ad0 <PSOLA_feed+0x31c>)
 8001a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3e:	4a28      	ldr	r2, [pc, #160]	@ (8001ae0 <PSOLA_feed+0x32c>)
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	601a      	str	r2, [r3, #0]
    	psola_pos++;
 8001a48:	4b21      	ldr	r3, [pc, #132]	@ (8001ad0 <PSOLA_feed+0x31c>)
 8001a4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	3301      	adds	r3, #1
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	b21a      	sxth	r2, r3
 8001a56:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad0 <PSOLA_feed+0x31c>)
 8001a58:	801a      	strh	r2, [r3, #0]

    	if (psola_pos == PSOLA_BUF_LEN) {
 8001a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad0 <PSOLA_feed+0x31c>)
 8001a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a60:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8001a64:	4293      	cmp	r3, r2
 8001a66:	f040 8420 	bne.w	80022aa <PSOLA_feed+0xaf6>

    		//compute PSOLA
    		while (1) {
				s_peak += s_rw; // move peak
 8001a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae4 <PSOLA_feed+0x330>)
 8001a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae8 <PSOLA_feed+0x334>)
 8001a74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	b21a      	sxth	r2, r3
 8001a80:	4b18      	ldr	r3, [pc, #96]	@ (8001ae4 <PSOLA_feed+0x330>)
 8001a82:	801a      	strh	r2, [r3, #0]

				s_lw = s_rw;
 8001a84:	4b18      	ldr	r3, [pc, #96]	@ (8001ae8 <PSOLA_feed+0x334>)
 8001a86:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a8a:	4b18      	ldr	r3, [pc, #96]	@ (8001aec <PSOLA_feed+0x338>)
 8001a8c:	801a      	strh	r2, [r3, #0]

				// find the nearest peak
				while (a_peak_idx+1 < peaks_list_len &&  !(peaks_list[a_peak_idx] <= s_peak && s_peak < peaks_list[a_peak_idx+1])) {
 8001a8e:	e038      	b.n	8001b02 <PSOLA_feed+0x34e>
 8001a90:	200019e4 	.word	0x200019e4
 8001a94:	20001fbe 	.word	0x20001fbe
 8001a98:	200019e8 	.word	0x200019e8
 8001a9c:	407ae148 	.word	0x407ae148
 8001aa0:	c0b86595 	.word	0xc0b86595
 8001aa4:	4070f1f7 	.word	0x4070f1f7
 8001aa8:	bf6c2054 	.word	0xbf6c2054
 8001aac:	20001fc0 	.word	0x20001fc0
 8001ab0:	95a02569 	.word	0x95a02569
 8001ab4:	200019f8 	.word	0x200019f8
 8001ab8:	20001f18 	.word	0x20001f18
 8001abc:	435b0000 	.word	0x435b0000
 8001ac0:	20001fc2 	.word	0x20001fc2
 8001ac4:	20001d64 	.word	0x20001d64
 8001ac8:	964fda6d 	.word	0x964fda6d
 8001acc:	20001f1c 	.word	0x20001f1c
 8001ad0:	200093c8 	.word	0x200093c8
 8001ad4:	20001f20 	.word	0x20001f20
 8001ad8:	20001fbc 	.word	0x20001fbc
 8001adc:	20001f24 	.word	0x20001f24
 8001ae0:	20001fc4 	.word	0x20001fc4
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	200093d4 	.word	0x200093d4
 8001aec:	200093d2 	.word	0x200093d2
					a_peak_idx++;
 8001af0:	4b9b      	ldr	r3, [pc, #620]	@ (8001d60 <PSOLA_feed+0x5ac>)
 8001af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	3301      	adds	r3, #1
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	b21a      	sxth	r2, r3
 8001afe:	4b98      	ldr	r3, [pc, #608]	@ (8001d60 <PSOLA_feed+0x5ac>)
 8001b00:	801a      	strh	r2, [r3, #0]
				while (a_peak_idx+1 < peaks_list_len &&  !(peaks_list[a_peak_idx] <= s_peak && s_peak < peaks_list[a_peak_idx+1])) {
 8001b02:	4b97      	ldr	r3, [pc, #604]	@ (8001d60 <PSOLA_feed+0x5ac>)
 8001b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	4a96      	ldr	r2, [pc, #600]	@ (8001d64 <PSOLA_feed+0x5b0>)
 8001b0c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b10:	4293      	cmp	r3, r2
 8001b12:	da17      	bge.n	8001b44 <PSOLA_feed+0x390>
 8001b14:	4b92      	ldr	r3, [pc, #584]	@ (8001d60 <PSOLA_feed+0x5ac>)
 8001b16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	4b92      	ldr	r3, [pc, #584]	@ (8001d68 <PSOLA_feed+0x5b4>)
 8001b1e:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8001b22:	4b92      	ldr	r3, [pc, #584]	@ (8001d6c <PSOLA_feed+0x5b8>)
 8001b24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	dce1      	bgt.n	8001af0 <PSOLA_feed+0x33c>
 8001b2c:	4b8c      	ldr	r3, [pc, #560]	@ (8001d60 <PSOLA_feed+0x5ac>)
 8001b2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b32:	3301      	adds	r3, #1
 8001b34:	4a8c      	ldr	r2, [pc, #560]	@ (8001d68 <PSOLA_feed+0x5b4>)
 8001b36:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8001b3a:	4b8c      	ldr	r3, [pc, #560]	@ (8001d6c <PSOLA_feed+0x5b8>)
 8001b3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	ddd5      	ble.n	8001af0 <PSOLA_feed+0x33c>
				}


				if (s_peak-peaks_list[a_peak_idx] < peaks_list[a_peak_idx+1]) { // select the peak to the left
 8001b44:	4b89      	ldr	r3, [pc, #548]	@ (8001d6c <PSOLA_feed+0x5b8>)
 8001b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	4b84      	ldr	r3, [pc, #528]	@ (8001d60 <PSOLA_feed+0x5ac>)
 8001b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b52:	4619      	mov	r1, r3
 8001b54:	4b84      	ldr	r3, [pc, #528]	@ (8001d68 <PSOLA_feed+0x5b4>)
 8001b56:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	4a80      	ldr	r2, [pc, #512]	@ (8001d60 <PSOLA_feed+0x5ac>)
 8001b5e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b62:	3201      	adds	r2, #1
 8001b64:	4980      	ldr	r1, [pc, #512]	@ (8001d68 <PSOLA_feed+0x5b4>)
 8001b66:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	da29      	bge.n	8001bc2 <PSOLA_feed+0x40e>
					a_peak = peaks_list[a_peak_idx];
 8001b6e:	4b7c      	ldr	r3, [pc, #496]	@ (8001d60 <PSOLA_feed+0x5ac>)
 8001b70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b7c      	ldr	r3, [pc, #496]	@ (8001d68 <PSOLA_feed+0x5b4>)
 8001b78:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8001b7c:	4b7c      	ldr	r3, [pc, #496]	@ (8001d70 <PSOLA_feed+0x5bc>)
 8001b7e:	801a      	strh	r2, [r3, #0]
					s_rw = (int16_t)((peaks_list[a_peak_idx+1] - peaks_list[a_peak_idx]) / pitch_ratio); // set new right window width
 8001b80:	4b77      	ldr	r3, [pc, #476]	@ (8001d60 <PSOLA_feed+0x5ac>)
 8001b82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b86:	3301      	adds	r3, #1
 8001b88:	4a77      	ldr	r2, [pc, #476]	@ (8001d68 <PSOLA_feed+0x5b4>)
 8001b8a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4b73      	ldr	r3, [pc, #460]	@ (8001d60 <PSOLA_feed+0x5ac>)
 8001b92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b96:	4619      	mov	r1, r3
 8001b98:	4b73      	ldr	r3, [pc, #460]	@ (8001d68 <PSOLA_feed+0x5b4>)
 8001b9a:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	ee07 3a90 	vmov	s15, r3
 8001ba4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ba8:	4b72      	ldr	r3, [pc, #456]	@ (8001d74 <PSOLA_feed+0x5c0>)
 8001baa:	ed93 7a00 	vldr	s14, [r3]
 8001bae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bb6:	ee17 3a90 	vmov	r3, s15
 8001bba:	b21a      	sxth	r2, r3
 8001bbc:	4b6e      	ldr	r3, [pc, #440]	@ (8001d78 <PSOLA_feed+0x5c4>)
 8001bbe:	801a      	strh	r2, [r3, #0]
 8001bc0:	e031      	b.n	8001c26 <PSOLA_feed+0x472>
				} else if (a_peak_idx+2 < peaks_list_len) { // select the peak to the right
 8001bc2:	4b67      	ldr	r3, [pc, #412]	@ (8001d60 <PSOLA_feed+0x5ac>)
 8001bc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc8:	3302      	adds	r3, #2
 8001bca:	4a66      	ldr	r2, [pc, #408]	@ (8001d64 <PSOLA_feed+0x5b0>)
 8001bcc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	da28      	bge.n	8001c26 <PSOLA_feed+0x472>
					a_peak = peaks_list[a_peak_idx+1];
 8001bd4:	4b62      	ldr	r3, [pc, #392]	@ (8001d60 <PSOLA_feed+0x5ac>)
 8001bd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	4a62      	ldr	r2, [pc, #392]	@ (8001d68 <PSOLA_feed+0x5b4>)
 8001bde:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8001be2:	4b63      	ldr	r3, [pc, #396]	@ (8001d70 <PSOLA_feed+0x5bc>)
 8001be4:	801a      	strh	r2, [r3, #0]
					s_rw = (int16_t)((peaks_list[a_peak_idx+2] - peaks_list[a_peak_idx+1]) / pitch_ratio); // set new right window width
 8001be6:	4b5e      	ldr	r3, [pc, #376]	@ (8001d60 <PSOLA_feed+0x5ac>)
 8001be8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bec:	3302      	adds	r3, #2
 8001bee:	4a5e      	ldr	r2, [pc, #376]	@ (8001d68 <PSOLA_feed+0x5b4>)
 8001bf0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4b5a      	ldr	r3, [pc, #360]	@ (8001d60 <PSOLA_feed+0x5ac>)
 8001bf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	4a5a      	ldr	r2, [pc, #360]	@ (8001d68 <PSOLA_feed+0x5b4>)
 8001c00:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001c04:	1acb      	subs	r3, r1, r3
 8001c06:	ee07 3a90 	vmov	s15, r3
 8001c0a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c0e:	4b59      	ldr	r3, [pc, #356]	@ (8001d74 <PSOLA_feed+0x5c0>)
 8001c10:	ed93 7a00 	vldr	s14, [r3]
 8001c14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c1c:	ee17 3a90 	vmov	r3, s15
 8001c20:	b21a      	sxth	r2, r3
 8001c22:	4b55      	ldr	r3, [pc, #340]	@ (8001d78 <PSOLA_feed+0x5c4>)
 8001c24:	801a      	strh	r2, [r3, #0]
				}

				a_lw = (int16_t)(s_lw * formant_ratio);
 8001c26:	4b55      	ldr	r3, [pc, #340]	@ (8001d7c <PSOLA_feed+0x5c8>)
 8001c28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c2c:	ee07 3a90 	vmov	s15, r3
 8001c30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c34:	4b52      	ldr	r3, [pc, #328]	@ (8001d80 <PSOLA_feed+0x5cc>)
 8001c36:	edd3 7a00 	vldr	s15, [r3]
 8001c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c42:	ee17 3a90 	vmov	r3, s15
 8001c46:	b21a      	sxth	r2, r3
 8001c48:	4b4e      	ldr	r3, [pc, #312]	@ (8001d84 <PSOLA_feed+0x5d0>)
 8001c4a:	801a      	strh	r2, [r3, #0]
				a_rw = (int16_t)(s_rw * formant_ratio);
 8001c4c:	4b4a      	ldr	r3, [pc, #296]	@ (8001d78 <PSOLA_feed+0x5c4>)
 8001c4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c52:	ee07 3a90 	vmov	s15, r3
 8001c56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c5a:	4b49      	ldr	r3, [pc, #292]	@ (8001d80 <PSOLA_feed+0x5cc>)
 8001c5c:	edd3 7a00 	vldr	s15, [r3]
 8001c60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c68:	ee17 3a90 	vmov	r3, s15
 8001c6c:	b21a      	sxth	r2, r3
 8001c6e:	4b46      	ldr	r3, [pc, #280]	@ (8001d88 <PSOLA_feed+0x5d4>)
 8001c70:	801a      	strh	r2, [r3, #0]

				// left window
				for (int16_t i = 0; i < a_lw+1; i++) {
 8001c72:	2300      	movs	r3, #0
 8001c74:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8001c76:	e028      	b.n	8001cca <PSOLA_feed+0x516>
					if (a_peak-i >= 0) {
 8001c78:	4b3d      	ldr	r3, [pc, #244]	@ (8001d70 <PSOLA_feed+0x5bc>)
 8001c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	db11      	blt.n	8001cae <PSOLA_feed+0x4fa>
						lw_signal[i] = psola_in_buffer[a_peak-i];
 8001c8a:	4b39      	ldr	r3, [pc, #228]	@ (8001d70 <PSOLA_feed+0x5bc>)
 8001c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c90:	461a      	mov	r2, r3
 8001c92:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001c96:	1ad2      	subs	r2, r2, r3
 8001c98:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001c9c:	493b      	ldr	r1, [pc, #236]	@ (8001d8c <PSOLA_feed+0x5d8>)
 8001c9e:	0092      	lsls	r2, r2, #2
 8001ca0:	440a      	add	r2, r1
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	493a      	ldr	r1, [pc, #232]	@ (8001d90 <PSOLA_feed+0x5dc>)
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	e007      	b.n	8001cbe <PSOLA_feed+0x50a>
					} else {
						lw_signal[i] = 0;
 8001cae:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001cb2:	4a37      	ldr	r2, [pc, #220]	@ (8001d90 <PSOLA_feed+0x5dc>)
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
				for (int16_t i = 0; i < a_lw+1; i++) {
 8001cbe:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8001cca:	4b2e      	ldr	r3, [pc, #184]	@ (8001d84 <PSOLA_feed+0x5d0>)
 8001ccc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd0:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	@ 0x3c
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	ddcf      	ble.n	8001c78 <PSOLA_feed+0x4c4>
					}
				}

				// interpolate
				int16_t interp = 1;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	877b      	strh	r3, [r7, #58]	@ 0x3a
				for (int16_t i = 1; i < s_lw+1; i++) {
 8001cdc:	2301      	movs	r3, #1
 8001cde:	873b      	strh	r3, [r7, #56]	@ 0x38
 8001ce0:	e0c8      	b.n	8001e74 <PSOLA_feed+0x6c0>
					float x = (float)i*a_lw/s_lw;
 8001ce2:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001ce6:	ee07 3a90 	vmov	s15, r3
 8001cea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cee:	4b25      	ldr	r3, [pc, #148]	@ (8001d84 <PSOLA_feed+0x5d0>)
 8001cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf4:	ee07 3a90 	vmov	s15, r3
 8001cf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cfc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001d00:	4b1e      	ldr	r3, [pc, #120]	@ (8001d7c <PSOLA_feed+0x5c8>)
 8001d02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d06:	ee07 3a90 	vmov	s15, r3
 8001d0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d12:	edc7 7a02 	vstr	s15, [r7, #8]
					while (interp < x) {
 8001d16:	e005      	b.n	8001d24 <PSOLA_feed+0x570>
						interp++;
 8001d18:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	3301      	adds	r3, #1
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	877b      	strh	r3, [r7, #58]	@ 0x3a
					while (interp < x) {
 8001d24:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001d28:	ee07 3a90 	vmov	s15, r3
 8001d2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d30:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3c:	dcec      	bgt.n	8001d18 <PSOLA_feed+0x564>
					}
					float y;
					if (interp > a_lw) {
 8001d3e:	4b11      	ldr	r3, [pc, #68]	@ (8001d84 <PSOLA_feed+0x5d0>)
 8001d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d44:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	@ 0x3a
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	dd23      	ble.n	8001d94 <PSOLA_feed+0x5e0>
						y = lw_signal[a_lw];
 8001d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d84 <PSOLA_feed+0x5d0>)
 8001d4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d52:	4a0f      	ldr	r2, [pc, #60]	@ (8001d90 <PSOLA_feed+0x5dc>)
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d5c:	e049      	b.n	8001df2 <PSOLA_feed+0x63e>
 8001d5e:	bf00      	nop
 8001d60:	200093cc 	.word	0x200093cc
 8001d64:	20001fbc 	.word	0x20001fbc
 8001d68:	20001f24 	.word	0x20001f24
 8001d6c:	20000008 	.word	0x20000008
 8001d70:	200093ca 	.word	0x200093ca
 8001d74:	20000000 	.word	0x20000000
 8001d78:	200093d4 	.word	0x200093d4
 8001d7c:	200093d2 	.word	0x200093d2
 8001d80:	20000004 	.word	0x20000004
 8001d84:	200093ce 	.word	0x200093ce
 8001d88:	200093d0 	.word	0x200093d0
 8001d8c:	20001fc4 	.word	0x20001fc4
 8001d90:	200093d8 	.word	0x200093d8
					} else {
						y = lw_signal[interp-1] * (interp-x) + lw_signal[interp] * (x-interp+1);
 8001d94:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	4acd      	ldr	r2, [pc, #820]	@ (80020d0 <PSOLA_feed+0x91c>)
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	ed93 7a00 	vldr	s14, [r3]
 8001da4:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001da8:	ee07 3a90 	vmov	s15, r3
 8001dac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001db0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001db4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001db8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dbc:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001dc0:	4ac3      	ldr	r2, [pc, #780]	@ (80020d0 <PSOLA_feed+0x91c>)
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	edd3 6a00 	vldr	s13, [r3]
 8001dca:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001dce:	ee07 3a90 	vmov	s15, r3
 8001dd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dda:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001dde:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8001de2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001de6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dee:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
					}
					if (s_peak-i >= 0) {
 8001df2:	4bb8      	ldr	r3, [pc, #736]	@ (80020d4 <PSOLA_feed+0x920>)
 8001df4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	db31      	blt.n	8001e68 <PSOLA_feed+0x6b4>
						psola_out_buffer[s_peak-i] += (float)(s_lw-i)/s_lw * y;
 8001e04:	4bb3      	ldr	r3, [pc, #716]	@ (80020d4 <PSOLA_feed+0x920>)
 8001e06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	4ab1      	ldr	r2, [pc, #708]	@ (80020d8 <PSOLA_feed+0x924>)
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	ed93 7a00 	vldr	s14, [r3]
 8001e1c:	4baf      	ldr	r3, [pc, #700]	@ (80020dc <PSOLA_feed+0x928>)
 8001e1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e22:	461a      	mov	r2, r3
 8001e24:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	ee07 3a90 	vmov	s15, r3
 8001e2e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001e32:	4baa      	ldr	r3, [pc, #680]	@ (80020dc <PSOLA_feed+0x928>)
 8001e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e38:	ee07 3a90 	vmov	s15, r3
 8001e3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e40:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001e44:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001e48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e4c:	4ba1      	ldr	r3, [pc, #644]	@ (80020d4 <PSOLA_feed+0x920>)
 8001e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e52:	461a      	mov	r2, r3
 8001e54:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e5e:	4a9e      	ldr	r2, [pc, #632]	@ (80020d8 <PSOLA_feed+0x924>)
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	edc3 7a00 	vstr	s15, [r3]
				for (int16_t i = 1; i < s_lw+1; i++) {
 8001e68:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	3301      	adds	r3, #1
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	873b      	strh	r3, [r7, #56]	@ 0x38
 8001e74:	4b99      	ldr	r3, [pc, #612]	@ (80020dc <PSOLA_feed+0x928>)
 8001e76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e7a:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	@ 0x38
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	f77f af2f 	ble.w	8001ce2 <PSOLA_feed+0x52e>
					}
				}

				psola_out_buffer[s_peak] += psola_in_buffer[a_peak]; // peak
 8001e84:	4b93      	ldr	r3, [pc, #588]	@ (80020d4 <PSOLA_feed+0x920>)
 8001e86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e8a:	4a93      	ldr	r2, [pc, #588]	@ (80020d8 <PSOLA_feed+0x924>)
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	ed93 7a00 	vldr	s14, [r3]
 8001e94:	4b92      	ldr	r3, [pc, #584]	@ (80020e0 <PSOLA_feed+0x92c>)
 8001e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e9a:	4a92      	ldr	r2, [pc, #584]	@ (80020e4 <PSOLA_feed+0x930>)
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	edd3 7a00 	vldr	s15, [r3]
 8001ea4:	4b8b      	ldr	r3, [pc, #556]	@ (80020d4 <PSOLA_feed+0x920>)
 8001ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eae:	4a8a      	ldr	r2, [pc, #552]	@ (80020d8 <PSOLA_feed+0x924>)
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	edc3 7a00 	vstr	s15, [r3]

				// right window
				for (int16_t i = 0; i < a_rw+1; i++) {
 8001eb8:	2300      	movs	r3, #0
 8001eba:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001ebc:	e02a      	b.n	8001f14 <PSOLA_feed+0x760>
					if (a_peak+i < PSOLA_BUF_LEN) {
 8001ebe:	4b88      	ldr	r3, [pc, #544]	@ (80020e0 <PSOLA_feed+0x92c>)
 8001ec0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001eca:	4413      	add	r3, r2
 8001ecc:	f640 42e3 	movw	r2, #3299	@ 0xce3
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	dc11      	bgt.n	8001ef8 <PSOLA_feed+0x744>
						rw_signal[i] = psola_in_buffer[a_peak+i];
 8001ed4:	4b82      	ldr	r3, [pc, #520]	@ (80020e0 <PSOLA_feed+0x92c>)
 8001ed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eda:	461a      	mov	r2, r3
 8001edc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001ee0:	441a      	add	r2, r3
 8001ee2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001ee6:	497f      	ldr	r1, [pc, #508]	@ (80020e4 <PSOLA_feed+0x930>)
 8001ee8:	0092      	lsls	r2, r2, #2
 8001eea:	440a      	add	r2, r1
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	497e      	ldr	r1, [pc, #504]	@ (80020e8 <PSOLA_feed+0x934>)
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	e007      	b.n	8001f08 <PSOLA_feed+0x754>
					} else {
						rw_signal[i] = 0;
 8001ef8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001efc:	4a7a      	ldr	r2, [pc, #488]	@ (80020e8 <PSOLA_feed+0x934>)
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
				for (int16_t i = 0; i < a_rw+1; i++) {
 8001f08:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	3301      	adds	r3, #1
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001f14:	4b75      	ldr	r3, [pc, #468]	@ (80020ec <PSOLA_feed+0x938>)
 8001f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f1a:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	ddcd      	ble.n	8001ebe <PSOLA_feed+0x70a>
					}
				}

				// interpolate
				interp = 1;
 8001f22:	2301      	movs	r3, #1
 8001f24:	877b      	strh	r3, [r7, #58]	@ 0x3a
				for (int16_t i = 1; i < s_rw+1; i++) {
 8001f26:	2301      	movs	r3, #1
 8001f28:	863b      	strh	r3, [r7, #48]	@ 0x30
 8001f2a:	e0af      	b.n	800208c <PSOLA_feed+0x8d8>
					float x = (float)i*a_rw/s_rw;
 8001f2c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001f30:	ee07 3a90 	vmov	s15, r3
 8001f34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f38:	4b6c      	ldr	r3, [pc, #432]	@ (80020ec <PSOLA_feed+0x938>)
 8001f3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f3e:	ee07 3a90 	vmov	s15, r3
 8001f42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f46:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001f4a:	4b69      	ldr	r3, [pc, #420]	@ (80020f0 <PSOLA_feed+0x93c>)
 8001f4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f50:	ee07 3a90 	vmov	s15, r3
 8001f54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f5c:	edc7 7a03 	vstr	s15, [r7, #12]
					while (interp < x) {
 8001f60:	e005      	b.n	8001f6e <PSOLA_feed+0x7ba>
						interp++;
 8001f62:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	3301      	adds	r3, #1
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	877b      	strh	r3, [r7, #58]	@ 0x3a
					while (interp < x) {
 8001f6e:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001f72:	ee07 3a90 	vmov	s15, r3
 8001f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f7a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f86:	dcec      	bgt.n	8001f62 <PSOLA_feed+0x7ae>
					}
					float y;
					if (interp > a_rw) {
 8001f88:	4b58      	ldr	r3, [pc, #352]	@ (80020ec <PSOLA_feed+0x938>)
 8001f8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f8e:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	@ 0x3a
 8001f92:	429a      	cmp	r2, r3
 8001f94:	dd08      	ble.n	8001fa8 <PSOLA_feed+0x7f4>
						y = rw_signal[a_rw];
 8001f96:	4b55      	ldr	r3, [pc, #340]	@ (80020ec <PSOLA_feed+0x938>)
 8001f98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f9c:	4a52      	ldr	r2, [pc, #328]	@ (80020e8 <PSOLA_feed+0x934>)
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fa6:	e02e      	b.n	8002006 <PSOLA_feed+0x852>
					} else {
						y = rw_signal[interp-1] * (interp-x) + rw_signal[interp] * (x-interp+1);
 8001fa8:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001fac:	3b01      	subs	r3, #1
 8001fae:	4a4e      	ldr	r2, [pc, #312]	@ (80020e8 <PSOLA_feed+0x934>)
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	ed93 7a00 	vldr	s14, [r3]
 8001fb8:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001fbc:	ee07 3a90 	vmov	s15, r3
 8001fc0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001fc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fc8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001fcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fd0:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001fd4:	4a44      	ldr	r2, [pc, #272]	@ (80020e8 <PSOLA_feed+0x934>)
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	edd3 6a00 	vldr	s13, [r3]
 8001fde:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001fe2:	ee07 3a90 	vmov	s15, r3
 8001fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fea:	ed97 6a03 	vldr	s12, [r7, #12]
 8001fee:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001ff2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8001ff6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001ffa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002002:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
					}
					if (s_peak+i < PSOLA_BUF_LEN) {
 8002006:	4b33      	ldr	r3, [pc, #204]	@ (80020d4 <PSOLA_feed+0x920>)
 8002008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800200c:	461a      	mov	r2, r3
 800200e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002012:	4413      	add	r3, r2
 8002014:	f640 42e3 	movw	r2, #3299	@ 0xce3
 8002018:	4293      	cmp	r3, r2
 800201a:	dc31      	bgt.n	8002080 <PSOLA_feed+0x8cc>
						psola_out_buffer[s_peak+i] += (float)(s_rw-i)/s_lw * y;
 800201c:	4b2d      	ldr	r3, [pc, #180]	@ (80020d4 <PSOLA_feed+0x920>)
 800201e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002022:	461a      	mov	r2, r3
 8002024:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002028:	4413      	add	r3, r2
 800202a:	4a2b      	ldr	r2, [pc, #172]	@ (80020d8 <PSOLA_feed+0x924>)
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	ed93 7a00 	vldr	s14, [r3]
 8002034:	4b2e      	ldr	r3, [pc, #184]	@ (80020f0 <PSOLA_feed+0x93c>)
 8002036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800203a:	461a      	mov	r2, r3
 800203c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	ee07 3a90 	vmov	s15, r3
 8002046:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800204a:	4b24      	ldr	r3, [pc, #144]	@ (80020dc <PSOLA_feed+0x928>)
 800204c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002050:	ee07 3a90 	vmov	s15, r3
 8002054:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002058:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800205c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002060:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002064:	4b1b      	ldr	r3, [pc, #108]	@ (80020d4 <PSOLA_feed+0x920>)
 8002066:	f9b3 3000 	ldrsh.w	r3, [r3]
 800206a:	461a      	mov	r2, r3
 800206c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002070:	4413      	add	r3, r2
 8002072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002076:	4a18      	ldr	r2, [pc, #96]	@ (80020d8 <PSOLA_feed+0x924>)
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	edc3 7a00 	vstr	s15, [r3]
				for (int16_t i = 1; i < s_rw+1; i++) {
 8002080:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002084:	b29b      	uxth	r3, r3
 8002086:	3301      	adds	r3, #1
 8002088:	b29b      	uxth	r3, r3
 800208a:	863b      	strh	r3, [r7, #48]	@ 0x30
 800208c:	4b18      	ldr	r3, [pc, #96]	@ (80020f0 <PSOLA_feed+0x93c>)
 800208e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002092:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 8002096:	429a      	cmp	r2, r3
 8002098:	f77f af48 	ble.w	8001f2c <PSOLA_feed+0x778>
					}
				}

				// end condition
				if (s_peak >= PSOLA_HALF_BUF_LEN + PSOLA_HALF_BUF_LEN/2 + 1) {
 800209c:	4b0d      	ldr	r3, [pc, #52]	@ (80020d4 <PSOLA_feed+0x920>)
 800209e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020a2:	f640 12ab 	movw	r2, #2475	@ 0x9ab
 80020a6:	4293      	cmp	r3, r2
 80020a8:	dc00      	bgt.n	80020ac <PSOLA_feed+0x8f8>
    		while (1) {
 80020aa:	e4de      	b.n	8001a6a <PSOLA_feed+0x2b6>
					break;
 80020ac:	bf00      	nop
				}
    		}

    		// for the next loop
    		a_peak_idx = 0;
 80020ae:	4b11      	ldr	r3, [pc, #68]	@ (80020f4 <PSOLA_feed+0x940>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	801a      	strh	r2, [r3, #0]
    		s_peak -= PSOLA_HALF_BUF_LEN;
 80020b4:	4b07      	ldr	r3, [pc, #28]	@ (80020d4 <PSOLA_feed+0x920>)
 80020b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	f2a3 6372 	subw	r3, r3, #1650	@ 0x672
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	b21a      	sxth	r2, r3
 80020c4:	4b03      	ldr	r3, [pc, #12]	@ (80020d4 <PSOLA_feed+0x920>)
 80020c6:	801a      	strh	r2, [r3, #0]

    		//output audio and copy the second half to the first half
    		for (int16_t i = 0; i < PSOLA_HALF_BUF_LEN; i++) {
 80020c8:	2300      	movs	r3, #0
 80020ca:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80020cc:	e08b      	b.n	80021e6 <PSOLA_feed+0xa32>
 80020ce:	bf00      	nop
 80020d0:	200093d8 	.word	0x200093d8
 80020d4:	20000008 	.word	0x20000008
 80020d8:	20005354 	.word	0x20005354
 80020dc:	200093d2 	.word	0x200093d2
 80020e0:	200093ca 	.word	0x200093ca
 80020e4:	20001fc4 	.word	0x20001fc4
 80020e8:	20009c74 	.word	0x20009c74
 80020ec:	200093d0 	.word	0x200093d0
 80020f0:	200093d4 	.word	0x200093d4
 80020f4:	200093cc 	.word	0x200093cc
    			if (psola_out_buffer[i] <= 32767 && psola_out_buffer[i] >= -32768) {
 80020f8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80020fc:	4a74      	ldr	r2, [pc, #464]	@ (80022d0 <PSOLA_feed+0xb1c>)
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	edd3 7a00 	vldr	s15, [r3]
 8002106:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 80022d4 <PSOLA_feed+0xb20>
 800210a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800210e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002112:	d81f      	bhi.n	8002154 <PSOLA_feed+0x9a0>
 8002114:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8002118:	4a6d      	ldr	r2, [pc, #436]	@ (80022d0 <PSOLA_feed+0xb1c>)
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	edd3 7a00 	vldr	s15, [r3]
 8002122:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 80022d8 <PSOLA_feed+0xb24>
 8002126:	eef4 7ac7 	vcmpe.f32	s15, s14
 800212a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800212e:	db11      	blt.n	8002154 <PSOLA_feed+0x9a0>
    				audio_out[i] = (int16_t)psola_out_buffer[i];
 8002130:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8002134:	4a66      	ldr	r2, [pc, #408]	@ (80022d0 <PSOLA_feed+0xb1c>)
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	edd3 7a00 	vldr	s15, [r3]
 800213e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8002142:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002146:	ee17 2a90 	vmov	r2, s15
 800214a:	b211      	sxth	r1, r2
 800214c:	4a63      	ldr	r2, [pc, #396]	@ (80022dc <PSOLA_feed+0xb28>)
 800214e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002152:	e01c      	b.n	800218e <PSOLA_feed+0x9da>
    			} else if (psola_out_buffer[i] > 32767) {
 8002154:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8002158:	4a5d      	ldr	r2, [pc, #372]	@ (80022d0 <PSOLA_feed+0xb1c>)
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	edd3 7a00 	vldr	s15, [r3]
 8002162:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 80022d4 <PSOLA_feed+0xb20>
 8002166:	eef4 7ac7 	vcmpe.f32	s15, s14
 800216a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800216e:	dd07      	ble.n	8002180 <PSOLA_feed+0x9cc>
    				audio_out[i] = 32767;
 8002170:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8002174:	4a59      	ldr	r2, [pc, #356]	@ (80022dc <PSOLA_feed+0xb28>)
 8002176:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800217a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800217e:	e006      	b.n	800218e <PSOLA_feed+0x9da>
    			} else {
    				audio_out[i] = -32768;
 8002180:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8002184:	4a55      	ldr	r2, [pc, #340]	@ (80022dc <PSOLA_feed+0xb28>)
 8002186:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800218a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    			}
    			psola_in_buffer[i] = psola_in_buffer[i+PSOLA_HALF_BUF_LEN];
 800218e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8002192:	f203 6272 	addw	r2, r3, #1650	@ 0x672
 8002196:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800219a:	4951      	ldr	r1, [pc, #324]	@ (80022e0 <PSOLA_feed+0xb2c>)
 800219c:	0092      	lsls	r2, r2, #2
 800219e:	440a      	add	r2, r1
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	494f      	ldr	r1, [pc, #316]	@ (80022e0 <PSOLA_feed+0xb2c>)
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	601a      	str	r2, [r3, #0]
    			psola_out_buffer[i] = psola_out_buffer[i+PSOLA_HALF_BUF_LEN];
 80021aa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80021ae:	f203 6272 	addw	r2, r3, #1650	@ 0x672
 80021b2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80021b6:	4946      	ldr	r1, [pc, #280]	@ (80022d0 <PSOLA_feed+0xb1c>)
 80021b8:	0092      	lsls	r2, r2, #2
 80021ba:	440a      	add	r2, r1
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	4944      	ldr	r1, [pc, #272]	@ (80022d0 <PSOLA_feed+0xb1c>)
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	601a      	str	r2, [r3, #0]
    			psola_out_buffer[i+PSOLA_HALF_BUF_LEN] = 0;
 80021c6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80021ca:	f203 6372 	addw	r3, r3, #1650	@ 0x672
 80021ce:	4a40      	ldr	r2, [pc, #256]	@ (80022d0 <PSOLA_feed+0xb1c>)
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
    		for (int16_t i = 0; i < PSOLA_HALF_BUF_LEN; i++) {
 80021da:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80021de:	b29b      	uxth	r3, r3
 80021e0:	3301      	adds	r3, #1
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80021e6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80021ea:	f240 6271 	movw	r2, #1649	@ 0x671
 80021ee:	4293      	cmp	r3, r2
 80021f0:	dd82      	ble.n	80020f8 <PSOLA_feed+0x944>
    		//UART_Printf("%d ", audio_out[2]);
    		//UART_Printf("%d\r\n", audio_out[3]);
    		//UART_Printf("%d\r\n", test);

    		//output to UART
    		HAL_UART_Transmit(&huart1, start_marker, 4, 1000);
 80021f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021f6:	2204      	movs	r2, #4
 80021f8:	493a      	ldr	r1, [pc, #232]	@ (80022e4 <PSOLA_feed+0xb30>)
 80021fa:	483b      	ldr	r0, [pc, #236]	@ (80022e8 <PSOLA_feed+0xb34>)
 80021fc:	f003 fec5 	bl	8005f8a <HAL_UART_Transmit>
    		HAL_UART_Transmit(&huart1, (uint8_t*)audio_out, PSOLA_HALF_BUF_LEN * 2, 1000);
 8002200:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002204:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8002208:	4934      	ldr	r1, [pc, #208]	@ (80022dc <PSOLA_feed+0xb28>)
 800220a:	4837      	ldr	r0, [pc, #220]	@ (80022e8 <PSOLA_feed+0xb34>)
 800220c:	f003 febd 	bl	8005f8a <HAL_UART_Transmit>

    		//move the peak index array left PSOLA_HALF_BUF_LEN samples (discard negatives)
    		int16_t new_start_idx = -1;
 8002210:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002214:	853b      	strh	r3, [r7, #40]	@ 0x28
    		for (int16_t idx = 0; idx < peaks_list_len; idx++) {
 8002216:	2300      	movs	r3, #0
 8002218:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800221a:	e027      	b.n	800226c <PSOLA_feed+0xab8>
    			if (peaks_list[idx] >= PSOLA_HALF_BUF_LEN) {
 800221c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002220:	4a32      	ldr	r2, [pc, #200]	@ (80022ec <PSOLA_feed+0xb38>)
 8002222:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002226:	f240 6271 	movw	r2, #1649	@ 0x671
 800222a:	4293      	cmp	r3, r2
 800222c:	dd18      	ble.n	8002260 <PSOLA_feed+0xaac>
    				if (new_start_idx == -1) {
 800222e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8002232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002236:	d101      	bne.n	800223c <PSOLA_feed+0xa88>
    					new_start_idx = idx;
 8002238:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800223a:	853b      	strh	r3, [r7, #40]	@ 0x28
    				}
    				peaks_list[idx-new_start_idx] = peaks_list[idx] - PSOLA_HALF_BUF_LEN;
 800223c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002240:	4a2a      	ldr	r2, [pc, #168]	@ (80022ec <PSOLA_feed+0xb38>)
 8002242:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002246:	b29b      	uxth	r3, r3
 8002248:	f2a3 6372 	subw	r3, r3, #1650	@ 0x672
 800224c:	b299      	uxth	r1, r3
 800224e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8002252:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	b209      	sxth	r1, r1
 800225a:	4a24      	ldr	r2, [pc, #144]	@ (80022ec <PSOLA_feed+0xb38>)
 800225c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    		for (int16_t idx = 0; idx < peaks_list_len; idx++) {
 8002260:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002264:	b29b      	uxth	r3, r3
 8002266:	3301      	adds	r3, #1
 8002268:	b29b      	uxth	r3, r3
 800226a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800226c:	4b20      	ldr	r3, [pc, #128]	@ (80022f0 <PSOLA_feed+0xb3c>)
 800226e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002272:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8002276:	429a      	cmp	r2, r3
 8002278:	dbd0      	blt.n	800221c <PSOLA_feed+0xa68>
    			}
    		}
    		peaks_list_len -= new_start_idx;
 800227a:	4b1d      	ldr	r3, [pc, #116]	@ (80022f0 <PSOLA_feed+0xb3c>)
 800227c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002280:	b29a      	uxth	r2, r3
 8002282:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	b29b      	uxth	r3, r3
 8002288:	b21a      	sxth	r2, r3
 800228a:	4b19      	ldr	r3, [pc, #100]	@ (80022f0 <PSOLA_feed+0xb3c>)
 800228c:	801a      	strh	r2, [r3, #0]
    		prev_peak_pos -= PSOLA_HALF_BUF_LEN;
 800228e:	4b19      	ldr	r3, [pc, #100]	@ (80022f4 <PSOLA_feed+0xb40>)
 8002290:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002294:	b29b      	uxth	r3, r3
 8002296:	f2a3 6372 	subw	r3, r3, #1650	@ 0x672
 800229a:	b29b      	uxth	r3, r3
 800229c:	b21a      	sxth	r2, r3
 800229e:	4b15      	ldr	r3, [pc, #84]	@ (80022f4 <PSOLA_feed+0xb40>)
 80022a0:	801a      	strh	r2, [r3, #0]

    		psola_pos = PSOLA_HALF_BUF_LEN; //continue from the middle
 80022a2:	4b15      	ldr	r3, [pc, #84]	@ (80022f8 <PSOLA_feed+0xb44>)
 80022a4:	f240 6272 	movw	r2, #1650	@ 0x672
 80022a8:	801a      	strh	r2, [r3, #0]
    for(int16_t feed_pos = 0; feed_pos < feed_length; feed_pos++){
 80022aa:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	3301      	adds	r3, #1
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80022b6:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	@ 0x3e
 80022ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022be:	429a      	cmp	r2, r3
 80022c0:	f6ff aa82 	blt.w	80017c8 <PSOLA_feed+0x14>
    //Get peaks

    //PSOLA

    //Handle Output
}
 80022c4:	bf00      	nop
 80022c6:	bf00      	nop
 80022c8:	3740      	adds	r7, #64	@ 0x40
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20005354 	.word	0x20005354
 80022d4:	46fffe00 	.word	0x46fffe00
 80022d8:	c7000000 	.word	0xc7000000
 80022dc:	200086e4 	.word	0x200086e4
 80022e0:	20001fc4 	.word	0x20001fc4
 80022e4:	2000000c 	.word	0x2000000c
 80022e8:	200003ec 	.word	0x200003ec
 80022ec:	20001f24 	.word	0x20001f24
 80022f0:	20001fbc 	.word	0x20001fbc
 80022f4:	20001f20 	.word	0x20001f20
 80022f8:	200093c8 	.word	0x200093c8

080022fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002302:	4b11      	ldr	r3, [pc, #68]	@ (8002348 <HAL_MspInit+0x4c>)
 8002304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002306:	4a10      	ldr	r2, [pc, #64]	@ (8002348 <HAL_MspInit+0x4c>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	6613      	str	r3, [r2, #96]	@ 0x60
 800230e:	4b0e      	ldr	r3, [pc, #56]	@ (8002348 <HAL_MspInit+0x4c>)
 8002310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	607b      	str	r3, [r7, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800231a:	4b0b      	ldr	r3, [pc, #44]	@ (8002348 <HAL_MspInit+0x4c>)
 800231c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231e:	4a0a      	ldr	r2, [pc, #40]	@ (8002348 <HAL_MspInit+0x4c>)
 8002320:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002324:	6593      	str	r3, [r2, #88]	@ 0x58
 8002326:	4b08      	ldr	r3, [pc, #32]	@ (8002348 <HAL_MspInit+0x4c>)
 8002328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800232e:	603b      	str	r3, [r7, #0]
 8002330:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002332:	2200      	movs	r2, #0
 8002334:	210f      	movs	r1, #15
 8002336:	f06f 0001 	mvn.w	r0, #1
 800233a:	f000 ff66 	bl	800320a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40021000 	.word	0x40021000

0800234c <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b0ac      	sub	sp, #176	@ 0xb0
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002364:	f107 0314 	add.w	r3, r7, #20
 8002368:	2288      	movs	r2, #136	@ 0x88
 800236a:	2100      	movs	r1, #0
 800236c:	4618      	mov	r0, r3
 800236e:	f008 f961 	bl	800a634 <memset>
  if(DFSDM1_Init == 0)
 8002372:	4b45      	ldr	r3, [pc, #276]	@ (8002488 <HAL_DFSDM_FilterMspInit+0x13c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d14b      	bne.n	8002412 <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800237a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800237e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002380:	2300      	movs	r3, #0
 8002382:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002386:	f107 0314 	add.w	r3, r7, #20
 800238a:	4618      	mov	r0, r3
 800238c:	f003 f840 	bl	8005410 <HAL_RCCEx_PeriphCLKConfig>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8002396:	f7ff f9ef 	bl	8001778 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800239a:	4b3c      	ldr	r3, [pc, #240]	@ (800248c <HAL_DFSDM_FilterMspInit+0x140>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	3301      	adds	r3, #1
 80023a0:	4a3a      	ldr	r2, [pc, #232]	@ (800248c <HAL_DFSDM_FilterMspInit+0x140>)
 80023a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80023a4:	4b39      	ldr	r3, [pc, #228]	@ (800248c <HAL_DFSDM_FilterMspInit+0x140>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d10b      	bne.n	80023c4 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80023ac:	4b38      	ldr	r3, [pc, #224]	@ (8002490 <HAL_DFSDM_FilterMspInit+0x144>)
 80023ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023b0:	4a37      	ldr	r2, [pc, #220]	@ (8002490 <HAL_DFSDM_FilterMspInit+0x144>)
 80023b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80023b8:	4b35      	ldr	r3, [pc, #212]	@ (8002490 <HAL_DFSDM_FilterMspInit+0x144>)
 80023ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023c4:	4b32      	ldr	r3, [pc, #200]	@ (8002490 <HAL_DFSDM_FilterMspInit+0x144>)
 80023c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c8:	4a31      	ldr	r2, [pc, #196]	@ (8002490 <HAL_DFSDM_FilterMspInit+0x144>)
 80023ca:	f043 0310 	orr.w	r3, r3, #16
 80023ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002490 <HAL_DFSDM_FilterMspInit+0x144>)
 80023d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d4:	f003 0310 	and.w	r3, r3, #16
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80023dc:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80023e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e4:	2302      	movs	r3, #2
 80023e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f0:	2300      	movs	r3, #0
 80023f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80023f6:	2306      	movs	r3, #6
 80023f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002400:	4619      	mov	r1, r3
 8002402:	4824      	ldr	r0, [pc, #144]	@ (8002494 <HAL_DFSDM_FilterMspInit+0x148>)
 8002404:	f001 fc6c 	bl	8003ce0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8002408:	4b1f      	ldr	r3, [pc, #124]	@ (8002488 <HAL_DFSDM_FilterMspInit+0x13c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	3301      	adds	r3, #1
 800240e:	4a1e      	ldr	r2, [pc, #120]	@ (8002488 <HAL_DFSDM_FilterMspInit+0x13c>)
 8002410:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a20      	ldr	r2, [pc, #128]	@ (8002498 <HAL_DFSDM_FilterMspInit+0x14c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d130      	bne.n	800247e <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 800241c:	4b1f      	ldr	r3, [pc, #124]	@ (800249c <HAL_DFSDM_FilterMspInit+0x150>)
 800241e:	4a20      	ldr	r2, [pc, #128]	@ (80024a0 <HAL_DFSDM_FilterMspInit+0x154>)
 8002420:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 8002422:	4b1e      	ldr	r3, [pc, #120]	@ (800249c <HAL_DFSDM_FilterMspInit+0x150>)
 8002424:	2200      	movs	r2, #0
 8002426:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002428:	4b1c      	ldr	r3, [pc, #112]	@ (800249c <HAL_DFSDM_FilterMspInit+0x150>)
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800242e:	4b1b      	ldr	r3, [pc, #108]	@ (800249c <HAL_DFSDM_FilterMspInit+0x150>)
 8002430:	2200      	movs	r2, #0
 8002432:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8002434:	4b19      	ldr	r3, [pc, #100]	@ (800249c <HAL_DFSDM_FilterMspInit+0x150>)
 8002436:	2280      	movs	r2, #128	@ 0x80
 8002438:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800243a:	4b18      	ldr	r3, [pc, #96]	@ (800249c <HAL_DFSDM_FilterMspInit+0x150>)
 800243c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002440:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002442:	4b16      	ldr	r3, [pc, #88]	@ (800249c <HAL_DFSDM_FilterMspInit+0x150>)
 8002444:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002448:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 800244a:	4b14      	ldr	r3, [pc, #80]	@ (800249c <HAL_DFSDM_FilterMspInit+0x150>)
 800244c:	2220      	movs	r2, #32
 800244e:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8002450:	4b12      	ldr	r3, [pc, #72]	@ (800249c <HAL_DFSDM_FilterMspInit+0x150>)
 8002452:	2200      	movs	r2, #0
 8002454:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8002456:	4811      	ldr	r0, [pc, #68]	@ (800249c <HAL_DFSDM_FilterMspInit+0x150>)
 8002458:	f001 fa4a 	bl	80038f0 <HAL_DMA_Init>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 8002462:	f7ff f989 	bl	8001778 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a0c      	ldr	r2, [pc, #48]	@ (800249c <HAL_DFSDM_FilterMspInit+0x150>)
 800246a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800246c:	4a0b      	ldr	r2, [pc, #44]	@ (800249c <HAL_DFSDM_FilterMspInit+0x150>)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a09      	ldr	r2, [pc, #36]	@ (800249c <HAL_DFSDM_FilterMspInit+0x150>)
 8002476:	629a      	str	r2, [r3, #40]	@ 0x28
 8002478:	4a08      	ldr	r2, [pc, #32]	@ (800249c <HAL_DFSDM_FilterMspInit+0x150>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6293      	str	r3, [r2, #40]	@ 0x28
  }

}
 800247e:	bf00      	nop
 8002480:	37b0      	adds	r7, #176	@ 0xb0
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	2000a514 	.word	0x2000a514
 800248c:	2000a510 	.word	0x2000a510
 8002490:	40021000 	.word	0x40021000
 8002494:	48001000 	.word	0x48001000
 8002498:	40016100 	.word	0x40016100
 800249c:	200002a8 	.word	0x200002a8
 80024a0:	40020044 	.word	0x40020044

080024a4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b0ac      	sub	sp, #176	@ 0xb0
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024bc:	f107 0314 	add.w	r3, r7, #20
 80024c0:	2288      	movs	r2, #136	@ 0x88
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f008 f8b5 	bl	800a634 <memset>
  if(DFSDM1_Init == 0)
 80024ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002574 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d14b      	bne.n	800256a <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80024d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024d6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80024d8:	2300      	movs	r3, #0
 80024da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024de:	f107 0314 	add.w	r3, r7, #20
 80024e2:	4618      	mov	r0, r3
 80024e4:	f002 ff94 	bl	8005410 <HAL_RCCEx_PeriphCLKConfig>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80024ee:	f7ff f943 	bl	8001778 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80024f2:	4b21      	ldr	r3, [pc, #132]	@ (8002578 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	3301      	adds	r3, #1
 80024f8:	4a1f      	ldr	r2, [pc, #124]	@ (8002578 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80024fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80024fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002578 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d10b      	bne.n	800251c <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002504:	4b1d      	ldr	r3, [pc, #116]	@ (800257c <HAL_DFSDM_ChannelMspInit+0xd8>)
 8002506:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002508:	4a1c      	ldr	r2, [pc, #112]	@ (800257c <HAL_DFSDM_ChannelMspInit+0xd8>)
 800250a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800250e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002510:	4b1a      	ldr	r3, [pc, #104]	@ (800257c <HAL_DFSDM_ChannelMspInit+0xd8>)
 8002512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002514:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002518:	613b      	str	r3, [r7, #16]
 800251a:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800251c:	4b17      	ldr	r3, [pc, #92]	@ (800257c <HAL_DFSDM_ChannelMspInit+0xd8>)
 800251e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002520:	4a16      	ldr	r2, [pc, #88]	@ (800257c <HAL_DFSDM_ChannelMspInit+0xd8>)
 8002522:	f043 0310 	orr.w	r3, r3, #16
 8002526:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002528:	4b14      	ldr	r3, [pc, #80]	@ (800257c <HAL_DFSDM_ChannelMspInit+0xd8>)
 800252a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800252c:	f003 0310 	and.w	r3, r3, #16
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8002534:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8002538:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253c:	2302      	movs	r3, #2
 800253e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002548:	2300      	movs	r3, #0
 800254a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800254e:	2306      	movs	r3, #6
 8002550:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002554:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002558:	4619      	mov	r1, r3
 800255a:	4809      	ldr	r0, [pc, #36]	@ (8002580 <HAL_DFSDM_ChannelMspInit+0xdc>)
 800255c:	f001 fbc0 	bl	8003ce0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8002560:	4b04      	ldr	r3, [pc, #16]	@ (8002574 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3301      	adds	r3, #1
 8002566:	4a03      	ldr	r2, [pc, #12]	@ (8002574 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8002568:	6013      	str	r3, [r2, #0]
  }

}
 800256a:	bf00      	nop
 800256c:	37b0      	adds	r7, #176	@ 0xb0
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	2000a514 	.word	0x2000a514
 8002578:	2000a510 	.word	0x2000a510
 800257c:	40021000 	.word	0x40021000
 8002580:	48001000 	.word	0x48001000

08002584 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b0ac      	sub	sp, #176	@ 0xb0
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	2288      	movs	r2, #136	@ 0x88
 80025a2:	2100      	movs	r1, #0
 80025a4:	4618      	mov	r0, r3
 80025a6:	f008 f845 	bl	800a634 <memset>
  if(hi2c->Instance==I2C2)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a21      	ldr	r2, [pc, #132]	@ (8002634 <HAL_I2C_MspInit+0xb0>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d13b      	bne.n	800262c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80025b4:	2380      	movs	r3, #128	@ 0x80
 80025b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80025b8:	2300      	movs	r3, #0
 80025ba:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025bc:	f107 0314 	add.w	r3, r7, #20
 80025c0:	4618      	mov	r0, r3
 80025c2:	f002 ff25 	bl	8005410 <HAL_RCCEx_PeriphCLKConfig>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80025cc:	f7ff f8d4 	bl	8001778 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d0:	4b19      	ldr	r3, [pc, #100]	@ (8002638 <HAL_I2C_MspInit+0xb4>)
 80025d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d4:	4a18      	ldr	r2, [pc, #96]	@ (8002638 <HAL_I2C_MspInit+0xb4>)
 80025d6:	f043 0302 	orr.w	r3, r3, #2
 80025da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025dc:	4b16      	ldr	r3, [pc, #88]	@ (8002638 <HAL_I2C_MspInit+0xb4>)
 80025de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80025e8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80025ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025f0:	2312      	movs	r3, #18
 80025f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025f6:	2301      	movs	r3, #1
 80025f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fc:	2303      	movs	r3, #3
 80025fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002602:	2304      	movs	r3, #4
 8002604:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002608:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800260c:	4619      	mov	r1, r3
 800260e:	480b      	ldr	r0, [pc, #44]	@ (800263c <HAL_I2C_MspInit+0xb8>)
 8002610:	f001 fb66 	bl	8003ce0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002614:	4b08      	ldr	r3, [pc, #32]	@ (8002638 <HAL_I2C_MspInit+0xb4>)
 8002616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002618:	4a07      	ldr	r2, [pc, #28]	@ (8002638 <HAL_I2C_MspInit+0xb4>)
 800261a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800261e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002620:	4b05      	ldr	r3, [pc, #20]	@ (8002638 <HAL_I2C_MspInit+0xb4>)
 8002622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002624:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800262c:	bf00      	nop
 800262e:	37b0      	adds	r7, #176	@ 0xb0
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40005800 	.word	0x40005800
 8002638:	40021000 	.word	0x40021000
 800263c:	48000400 	.word	0x48000400

08002640 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08a      	sub	sp, #40	@ 0x28
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a17      	ldr	r2, [pc, #92]	@ (80026bc <HAL_QSPI_MspInit+0x7c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d128      	bne.n	80026b4 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002662:	4b17      	ldr	r3, [pc, #92]	@ (80026c0 <HAL_QSPI_MspInit+0x80>)
 8002664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002666:	4a16      	ldr	r2, [pc, #88]	@ (80026c0 <HAL_QSPI_MspInit+0x80>)
 8002668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800266c:	6513      	str	r3, [r2, #80]	@ 0x50
 800266e:	4b14      	ldr	r3, [pc, #80]	@ (80026c0 <HAL_QSPI_MspInit+0x80>)
 8002670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002676:	613b      	str	r3, [r7, #16]
 8002678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800267a:	4b11      	ldr	r3, [pc, #68]	@ (80026c0 <HAL_QSPI_MspInit+0x80>)
 800267c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800267e:	4a10      	ldr	r2, [pc, #64]	@ (80026c0 <HAL_QSPI_MspInit+0x80>)
 8002680:	f043 0310 	orr.w	r3, r3, #16
 8002684:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002686:	4b0e      	ldr	r3, [pc, #56]	@ (80026c0 <HAL_QSPI_MspInit+0x80>)
 8002688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8002692:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8002696:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002698:	2302      	movs	r3, #2
 800269a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a0:	2303      	movs	r3, #3
 80026a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80026a4:	230a      	movs	r3, #10
 80026a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026a8:	f107 0314 	add.w	r3, r7, #20
 80026ac:	4619      	mov	r1, r3
 80026ae:	4805      	ldr	r0, [pc, #20]	@ (80026c4 <HAL_QSPI_MspInit+0x84>)
 80026b0:	f001 fb16 	bl	8003ce0 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80026b4:	bf00      	nop
 80026b6:	3728      	adds	r7, #40	@ 0x28
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	a0001000 	.word	0xa0001000
 80026c0:	40021000 	.word	0x40021000
 80026c4:	48001000 	.word	0x48001000

080026c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08a      	sub	sp, #40	@ 0x28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d0:	f107 0314 	add.w	r3, r7, #20
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a17      	ldr	r2, [pc, #92]	@ (8002744 <HAL_SPI_MspInit+0x7c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d128      	bne.n	800273c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80026ea:	4b17      	ldr	r3, [pc, #92]	@ (8002748 <HAL_SPI_MspInit+0x80>)
 80026ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ee:	4a16      	ldr	r2, [pc, #88]	@ (8002748 <HAL_SPI_MspInit+0x80>)
 80026f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80026f6:	4b14      	ldr	r3, [pc, #80]	@ (8002748 <HAL_SPI_MspInit+0x80>)
 80026f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002702:	4b11      	ldr	r3, [pc, #68]	@ (8002748 <HAL_SPI_MspInit+0x80>)
 8002704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002706:	4a10      	ldr	r2, [pc, #64]	@ (8002748 <HAL_SPI_MspInit+0x80>)
 8002708:	f043 0304 	orr.w	r3, r3, #4
 800270c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800270e:	4b0e      	ldr	r3, [pc, #56]	@ (8002748 <HAL_SPI_MspInit+0x80>)
 8002710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800271a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800271e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002720:	2302      	movs	r3, #2
 8002722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002728:	2303      	movs	r3, #3
 800272a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800272c:	2306      	movs	r3, #6
 800272e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002730:	f107 0314 	add.w	r3, r7, #20
 8002734:	4619      	mov	r1, r3
 8002736:	4805      	ldr	r0, [pc, #20]	@ (800274c <HAL_SPI_MspInit+0x84>)
 8002738:	f001 fad2 	bl	8003ce0 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 800273c:	bf00      	nop
 800273e:	3728      	adds	r7, #40	@ 0x28
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40003c00 	.word	0x40003c00
 8002748:	40021000 	.word	0x40021000
 800274c:	48000800 	.word	0x48000800

08002750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b0ae      	sub	sp, #184	@ 0xb8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002768:	f107 031c 	add.w	r3, r7, #28
 800276c:	2288      	movs	r2, #136	@ 0x88
 800276e:	2100      	movs	r1, #0
 8002770:	4618      	mov	r0, r3
 8002772:	f007 ff5f 	bl	800a634 <memset>
  if(huart->Instance==USART1)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a42      	ldr	r2, [pc, #264]	@ (8002884 <HAL_UART_MspInit+0x134>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d13b      	bne.n	80027f8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002780:	2301      	movs	r3, #1
 8002782:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002784:	2300      	movs	r3, #0
 8002786:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002788:	f107 031c 	add.w	r3, r7, #28
 800278c:	4618      	mov	r0, r3
 800278e:	f002 fe3f 	bl	8005410 <HAL_RCCEx_PeriphCLKConfig>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002798:	f7fe ffee 	bl	8001778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800279c:	4b3a      	ldr	r3, [pc, #232]	@ (8002888 <HAL_UART_MspInit+0x138>)
 800279e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a0:	4a39      	ldr	r2, [pc, #228]	@ (8002888 <HAL_UART_MspInit+0x138>)
 80027a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80027a8:	4b37      	ldr	r3, [pc, #220]	@ (8002888 <HAL_UART_MspInit+0x138>)
 80027aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027b0:	61bb      	str	r3, [r7, #24]
 80027b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b4:	4b34      	ldr	r3, [pc, #208]	@ (8002888 <HAL_UART_MspInit+0x138>)
 80027b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b8:	4a33      	ldr	r2, [pc, #204]	@ (8002888 <HAL_UART_MspInit+0x138>)
 80027ba:	f043 0302 	orr.w	r3, r3, #2
 80027be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027c0:	4b31      	ldr	r3, [pc, #196]	@ (8002888 <HAL_UART_MspInit+0x138>)
 80027c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80027cc:	23c0      	movs	r3, #192	@ 0xc0
 80027ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d2:	2302      	movs	r3, #2
 80027d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027de:	2303      	movs	r3, #3
 80027e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027e4:	2307      	movs	r3, #7
 80027e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ea:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80027ee:	4619      	mov	r1, r3
 80027f0:	4826      	ldr	r0, [pc, #152]	@ (800288c <HAL_UART_MspInit+0x13c>)
 80027f2:	f001 fa75 	bl	8003ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80027f6:	e040      	b.n	800287a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a24      	ldr	r2, [pc, #144]	@ (8002890 <HAL_UART_MspInit+0x140>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d13b      	bne.n	800287a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002802:	2304      	movs	r3, #4
 8002804:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002806:	2300      	movs	r3, #0
 8002808:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800280a:	f107 031c 	add.w	r3, r7, #28
 800280e:	4618      	mov	r0, r3
 8002810:	f002 fdfe 	bl	8005410 <HAL_RCCEx_PeriphCLKConfig>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_UART_MspInit+0xce>
      Error_Handler();
 800281a:	f7fe ffad 	bl	8001778 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800281e:	4b1a      	ldr	r3, [pc, #104]	@ (8002888 <HAL_UART_MspInit+0x138>)
 8002820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002822:	4a19      	ldr	r2, [pc, #100]	@ (8002888 <HAL_UART_MspInit+0x138>)
 8002824:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002828:	6593      	str	r3, [r2, #88]	@ 0x58
 800282a:	4b17      	ldr	r3, [pc, #92]	@ (8002888 <HAL_UART_MspInit+0x138>)
 800282c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800282e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002836:	4b14      	ldr	r3, [pc, #80]	@ (8002888 <HAL_UART_MspInit+0x138>)
 8002838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800283a:	4a13      	ldr	r2, [pc, #76]	@ (8002888 <HAL_UART_MspInit+0x138>)
 800283c:	f043 0308 	orr.w	r3, r3, #8
 8002840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002842:	4b11      	ldr	r3, [pc, #68]	@ (8002888 <HAL_UART_MspInit+0x138>)
 8002844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800284e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002852:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002856:	2302      	movs	r3, #2
 8002858:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	2300      	movs	r3, #0
 800285e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002862:	2303      	movs	r3, #3
 8002864:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002868:	2307      	movs	r3, #7
 800286a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800286e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002872:	4619      	mov	r1, r3
 8002874:	4807      	ldr	r0, [pc, #28]	@ (8002894 <HAL_UART_MspInit+0x144>)
 8002876:	f001 fa33 	bl	8003ce0 <HAL_GPIO_Init>
}
 800287a:	bf00      	nop
 800287c:	37b8      	adds	r7, #184	@ 0xb8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40013800 	.word	0x40013800
 8002888:	40021000 	.word	0x40021000
 800288c:	48000400 	.word	0x48000400
 8002890:	40004800 	.word	0x40004800
 8002894:	48000c00 	.word	0x48000c00

08002898 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b0ac      	sub	sp, #176	@ 0xb0
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	60da      	str	r2, [r3, #12]
 80028ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	2288      	movs	r2, #136	@ 0x88
 80028b6:	2100      	movs	r1, #0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f007 febb 	bl	800a634 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028c6:	d17c      	bne.n	80029c2 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80028c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028cc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80028ce:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80028d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80028d6:	2301      	movs	r3, #1
 80028d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80028da:	2301      	movs	r3, #1
 80028dc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80028de:	2318      	movs	r3, #24
 80028e0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80028e2:	2307      	movs	r3, #7
 80028e4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80028e6:	2302      	movs	r3, #2
 80028e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80028ea:	2302      	movs	r3, #2
 80028ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80028ee:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80028f2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028f4:	f107 0314 	add.w	r3, r7, #20
 80028f8:	4618      	mov	r0, r3
 80028fa:	f002 fd89 	bl	8005410 <HAL_RCCEx_PeriphCLKConfig>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8002904:	f7fe ff38 	bl	8001778 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002908:	4b30      	ldr	r3, [pc, #192]	@ (80029cc <HAL_PCD_MspInit+0x134>)
 800290a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800290c:	4a2f      	ldr	r2, [pc, #188]	@ (80029cc <HAL_PCD_MspInit+0x134>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002914:	4b2d      	ldr	r3, [pc, #180]	@ (80029cc <HAL_PCD_MspInit+0x134>)
 8002916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002920:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002924:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002928:	2300      	movs	r3, #0
 800292a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002934:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002938:	4619      	mov	r1, r3
 800293a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800293e:	f001 f9cf 	bl	8003ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002942:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002946:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294a:	2302      	movs	r3, #2
 800294c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002956:	2303      	movs	r3, #3
 8002958:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800295c:	230a      	movs	r3, #10
 800295e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002962:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002966:	4619      	mov	r1, r3
 8002968:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800296c:	f001 f9b8 	bl	8003ce0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002970:	4b16      	ldr	r3, [pc, #88]	@ (80029cc <HAL_PCD_MspInit+0x134>)
 8002972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002974:	4a15      	ldr	r2, [pc, #84]	@ (80029cc <HAL_PCD_MspInit+0x134>)
 8002976:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800297a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800297c:	4b13      	ldr	r3, [pc, #76]	@ (80029cc <HAL_PCD_MspInit+0x134>)
 800297e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002980:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002988:	4b10      	ldr	r3, [pc, #64]	@ (80029cc <HAL_PCD_MspInit+0x134>)
 800298a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d114      	bne.n	80029be <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002994:	4b0d      	ldr	r3, [pc, #52]	@ (80029cc <HAL_PCD_MspInit+0x134>)
 8002996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002998:	4a0c      	ldr	r2, [pc, #48]	@ (80029cc <HAL_PCD_MspInit+0x134>)
 800299a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800299e:	6593      	str	r3, [r2, #88]	@ 0x58
 80029a0:	4b0a      	ldr	r3, [pc, #40]	@ (80029cc <HAL_PCD_MspInit+0x134>)
 80029a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80029ac:	f001 fe64 	bl	8004678 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b0:	4b06      	ldr	r3, [pc, #24]	@ (80029cc <HAL_PCD_MspInit+0x134>)
 80029b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b4:	4a05      	ldr	r2, [pc, #20]	@ (80029cc <HAL_PCD_MspInit+0x134>)
 80029b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029ba:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80029bc:	e001      	b.n	80029c2 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80029be:	f001 fe5b 	bl	8004678 <HAL_PWREx_EnableVddUSB>
}
 80029c2:	bf00      	nop
 80029c4:	37b0      	adds	r7, #176	@ 0xb0
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40021000 	.word	0x40021000

080029d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029d4:	bf00      	nop
 80029d6:	e7fd      	b.n	80029d4 <NMI_Handler+0x4>

080029d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029dc:	bf00      	nop
 80029de:	e7fd      	b.n	80029dc <HardFault_Handler+0x4>

080029e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029e4:	bf00      	nop
 80029e6:	e7fd      	b.n	80029e4 <MemManage_Handler+0x4>

080029e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029ec:	bf00      	nop
 80029ee:	e7fd      	b.n	80029ec <BusFault_Handler+0x4>

080029f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029f4:	bf00      	nop
 80029f6:	e7fd      	b.n	80029f4 <UsageFault_Handler+0x4>

080029f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a0a:	f000 fadf 	bl	8002fcc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002a0e:	f005 fffd 	bl	8008a0c <xTaskGetSchedulerState>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d001      	beq.n	8002a1c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002a18:	f006 fdf6 	bl	8009608 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a1c:	bf00      	nop
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8002a24:	4802      	ldr	r0, [pc, #8]	@ (8002a30 <DMA1_Channel4_IRQHandler+0x10>)
 8002a26:	f001 f87b 	bl	8003b20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	200002a8 	.word	0x200002a8

08002a34 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002a38:	2020      	movs	r0, #32
 8002a3a:	f001 fb2b 	bl	8004094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8002a3e:	2040      	movs	r0, #64	@ 0x40
 8002a40:	f001 fb28 	bl	8004094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002a44:	2080      	movs	r0, #128	@ 0x80
 8002a46:	f001 fb25 	bl	8004094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002a4a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002a4e:	f001 fb21 	bl	8004094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8002a5a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002a5e:	f001 fb19 	bl	8004094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002a62:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002a66:	f001 fb15 	bl	8004094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8002a6a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002a6e:	f001 fb11 	bl	8004094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002a72:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002a76:	f001 fb0d 	bl	8004094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002a7a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002a7e:	f001 fb09 	bl	8004094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002a88:	b590      	push	{r4, r7, lr}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
		 buf[i] = (RecBuf[i] >> 16) % 256;
		 //avg += RecBuf[i] / (AUDIO_REC / 2);
	 }*/
	 //UART_Printf("%d\r\n", RecBuf[i] >> 16);
	 //UART_Printf("%d\r\n", avg >> 20);
	if (psola_reset_flag == 0) {
 8002a90:	4b37      	ldr	r3, [pc, #220]	@ (8002b70 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xe8>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d105      	bne.n	8002aa6 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1e>
		PSOLA_feed(AUDIO_REC / 2, RecBuf);
 8002a9a:	4936      	ldr	r1, [pc, #216]	@ (8002b74 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xec>)
 8002a9c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002aa0:	f7fe fe88 	bl	80017b4 <PSOLA_feed>
		mode = (mode+1)%num_modes;
		psola_reset_flag = 0;
	}
	//UART_Printf("%d\r\n", RecBuf[0] >> 16);
	//UART_Printf("----\n");
}
 8002aa4:	e05c      	b.n	8002b60 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xd8>
	} else if (psola_reset_flag == 1) {
 8002aa6:	4b32      	ldr	r3, [pc, #200]	@ (8002b70 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xe8>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d157      	bne.n	8002b60 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xd8>
		psola_reset_flag = 2;
 8002ab0:	4b2f      	ldr	r3, [pc, #188]	@ (8002b70 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xe8>)
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	701a      	strb	r2, [r3, #0]
		PSOLA_init(pow(2.0f, change_factors[mode][0]/12.0f), pow(2.0f, change_factors[mode][1]/12.0f));
 8002ab6:	4b30      	ldr	r3, [pc, #192]	@ (8002b78 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xf0>)
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	4a2f      	ldr	r2, [pc, #188]	@ (8002b7c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xf4>)
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	edd3 7a00 	vldr	s15, [r3]
 8002ac6:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8002aca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ace:	ee16 0a90 	vmov	r0, s13
 8002ad2:	f7fd fd39 	bl	8000548 <__aeabi_f2d>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	ec43 2b11 	vmov	d1, r2, r3
 8002ade:	ed9f 0b22 	vldr	d0, [pc, #136]	@ 8002b68 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xe0>
 8002ae2:	f009 fe6f 	bl	800c7c4 <pow>
 8002ae6:	ec53 2b10 	vmov	r2, r3, d0
 8002aea:	4610      	mov	r0, r2
 8002aec:	4619      	mov	r1, r3
 8002aee:	f7fe f85b 	bl	8000ba8 <__aeabi_d2f>
 8002af2:	4604      	mov	r4, r0
 8002af4:	4b20      	ldr	r3, [pc, #128]	@ (8002b78 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xf0>)
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	4a20      	ldr	r2, [pc, #128]	@ (8002b7c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xf4>)
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	4413      	add	r3, r2
 8002b00:	3304      	adds	r3, #4
 8002b02:	edd3 7a00 	vldr	s15, [r3]
 8002b06:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8002b0a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002b0e:	ee16 0a90 	vmov	r0, s13
 8002b12:	f7fd fd19 	bl	8000548 <__aeabi_f2d>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	ec43 2b11 	vmov	d1, r2, r3
 8002b1e:	ed9f 0b12 	vldr	d0, [pc, #72]	@ 8002b68 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xe0>
 8002b22:	f009 fe4f 	bl	800c7c4 <pow>
 8002b26:	ec53 2b10 	vmov	r2, r3, d0
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f7fe f83b 	bl	8000ba8 <__aeabi_d2f>
 8002b32:	4603      	mov	r3, r0
 8002b34:	ee00 3a90 	vmov	s1, r3
 8002b38:	ee00 4a10 	vmov	s0, r4
 8002b3c:	f7fe fe22 	bl	8001784 <PSOLA_init>
		mode = (mode+1)%num_modes;
 8002b40:	4b0d      	ldr	r3, [pc, #52]	@ (8002b78 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xf0>)
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	3301      	adds	r3, #1
 8002b48:	2202      	movs	r2, #2
 8002b4a:	fb93 f1f2 	sdiv	r1, r3, r2
 8002b4e:	fb01 f202 	mul.w	r2, r1, r2
 8002b52:	1a9b      	subs	r3, r3, r2
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	4b08      	ldr	r3, [pc, #32]	@ (8002b78 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xf0>)
 8002b58:	801a      	strh	r2, [r3, #0]
		psola_reset_flag = 0;
 8002b5a:	4b05      	ldr	r3, [pc, #20]	@ (8002b70 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xe8>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	701a      	strb	r2, [r3, #0]
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd90      	pop	{r4, r7, pc}
 8002b68:	00000000 	.word	0x00000000
 8002b6c:	40000000 	.word	0x40000000
 8002b70:	20000010 	.word	0x20000010
 8002b74:	200009e4 	.word	0x200009e4
 8002b78:	2000a518 	.word	0x2000a518
 8002b7c:	0800d6f0 	.word	0x0800d6f0

08002b80 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002b80:	b590      	push	{r4, r7, lr}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
		 buf[i] = (RecBuf[i] >> 16) % 256;
		 //avg += RecBuf[i] / (AUDIO_REC / 2);
	 }*/
	//HAL_UART_Transmit(&huart1, start_marker, 4, 1000);
	//HAL_UART_Transmit(&huart1, start_marker, 4, 1000);
	if (psola_reset_flag == 0) {
 8002b88:	4b39      	ldr	r3, [pc, #228]	@ (8002c70 <HAL_DFSDM_FilterRegConvCpltCallback+0xf0>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d106      	bne.n	8002ba0 <HAL_DFSDM_FilterRegConvCpltCallback+0x20>
		PSOLA_feed(AUDIO_REC / 2, RecBuf + AUDIO_REC / 2);
 8002b92:	4b38      	ldr	r3, [pc, #224]	@ (8002c74 <HAL_DFSDM_FilterRegConvCpltCallback+0xf4>)
 8002b94:	4619      	mov	r1, r3
 8002b96:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002b9a:	f7fe fe0b 	bl	80017b4 <PSOLA_feed>
		mode = (mode+1)%num_modes;
		psola_reset_flag = 0;
	}
	//HAL_UART_Transmit(&huart1, start_marker, 4, 1000);
	//HAL_UART_Transmit(&huart1, (uint8_t*)&(RecBuf[AUDIO_REC / 2]), AUDIO_REC * 2 / 2, 1000);
}
 8002b9e:	e05c      	b.n	8002c5a <HAL_DFSDM_FilterRegConvCpltCallback+0xda>
	} else if (psola_reset_flag == 1) {
 8002ba0:	4b33      	ldr	r3, [pc, #204]	@ (8002c70 <HAL_DFSDM_FilterRegConvCpltCallback+0xf0>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d157      	bne.n	8002c5a <HAL_DFSDM_FilterRegConvCpltCallback+0xda>
		psola_reset_flag = 2;
 8002baa:	4b31      	ldr	r3, [pc, #196]	@ (8002c70 <HAL_DFSDM_FilterRegConvCpltCallback+0xf0>)
 8002bac:	2202      	movs	r2, #2
 8002bae:	701a      	strb	r2, [r3, #0]
		PSOLA_init(pow(2.0f, change_factors[mode][0]/12.0f), pow(2.0f, change_factors[mode][1]/12.0f));
 8002bb0:	4b31      	ldr	r3, [pc, #196]	@ (8002c78 <HAL_DFSDM_FilterRegConvCpltCallback+0xf8>)
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	4a31      	ldr	r2, [pc, #196]	@ (8002c7c <HAL_DFSDM_FilterRegConvCpltCallback+0xfc>)
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	4413      	add	r3, r2
 8002bbc:	edd3 7a00 	vldr	s15, [r3]
 8002bc0:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8002bc4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002bc8:	ee16 0a90 	vmov	r0, s13
 8002bcc:	f7fd fcbc 	bl	8000548 <__aeabi_f2d>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	ec43 2b11 	vmov	d1, r2, r3
 8002bd8:	ed9f 0b23 	vldr	d0, [pc, #140]	@ 8002c68 <HAL_DFSDM_FilterRegConvCpltCallback+0xe8>
 8002bdc:	f009 fdf2 	bl	800c7c4 <pow>
 8002be0:	ec53 2b10 	vmov	r2, r3, d0
 8002be4:	4610      	mov	r0, r2
 8002be6:	4619      	mov	r1, r3
 8002be8:	f7fd ffde 	bl	8000ba8 <__aeabi_d2f>
 8002bec:	4604      	mov	r4, r0
 8002bee:	4b22      	ldr	r3, [pc, #136]	@ (8002c78 <HAL_DFSDM_FilterRegConvCpltCallback+0xf8>)
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	4a21      	ldr	r2, [pc, #132]	@ (8002c7c <HAL_DFSDM_FilterRegConvCpltCallback+0xfc>)
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	edd3 7a00 	vldr	s15, [r3]
 8002c00:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8002c04:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c08:	ee16 0a90 	vmov	r0, s13
 8002c0c:	f7fd fc9c 	bl	8000548 <__aeabi_f2d>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	ec43 2b11 	vmov	d1, r2, r3
 8002c18:	ed9f 0b13 	vldr	d0, [pc, #76]	@ 8002c68 <HAL_DFSDM_FilterRegConvCpltCallback+0xe8>
 8002c1c:	f009 fdd2 	bl	800c7c4 <pow>
 8002c20:	ec53 2b10 	vmov	r2, r3, d0
 8002c24:	4610      	mov	r0, r2
 8002c26:	4619      	mov	r1, r3
 8002c28:	f7fd ffbe 	bl	8000ba8 <__aeabi_d2f>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	ee00 3a90 	vmov	s1, r3
 8002c32:	ee00 4a10 	vmov	s0, r4
 8002c36:	f7fe fda5 	bl	8001784 <PSOLA_init>
		mode = (mode+1)%num_modes;
 8002c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c78 <HAL_DFSDM_FilterRegConvCpltCallback+0xf8>)
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3301      	adds	r3, #1
 8002c42:	2202      	movs	r2, #2
 8002c44:	fb93 f1f2 	sdiv	r1, r3, r2
 8002c48:	fb01 f202 	mul.w	r2, r1, r2
 8002c4c:	1a9b      	subs	r3, r3, r2
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	4b09      	ldr	r3, [pc, #36]	@ (8002c78 <HAL_DFSDM_FilterRegConvCpltCallback+0xf8>)
 8002c52:	801a      	strh	r2, [r3, #0]
		psola_reset_flag = 0;
 8002c54:	4b06      	ldr	r3, [pc, #24]	@ (8002c70 <HAL_DFSDM_FilterRegConvCpltCallback+0xf0>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	701a      	strb	r2, [r3, #0]
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd90      	pop	{r4, r7, pc}
 8002c62:	bf00      	nop
 8002c64:	f3af 8000 	nop.w
 8002c68:	00000000 	.word	0x00000000
 8002c6c:	40000000 	.word	0x40000000
 8002c70:	20000010 	.word	0x20000010
 8002c74:	200011e4 	.word	0x200011e4
 8002c78:	2000a518 	.word	0x2000a518
 8002c7c:	0800d6f0 	.word	0x0800d6f0

08002c80 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 8002c8a:	88fb      	ldrh	r3, [r7, #6]
 8002c8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c90:	d10b      	bne.n	8002caa <HAL_GPIO_EXTI_Callback+0x2a>
	  {
		case GPIO_PIN_13:
		  if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) //button press
 8002c92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c96:	4808      	ldr	r0, [pc, #32]	@ (8002cb8 <HAL_GPIO_EXTI_Callback+0x38>)
 8002c98:	f001 f9cc 	bl	8004034 <HAL_GPIO_ReadPin>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d105      	bne.n	8002cae <HAL_GPIO_EXTI_Callback+0x2e>
		  {
			  psola_reset_flag = 1;
 8002ca2:	4b06      	ldr	r3, [pc, #24]	@ (8002cbc <HAL_GPIO_EXTI_Callback+0x3c>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]
		  }
		break;
 8002ca8:	e001      	b.n	8002cae <HAL_GPIO_EXTI_Callback+0x2e>
		default:
		break;
 8002caa:	bf00      	nop
 8002cac:	e000      	b.n	8002cb0 <HAL_GPIO_EXTI_Callback+0x30>
		break;
 8002cae:	bf00      	nop
	  }
}
 8002cb0:	bf00      	nop
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	48000800 	.word	0x48000800
 8002cbc:	20000010 	.word	0x20000010

08002cc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return 1;
 8002cc4:	2301      	movs	r3, #1
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <_kill>:

int _kill(int pid, int sig)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cda:	f007 fcfd 	bl	800a6d8 <__errno>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2216      	movs	r2, #22
 8002ce2:	601a      	str	r2, [r3, #0]
  return -1;
 8002ce4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <_exit>:

void _exit (int status)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f7ff ffe7 	bl	8002cd0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d02:	bf00      	nop
 8002d04:	e7fd      	b.n	8002d02 <_exit+0x12>

08002d06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b086      	sub	sp, #24
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	e00a      	b.n	8002d2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d18:	f3af 8000 	nop.w
 8002d1c:	4601      	mov	r1, r0
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	60ba      	str	r2, [r7, #8]
 8002d24:	b2ca      	uxtb	r2, r1
 8002d26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	dbf0      	blt.n	8002d18 <_read+0x12>
  }

  return len;
 8002d36:	687b      	ldr	r3, [r7, #4]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	e009      	b.n	8002d66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	60ba      	str	r2, [r7, #8]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	3301      	adds	r3, #1
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	dbf1      	blt.n	8002d52 <_write+0x12>
  }
  return len;
 8002d6e:	687b      	ldr	r3, [r7, #4]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <_close>:

int _close(int file)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002da0:	605a      	str	r2, [r3, #4]
  return 0;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <_isatty>:

int _isatty(int file)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002db8:	2301      	movs	r3, #1
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b085      	sub	sp, #20
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002de8:	4a14      	ldr	r2, [pc, #80]	@ (8002e3c <_sbrk+0x5c>)
 8002dea:	4b15      	ldr	r3, [pc, #84]	@ (8002e40 <_sbrk+0x60>)
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002df4:	4b13      	ldr	r3, [pc, #76]	@ (8002e44 <_sbrk+0x64>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d102      	bne.n	8002e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dfc:	4b11      	ldr	r3, [pc, #68]	@ (8002e44 <_sbrk+0x64>)
 8002dfe:	4a12      	ldr	r2, [pc, #72]	@ (8002e48 <_sbrk+0x68>)
 8002e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e02:	4b10      	ldr	r3, [pc, #64]	@ (8002e44 <_sbrk+0x64>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d207      	bcs.n	8002e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e10:	f007 fc62 	bl	800a6d8 <__errno>
 8002e14:	4603      	mov	r3, r0
 8002e16:	220c      	movs	r2, #12
 8002e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e1e:	e009      	b.n	8002e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e20:	4b08      	ldr	r3, [pc, #32]	@ (8002e44 <_sbrk+0x64>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e26:	4b07      	ldr	r3, [pc, #28]	@ (8002e44 <_sbrk+0x64>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	4a05      	ldr	r2, [pc, #20]	@ (8002e44 <_sbrk+0x64>)
 8002e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e32:	68fb      	ldr	r3, [r7, #12]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	20018000 	.word	0x20018000
 8002e40:	00000400 	.word	0x00000400
 8002e44:	2000a51c 	.word	0x2000a51c
 8002e48:	2000bfa0 	.word	0x2000bfa0

08002e4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002e50:	4b06      	ldr	r3, [pc, #24]	@ (8002e6c <SystemInit+0x20>)
 8002e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e56:	4a05      	ldr	r2, [pc, #20]	@ (8002e6c <SystemInit+0x20>)
 8002e58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	e000ed00 	.word	0xe000ed00

08002e70 <UART_Printf>:

#define DEBUG_UART 1
/* Define END */


void UART_Printf(const char* fmt, ...) {
 8002e70:	b40f      	push	{r0, r1, r2, r3}
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b0c2      	sub	sp, #264	@ 0x108
 8002e76:	af00      	add	r7, sp, #0
    char buff[256];
    va_list args;
    va_start(args, fmt);
 8002e78:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8002e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002e80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002e84:	601a      	str	r2, [r3, #0]
    vsnprintf(buff, sizeof(buff), fmt, args);
 8002e86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002e8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002e8e:	f107 0008 	add.w	r0, r7, #8
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8002e98:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e9c:	f007 fbbc 	bl	800a618 <vsniprintf>
    HAL_UART_Transmit(&UART_COM, (uint8_t*)buff, strlen(buff), UART_MAXDELAY);
 8002ea0:	f107 0308 	add.w	r3, r7, #8
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fd f9e3 	bl	8000270 <strlen>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	f107 0108 	add.w	r1, r7, #8
 8002eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002eb6:	4805      	ldr	r0, [pc, #20]	@ (8002ecc <UART_Printf+0x5c>)
 8002eb8:	f003 f867 	bl	8005f8a <HAL_UART_Transmit>
    va_end(args);
}
 8002ebc:	bf00      	nop
 8002ebe:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ec8:	b004      	add	sp, #16
 8002eca:	4770      	bx	lr
 8002ecc:	200003ec 	.word	0x200003ec

08002ed0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002ed0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ed4:	f7ff ffba 	bl	8002e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ed8:	480c      	ldr	r0, [pc, #48]	@ (8002f0c <LoopForever+0x6>)
  ldr r1, =_edata
 8002eda:	490d      	ldr	r1, [pc, #52]	@ (8002f10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002edc:	4a0d      	ldr	r2, [pc, #52]	@ (8002f14 <LoopForever+0xe>)
  movs r3, #0
 8002ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ee0:	e002      	b.n	8002ee8 <LoopCopyDataInit>

08002ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ee6:	3304      	adds	r3, #4

08002ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002eec:	d3f9      	bcc.n	8002ee2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eee:	4a0a      	ldr	r2, [pc, #40]	@ (8002f18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ef0:	4c0a      	ldr	r4, [pc, #40]	@ (8002f1c <LoopForever+0x16>)
  movs r3, #0
 8002ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ef4:	e001      	b.n	8002efa <LoopFillZerobss>

08002ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ef8:	3204      	adds	r2, #4

08002efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002efc:	d3fb      	bcc.n	8002ef6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002efe:	f007 fbf1 	bl	800a6e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f02:	f7fe f819 	bl	8000f38 <main>

08002f06 <LoopForever>:

LoopForever:
    b LoopForever
 8002f06:	e7fe      	b.n	8002f06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002f08:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f10:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8002f14:	0800daf8 	.word	0x0800daf8
  ldr r2, =_sbss
 8002f18:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8002f1c:	2000bf9c 	.word	0x2000bf9c

08002f20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f20:	e7fe      	b.n	8002f20 <ADC1_2_IRQHandler>

08002f22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f2c:	2003      	movs	r0, #3
 8002f2e:	f000 f961 	bl	80031f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f32:	200f      	movs	r0, #15
 8002f34:	f000 f80e 	bl	8002f54 <HAL_InitTick>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	71fb      	strb	r3, [r7, #7]
 8002f42:	e001      	b.n	8002f48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f44:	f7ff f9da 	bl	80022fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f48:	79fb      	ldrb	r3, [r7, #7]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002f60:	4b17      	ldr	r3, [pc, #92]	@ (8002fc0 <HAL_InitTick+0x6c>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d023      	beq.n	8002fb0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002f68:	4b16      	ldr	r3, [pc, #88]	@ (8002fc4 <HAL_InitTick+0x70>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4b14      	ldr	r3, [pc, #80]	@ (8002fc0 <HAL_InitTick+0x6c>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	4619      	mov	r1, r3
 8002f72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 f96d 	bl	800325e <HAL_SYSTICK_Config>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10f      	bne.n	8002faa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b0f      	cmp	r3, #15
 8002f8e:	d809      	bhi.n	8002fa4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f90:	2200      	movs	r2, #0
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	f04f 30ff 	mov.w	r0, #4294967295
 8002f98:	f000 f937 	bl	800320a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc8 <HAL_InitTick+0x74>)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	e007      	b.n	8002fb4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
 8002fa8:	e004      	b.n	8002fb4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	73fb      	strb	r3, [r7, #15]
 8002fae:	e001      	b.n	8002fb4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	2000001c 	.word	0x2000001c
 8002fc4:	20000014 	.word	0x20000014
 8002fc8:	20000018 	.word	0x20000018

08002fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fd0:	4b06      	ldr	r3, [pc, #24]	@ (8002fec <HAL_IncTick+0x20>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4b06      	ldr	r3, [pc, #24]	@ (8002ff0 <HAL_IncTick+0x24>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4413      	add	r3, r2
 8002fdc:	4a04      	ldr	r2, [pc, #16]	@ (8002ff0 <HAL_IncTick+0x24>)
 8002fde:	6013      	str	r3, [r2, #0]
}
 8002fe0:	bf00      	nop
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	2000001c 	.word	0x2000001c
 8002ff0:	2000a520 	.word	0x2000a520

08002ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ff8:	4b03      	ldr	r3, [pc, #12]	@ (8003008 <HAL_GetTick+0x14>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	2000a520 	.word	0x2000a520

0800300c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003014:	f7ff ffee 	bl	8002ff4 <HAL_GetTick>
 8003018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003024:	d005      	beq.n	8003032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003026:	4b0a      	ldr	r3, [pc, #40]	@ (8003050 <HAL_Delay+0x44>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4413      	add	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003032:	bf00      	nop
 8003034:	f7ff ffde 	bl	8002ff4 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	429a      	cmp	r2, r3
 8003042:	d8f7      	bhi.n	8003034 <HAL_Delay+0x28>
  {
  }
}
 8003044:	bf00      	nop
 8003046:	bf00      	nop
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	2000001c 	.word	0x2000001c

08003054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003064:	4b0c      	ldr	r3, [pc, #48]	@ (8003098 <__NVIC_SetPriorityGrouping+0x44>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003070:	4013      	ands	r3, r2
 8003072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800307c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003080:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003086:	4a04      	ldr	r2, [pc, #16]	@ (8003098 <__NVIC_SetPriorityGrouping+0x44>)
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	60d3      	str	r3, [r2, #12]
}
 800308c:	bf00      	nop
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	e000ed00 	.word	0xe000ed00

0800309c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030a0:	4b04      	ldr	r3, [pc, #16]	@ (80030b4 <__NVIC_GetPriorityGrouping+0x18>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	0a1b      	lsrs	r3, r3, #8
 80030a6:	f003 0307 	and.w	r3, r3, #7
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	e000ed00 	.word	0xe000ed00

080030b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	db0b      	blt.n	80030e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	f003 021f 	and.w	r2, r3, #31
 80030d0:	4907      	ldr	r1, [pc, #28]	@ (80030f0 <__NVIC_EnableIRQ+0x38>)
 80030d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d6:	095b      	lsrs	r3, r3, #5
 80030d8:	2001      	movs	r0, #1
 80030da:	fa00 f202 	lsl.w	r2, r0, r2
 80030de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	e000e100 	.word	0xe000e100

080030f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	6039      	str	r1, [r7, #0]
 80030fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003104:	2b00      	cmp	r3, #0
 8003106:	db0a      	blt.n	800311e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	b2da      	uxtb	r2, r3
 800310c:	490c      	ldr	r1, [pc, #48]	@ (8003140 <__NVIC_SetPriority+0x4c>)
 800310e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003112:	0112      	lsls	r2, r2, #4
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	440b      	add	r3, r1
 8003118:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800311c:	e00a      	b.n	8003134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	b2da      	uxtb	r2, r3
 8003122:	4908      	ldr	r1, [pc, #32]	@ (8003144 <__NVIC_SetPriority+0x50>)
 8003124:	79fb      	ldrb	r3, [r7, #7]
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	3b04      	subs	r3, #4
 800312c:	0112      	lsls	r2, r2, #4
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	440b      	add	r3, r1
 8003132:	761a      	strb	r2, [r3, #24]
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	e000e100 	.word	0xe000e100
 8003144:	e000ed00 	.word	0xe000ed00

08003148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003148:	b480      	push	{r7}
 800314a:	b089      	sub	sp, #36	@ 0x24
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f1c3 0307 	rsb	r3, r3, #7
 8003162:	2b04      	cmp	r3, #4
 8003164:	bf28      	it	cs
 8003166:	2304      	movcs	r3, #4
 8003168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	3304      	adds	r3, #4
 800316e:	2b06      	cmp	r3, #6
 8003170:	d902      	bls.n	8003178 <NVIC_EncodePriority+0x30>
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	3b03      	subs	r3, #3
 8003176:	e000      	b.n	800317a <NVIC_EncodePriority+0x32>
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800317c:	f04f 32ff 	mov.w	r2, #4294967295
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	43da      	mvns	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	401a      	ands	r2, r3
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003190:	f04f 31ff 	mov.w	r1, #4294967295
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	fa01 f303 	lsl.w	r3, r1, r3
 800319a:	43d9      	mvns	r1, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a0:	4313      	orrs	r3, r2
         );
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3724      	adds	r7, #36	@ 0x24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
	...

080031b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3b01      	subs	r3, #1
 80031bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031c0:	d301      	bcc.n	80031c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031c2:	2301      	movs	r3, #1
 80031c4:	e00f      	b.n	80031e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031c6:	4a0a      	ldr	r2, [pc, #40]	@ (80031f0 <SysTick_Config+0x40>)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ce:	210f      	movs	r1, #15
 80031d0:	f04f 30ff 	mov.w	r0, #4294967295
 80031d4:	f7ff ff8e 	bl	80030f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031d8:	4b05      	ldr	r3, [pc, #20]	@ (80031f0 <SysTick_Config+0x40>)
 80031da:	2200      	movs	r2, #0
 80031dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031de:	4b04      	ldr	r3, [pc, #16]	@ (80031f0 <SysTick_Config+0x40>)
 80031e0:	2207      	movs	r2, #7
 80031e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	e000e010 	.word	0xe000e010

080031f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7ff ff29 	bl	8003054 <__NVIC_SetPriorityGrouping>
}
 8003202:	bf00      	nop
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b086      	sub	sp, #24
 800320e:	af00      	add	r7, sp, #0
 8003210:	4603      	mov	r3, r0
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	607a      	str	r2, [r7, #4]
 8003216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800321c:	f7ff ff3e 	bl	800309c <__NVIC_GetPriorityGrouping>
 8003220:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	68b9      	ldr	r1, [r7, #8]
 8003226:	6978      	ldr	r0, [r7, #20]
 8003228:	f7ff ff8e 	bl	8003148 <NVIC_EncodePriority>
 800322c:	4602      	mov	r2, r0
 800322e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003232:	4611      	mov	r1, r2
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff ff5d 	bl	80030f4 <__NVIC_SetPriority>
}
 800323a:	bf00      	nop
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b082      	sub	sp, #8
 8003246:	af00      	add	r7, sp, #0
 8003248:	4603      	mov	r3, r0
 800324a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800324c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff ff31 	bl	80030b8 <__NVIC_EnableIRQ>
}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7ff ffa2 	bl	80031b0 <SysTick_Config>
 800326c:	4603      	mov	r3, r0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
	...

08003278 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e0ac      	b.n	80033e4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f000 fa8c 	bl	80037ac <DFSDM_GetChannelFromInstance>
 8003294:	4603      	mov	r3, r0
 8003296:	4a55      	ldr	r2, [pc, #340]	@ (80033ec <HAL_DFSDM_ChannelInit+0x174>)
 8003298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e09f      	b.n	80033e4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff f8fd 	bl	80024a4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80032aa:	4b51      	ldr	r3, [pc, #324]	@ (80033f0 <HAL_DFSDM_ChannelInit+0x178>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	3301      	adds	r3, #1
 80032b0:	4a4f      	ldr	r2, [pc, #316]	@ (80033f0 <HAL_DFSDM_ChannelInit+0x178>)
 80032b2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80032b4:	4b4e      	ldr	r3, [pc, #312]	@ (80033f0 <HAL_DFSDM_ChannelInit+0x178>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d125      	bne.n	8003308 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80032bc:	4b4d      	ldr	r3, [pc, #308]	@ (80033f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a4c      	ldr	r2, [pc, #304]	@ (80033f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80032c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80032c6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80032c8:	4b4a      	ldr	r3, [pc, #296]	@ (80033f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	4948      	ldr	r1, [pc, #288]	@ (80033f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80032d6:	4b47      	ldr	r3, [pc, #284]	@ (80033f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a46      	ldr	r2, [pc, #280]	@ (80033f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80032dc:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80032e0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	791b      	ldrb	r3, [r3, #4]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d108      	bne.n	80032fc <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80032ea:	4b42      	ldr	r3, [pc, #264]	@ (80033f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	041b      	lsls	r3, r3, #16
 80032f6:	493f      	ldr	r1, [pc, #252]	@ (80033f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80032fc:	4b3d      	ldr	r3, [pc, #244]	@ (80033f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a3c      	ldr	r2, [pc, #240]	@ (80033f4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003302:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003306:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8003316:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6819      	ldr	r1, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003326:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800332c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 020f 	bic.w	r2, r2, #15
 8003344:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6819      	ldr	r1, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003354:	431a      	orrs	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 800336c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6899      	ldr	r1, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800337c:	3b01      	subs	r3, #1
 800337e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f002 0207 	and.w	r2, r2, #7
 8003398:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6859      	ldr	r1, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033aa:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80033ac:	431a      	orrs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80033c4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 f9ea 	bl	80037ac <DFSDM_GetChannelFromInstance>
 80033d8:	4602      	mov	r2, r0
 80033da:	4904      	ldr	r1, [pc, #16]	@ (80033ec <HAL_DFSDM_ChannelInit+0x174>)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	2000a528 	.word	0x2000a528
 80033f0:	2000a524 	.word	0x2000a524
 80033f4:	40016000 	.word	0x40016000

080033f8 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e0ca      	b.n	80035a0 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a66      	ldr	r2, [pc, #408]	@ (80035a8 <HAL_DFSDM_FilterInit+0x1b0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d109      	bne.n	8003428 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003418:	2b01      	cmp	r3, #1
 800341a:	d003      	beq.n	8003424 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0bb      	b.n	80035a0 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7fe ff83 	bl	800234c <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 8003454:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	7a1b      	ldrb	r3, [r3, #8]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d108      	bne.n	8003470 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	e007      	b.n	8003480 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 800347e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	7a5b      	ldrb	r3, [r3, #9]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d108      	bne.n	800349a <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	e007      	b.n	80034aa <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80034a8:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	f423 43ce 	bic.w	r3, r3, #26368	@ 0x6700
 80034b8:	f023 0308 	bic.w	r3, r3, #8
 80034bc:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d108      	bne.n	80034d8 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6819      	ldr	r1, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	695a      	ldr	r2, [r3, #20]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	7c1b      	ldrb	r3, [r3, #16]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d108      	bne.n	80034f2 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0210 	orr.w	r2, r2, #16
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	e007      	b.n	8003502 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0210 	bic.w	r2, r2, #16
 8003500:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	7c5b      	ldrb	r3, [r3, #17]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d108      	bne.n	800351c <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 0220 	orr.w	r2, r2, #32
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	e007      	b.n	800352c <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0220 	bic.w	r2, r2, #32
 800352a:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6812      	ldr	r2, [r2, #0]
 8003536:	f023 4363 	bic.w	r3, r3, #3808428032	@ 0xe3000000
 800353a:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 800353e:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6959      	ldr	r1, [r3, #20]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	3b01      	subs	r3, #1
 8003550:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003552:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003558:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800355a:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699a      	ldr	r2, [r3, #24]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	7c1a      	ldrb	r2, [r3, #16]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0201 	orr.w	r2, r2, #1
 8003594:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40016100 	.word	0x40016100

080035ac <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d02e      	beq.n	8003624 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80035cc:	2bff      	cmp	r3, #255	@ 0xff
 80035ce:	d029      	beq.n	8003624 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	6812      	ldr	r2, [r2, #0]
 80035da:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80035de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035e2:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d10d      	bne.n	8003606 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	021b      	lsls	r3, r3, #8
 80035f4:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80035f8:	431a      	orrs	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	e00a      	b.n	800361c <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6819      	ldr	r1, [r3, #0]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	021b      	lsls	r3, r3, #8
 8003610:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	631a      	str	r2, [r3, #48]	@ 0x30
 8003622:	e001      	b.n	8003628 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003628:	7dfb      	ldrb	r3, [r7, #23]
}
 800362a:	4618      	mov	r0, r3
 800362c:	371c      	adds	r7, #28
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
	...

08003638 <HAL_DFSDM_FilterRegularMsbStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularMsbStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                      int16_t                    *pData,
                                                      uint32_t                    Length)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <HAL_DFSDM_FilterRegularMsbStart_DMA+0x1c>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d102      	bne.n	800365a <HAL_DFSDM_FilterRegularMsbStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	75fb      	strb	r3, [r7, #23]
 8003658:	e064      	b.n	8003724 <HAL_DFSDM_FilterRegularMsbStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003664:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003668:	d002      	beq.n	8003670 <HAL_DFSDM_FilterRegularMsbStart_DMA+0x38>
  {
    status = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	75fb      	strb	r3, [r7, #23]
 800366e:	e059      	b.n	8003724 <HAL_DFSDM_FilterRegularMsbStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10e      	bne.n	8003696 <HAL_DFSDM_FilterRegularMsbStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10a      	bne.n	8003696 <HAL_DFSDM_FilterRegularMsbStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003684:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003686:	2b00      	cmp	r3, #0
 8003688:	d105      	bne.n	8003696 <HAL_DFSDM_FilterRegularMsbStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d002      	beq.n	8003696 <HAL_DFSDM_FilterRegularMsbStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	75fb      	strb	r3, [r7, #23]
 8003694:	e046      	b.n	8003724 <HAL_DFSDM_FilterRegularMsbStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10b      	bne.n	80036b6 <HAL_DFSDM_FilterRegularMsbStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d107      	bne.n	80036b6 <HAL_DFSDM_FilterRegularMsbStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036aa:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80036ac:	2b20      	cmp	r3, #32
 80036ae:	d102      	bne.n	80036b6 <HAL_DFSDM_FilterRegularMsbStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	75fb      	strb	r3, [r7, #23]
 80036b4:	e036      	b.n	8003724 <HAL_DFSDM_FilterRegularMsbStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d004      	beq.n	80036ca <HAL_DFSDM_FilterRegularMsbStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	d12a      	bne.n	8003720 <HAL_DFSDM_FilterRegularMsbStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ce:	4a18      	ldr	r2, [pc, #96]	@ (8003730 <HAL_DFSDM_FilterRegularMsbStart_DMA+0xf8>)
 80036d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d6:	4a17      	ldr	r2, [pc, #92]	@ (8003734 <HAL_DFSDM_FilterRegularMsbStart_DMA+0xfc>)
 80036d8:	635a      	str	r2, [r3, #52]	@ 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036de:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 80036e0:	2b20      	cmp	r3, #32
 80036e2:	d101      	bne.n	80036e8 <HAL_DFSDM_FilterRegularMsbStart_DMA+0xb0>
 80036e4:	4a14      	ldr	r2, [pc, #80]	@ (8003738 <HAL_DFSDM_FilterRegularMsbStart_DMA+0x100>)
 80036e6:	e000      	b.n	80036ea <HAL_DFSDM_FilterRegularMsbStart_DMA+0xb2>
 80036e8:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ee:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)(&hdfsdm_filter->Instance->FLTRDATAR) + 2U, \
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	331c      	adds	r3, #28
 80036fa:	1c99      	adds	r1, r3, #2
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f000 f9ae 	bl	8003a60 <HAL_DMA_Start_IT>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d006      	beq.n	8003718 <HAL_DFSDM_FilterRegularMsbStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	22ff      	movs	r2, #255	@ 0xff
 800370e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      status = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)(&hdfsdm_filter->Instance->FLTRDATAR) + 2U, \
 8003716:	e005      	b.n	8003724 <HAL_DFSDM_FilterRegularMsbStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 f893 	bl	8003844 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)(&hdfsdm_filter->Instance->FLTRDATAR) + 2U, \
 800371e:	e001      	b.n	8003724 <HAL_DFSDM_FilterRegularMsbStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8003724:	7dfb      	ldrb	r3, [r7, #23]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	0800376d 	.word	0x0800376d
 8003734:	08003789 	.word	0x08003789
 8003738:	08003751 	.word	0x08003751

0800373c <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375c:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f7ff f992 	bl	8002a88 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8003764:	bf00      	nop
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003778:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f7ff fa00 	bl	8002b80 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8003780:	bf00      	nop
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003794:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2203      	movs	r2, #3
 800379a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f7ff ffcd 	bl	800373c <HAL_DFSDM_FilterErrorCallback>
#endif
}
 80037a2:	bf00      	nop
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
	...

080037ac <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003828 <DFSDM_GetChannelFromInstance+0x7c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d102      	bne.n	80037c2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80037bc:	2300      	movs	r3, #0
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	e02b      	b.n	800381a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a19      	ldr	r2, [pc, #100]	@ (800382c <DFSDM_GetChannelFromInstance+0x80>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d102      	bne.n	80037d0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80037ca:	2301      	movs	r3, #1
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	e024      	b.n	800381a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a17      	ldr	r2, [pc, #92]	@ (8003830 <DFSDM_GetChannelFromInstance+0x84>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d102      	bne.n	80037de <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80037d8:	2302      	movs	r3, #2
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	e01d      	b.n	800381a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a14      	ldr	r2, [pc, #80]	@ (8003834 <DFSDM_GetChannelFromInstance+0x88>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d102      	bne.n	80037ec <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80037e6:	2304      	movs	r3, #4
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	e016      	b.n	800381a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a12      	ldr	r2, [pc, #72]	@ (8003838 <DFSDM_GetChannelFromInstance+0x8c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d102      	bne.n	80037fa <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80037f4:	2305      	movs	r3, #5
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	e00f      	b.n	800381a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a0f      	ldr	r2, [pc, #60]	@ (800383c <DFSDM_GetChannelFromInstance+0x90>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d102      	bne.n	8003808 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003802:	2306      	movs	r3, #6
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	e008      	b.n	800381a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a0d      	ldr	r2, [pc, #52]	@ (8003840 <DFSDM_GetChannelFromInstance+0x94>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d102      	bne.n	8003816 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003810:	2307      	movs	r3, #7
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	e001      	b.n	800381a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003816:	2303      	movs	r3, #3
 8003818:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800381a:	68fb      	ldr	r3, [r7, #12]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	40016000 	.word	0x40016000
 800382c:	40016020 	.word	0x40016020
 8003830:	40016040 	.word	0x40016040
 8003834:	40016080 	.word	0x40016080
 8003838:	400160a0 	.word	0x400160a0
 800383c:	400160c0 	.word	0x400160c0
 8003840:	400160e0 	.word	0x400160e0

08003844 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003850:	2b00      	cmp	r3, #0
 8003852:	d108      	bne.n	8003866 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	e033      	b.n	80038ce <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0201 	bic.w	r2, r2, #1
 8003874:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8003884:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f042 0201 	orr.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800389c:	2b03      	cmp	r3, #3
 800389e:	d116      	bne.n	80038ce <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d107      	bne.n	80038b8 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0202 	orr.w	r2, r2, #2
 80038b6:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d102      	bne.n	80038c8 <DFSDM_RegConvStart+0x84>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c6:	e000      	b.n	80038ca <DFSDM_RegConvStart+0x86>
 80038c8:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6493      	str	r3, [r2, #72]	@ 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <DFSDM_RegConvStart+0x98>
 80038d8:	2202      	movs	r2, #2
 80038da:	e000      	b.n	80038de <DFSDM_RegConvStart+0x9a>
 80038dc:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e098      	b.n	8003a34 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	461a      	mov	r2, r3
 8003908:	4b4d      	ldr	r3, [pc, #308]	@ (8003a40 <HAL_DMA_Init+0x150>)
 800390a:	429a      	cmp	r2, r3
 800390c:	d80f      	bhi.n	800392e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	4b4b      	ldr	r3, [pc, #300]	@ (8003a44 <HAL_DMA_Init+0x154>)
 8003916:	4413      	add	r3, r2
 8003918:	4a4b      	ldr	r2, [pc, #300]	@ (8003a48 <HAL_DMA_Init+0x158>)
 800391a:	fba2 2303 	umull	r2, r3, r2, r3
 800391e:	091b      	lsrs	r3, r3, #4
 8003920:	009a      	lsls	r2, r3, #2
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a48      	ldr	r2, [pc, #288]	@ (8003a4c <HAL_DMA_Init+0x15c>)
 800392a:	641a      	str	r2, [r3, #64]	@ 0x40
 800392c:	e00e      	b.n	800394c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	461a      	mov	r2, r3
 8003934:	4b46      	ldr	r3, [pc, #280]	@ (8003a50 <HAL_DMA_Init+0x160>)
 8003936:	4413      	add	r3, r2
 8003938:	4a43      	ldr	r2, [pc, #268]	@ (8003a48 <HAL_DMA_Init+0x158>)
 800393a:	fba2 2303 	umull	r2, r3, r2, r3
 800393e:	091b      	lsrs	r3, r3, #4
 8003940:	009a      	lsls	r2, r3, #2
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a42      	ldr	r2, [pc, #264]	@ (8003a54 <HAL_DMA_Init+0x164>)
 800394a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003966:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003970:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800397c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003988:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4313      	orrs	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039a6:	d039      	beq.n	8003a1c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ac:	4a27      	ldr	r2, [pc, #156]	@ (8003a4c <HAL_DMA_Init+0x15c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d11a      	bne.n	80039e8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80039b2:	4b29      	ldr	r3, [pc, #164]	@ (8003a58 <HAL_DMA_Init+0x168>)
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ba:	f003 031c 	and.w	r3, r3, #28
 80039be:	210f      	movs	r1, #15
 80039c0:	fa01 f303 	lsl.w	r3, r1, r3
 80039c4:	43db      	mvns	r3, r3
 80039c6:	4924      	ldr	r1, [pc, #144]	@ (8003a58 <HAL_DMA_Init+0x168>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80039cc:	4b22      	ldr	r3, [pc, #136]	@ (8003a58 <HAL_DMA_Init+0x168>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6859      	ldr	r1, [r3, #4]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d8:	f003 031c 	and.w	r3, r3, #28
 80039dc:	fa01 f303 	lsl.w	r3, r1, r3
 80039e0:	491d      	ldr	r1, [pc, #116]	@ (8003a58 <HAL_DMA_Init+0x168>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	600b      	str	r3, [r1, #0]
 80039e6:	e019      	b.n	8003a1c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80039e8:	4b1c      	ldr	r3, [pc, #112]	@ (8003a5c <HAL_DMA_Init+0x16c>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f0:	f003 031c 	and.w	r3, r3, #28
 80039f4:	210f      	movs	r1, #15
 80039f6:	fa01 f303 	lsl.w	r3, r1, r3
 80039fa:	43db      	mvns	r3, r3
 80039fc:	4917      	ldr	r1, [pc, #92]	@ (8003a5c <HAL_DMA_Init+0x16c>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003a02:	4b16      	ldr	r3, [pc, #88]	@ (8003a5c <HAL_DMA_Init+0x16c>)
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6859      	ldr	r1, [r3, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0e:	f003 031c 	and.w	r3, r3, #28
 8003a12:	fa01 f303 	lsl.w	r3, r1, r3
 8003a16:	4911      	ldr	r1, [pc, #68]	@ (8003a5c <HAL_DMA_Init+0x16c>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	40020407 	.word	0x40020407
 8003a44:	bffdfff8 	.word	0xbffdfff8
 8003a48:	cccccccd 	.word	0xcccccccd
 8003a4c:	40020000 	.word	0x40020000
 8003a50:	bffdfbf8 	.word	0xbffdfbf8
 8003a54:	40020400 	.word	0x40020400
 8003a58:	400200a8 	.word	0x400200a8
 8003a5c:	400204a8 	.word	0x400204a8

08003a60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
 8003a6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_DMA_Start_IT+0x20>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e04b      	b.n	8003b18 <HAL_DMA_Start_IT+0xb8>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d13a      	bne.n	8003b0a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0201 	bic.w	r2, r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	68b9      	ldr	r1, [r7, #8]
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 f8e0 	bl	8003c7e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d008      	beq.n	8003ad8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f042 020e 	orr.w	r2, r2, #14
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	e00f      	b.n	8003af8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0204 	bic.w	r2, r2, #4
 8003ae6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 020a 	orr.w	r2, r2, #10
 8003af6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0201 	orr.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	e005      	b.n	8003b16 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b12:	2302      	movs	r3, #2
 8003b14:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3c:	f003 031c 	and.w	r3, r3, #28
 8003b40:	2204      	movs	r2, #4
 8003b42:	409a      	lsls	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d026      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x7a>
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f003 0304 	and.w	r3, r3, #4
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d021      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d107      	bne.n	8003b74 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0204 	bic.w	r2, r2, #4
 8003b72:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b78:	f003 021c 	and.w	r2, r3, #28
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b80:	2104      	movs	r1, #4
 8003b82:	fa01 f202 	lsl.w	r2, r1, r2
 8003b86:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d071      	beq.n	8003c74 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003b98:	e06c      	b.n	8003c74 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b9e:	f003 031c 	and.w	r3, r3, #28
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	409a      	lsls	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d02e      	beq.n	8003c0c <HAL_DMA_IRQHandler+0xec>
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d029      	beq.n	8003c0c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0320 	and.w	r3, r3, #32
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10b      	bne.n	8003bde <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 020a 	bic.w	r2, r2, #10
 8003bd4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be2:	f003 021c 	and.w	r2, r3, #28
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bea:	2102      	movs	r1, #2
 8003bec:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d038      	beq.n	8003c74 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003c0a:	e033      	b.n	8003c74 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c10:	f003 031c 	and.w	r3, r3, #28
 8003c14:	2208      	movs	r2, #8
 8003c16:	409a      	lsls	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d02a      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x156>
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f003 0308 	and.w	r3, r3, #8
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d025      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 020e 	bic.w	r2, r2, #14
 8003c38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c3e:	f003 021c 	and.w	r2, r3, #28
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	2101      	movs	r1, #1
 8003c48:	fa01 f202 	lsl.w	r2, r1, r2
 8003c4c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d004      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c74:	bf00      	nop
 8003c76:	bf00      	nop
}
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b085      	sub	sp, #20
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	607a      	str	r2, [r7, #4]
 8003c8a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c90:	f003 021c 	and.w	r2, r3, #28
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c98:	2101      	movs	r1, #1
 8003c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c9e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b10      	cmp	r3, #16
 8003cae:	d108      	bne.n	8003cc2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003cc0:	e007      	b.n	8003cd2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	60da      	str	r2, [r3, #12]
}
 8003cd2:	bf00      	nop
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
	...

08003ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cea:	2300      	movs	r3, #0
 8003cec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cee:	e17f      	b.n	8003ff0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 8171 	beq.w	8003fea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f003 0303 	and.w	r3, r3, #3
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d005      	beq.n	8003d20 <HAL_GPIO_Init+0x40>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f003 0303 	and.w	r3, r3, #3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d130      	bne.n	8003d82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	2203      	movs	r2, #3
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	43db      	mvns	r3, r3
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4013      	ands	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	68da      	ldr	r2, [r3, #12]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d56:	2201      	movs	r2, #1
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4013      	ands	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	091b      	lsrs	r3, r3, #4
 8003d6c:	f003 0201 	and.w	r2, r3, #1
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	2b03      	cmp	r3, #3
 8003d8c:	d118      	bne.n	8003dc0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003d94:	2201      	movs	r2, #1
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4013      	ands	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	08db      	lsrs	r3, r3, #3
 8003daa:	f003 0201 	and.w	r2, r3, #1
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 0303 	and.w	r3, r3, #3
 8003dc8:	2b03      	cmp	r3, #3
 8003dca:	d017      	beq.n	8003dfc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	2203      	movs	r2, #3
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4013      	ands	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f003 0303 	and.w	r3, r3, #3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d123      	bne.n	8003e50 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	08da      	lsrs	r2, r3, #3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3208      	adds	r2, #8
 8003e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e14:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	220f      	movs	r2, #15
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	43db      	mvns	r3, r3
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	08da      	lsrs	r2, r3, #3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3208      	adds	r2, #8
 8003e4a:	6939      	ldr	r1, [r7, #16]
 8003e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	2203      	movs	r2, #3
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	43db      	mvns	r3, r3
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4013      	ands	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 0203 	and.w	r2, r3, #3
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 80ac 	beq.w	8003fea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e92:	4b5f      	ldr	r3, [pc, #380]	@ (8004010 <HAL_GPIO_Init+0x330>)
 8003e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e96:	4a5e      	ldr	r2, [pc, #376]	@ (8004010 <HAL_GPIO_Init+0x330>)
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e9e:	4b5c      	ldr	r3, [pc, #368]	@ (8004010 <HAL_GPIO_Init+0x330>)
 8003ea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	60bb      	str	r3, [r7, #8]
 8003ea8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003eaa:	4a5a      	ldr	r2, [pc, #360]	@ (8004014 <HAL_GPIO_Init+0x334>)
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	089b      	lsrs	r3, r3, #2
 8003eb0:	3302      	adds	r3, #2
 8003eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	220f      	movs	r2, #15
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003ed4:	d025      	beq.n	8003f22 <HAL_GPIO_Init+0x242>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a4f      	ldr	r2, [pc, #316]	@ (8004018 <HAL_GPIO_Init+0x338>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d01f      	beq.n	8003f1e <HAL_GPIO_Init+0x23e>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a4e      	ldr	r2, [pc, #312]	@ (800401c <HAL_GPIO_Init+0x33c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d019      	beq.n	8003f1a <HAL_GPIO_Init+0x23a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a4d      	ldr	r2, [pc, #308]	@ (8004020 <HAL_GPIO_Init+0x340>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d013      	beq.n	8003f16 <HAL_GPIO_Init+0x236>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a4c      	ldr	r2, [pc, #304]	@ (8004024 <HAL_GPIO_Init+0x344>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00d      	beq.n	8003f12 <HAL_GPIO_Init+0x232>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a4b      	ldr	r2, [pc, #300]	@ (8004028 <HAL_GPIO_Init+0x348>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d007      	beq.n	8003f0e <HAL_GPIO_Init+0x22e>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a4a      	ldr	r2, [pc, #296]	@ (800402c <HAL_GPIO_Init+0x34c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d101      	bne.n	8003f0a <HAL_GPIO_Init+0x22a>
 8003f06:	2306      	movs	r3, #6
 8003f08:	e00c      	b.n	8003f24 <HAL_GPIO_Init+0x244>
 8003f0a:	2307      	movs	r3, #7
 8003f0c:	e00a      	b.n	8003f24 <HAL_GPIO_Init+0x244>
 8003f0e:	2305      	movs	r3, #5
 8003f10:	e008      	b.n	8003f24 <HAL_GPIO_Init+0x244>
 8003f12:	2304      	movs	r3, #4
 8003f14:	e006      	b.n	8003f24 <HAL_GPIO_Init+0x244>
 8003f16:	2303      	movs	r3, #3
 8003f18:	e004      	b.n	8003f24 <HAL_GPIO_Init+0x244>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	e002      	b.n	8003f24 <HAL_GPIO_Init+0x244>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <HAL_GPIO_Init+0x244>
 8003f22:	2300      	movs	r3, #0
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	f002 0203 	and.w	r2, r2, #3
 8003f2a:	0092      	lsls	r2, r2, #2
 8003f2c:	4093      	lsls	r3, r2
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f34:	4937      	ldr	r1, [pc, #220]	@ (8004014 <HAL_GPIO_Init+0x334>)
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	089b      	lsrs	r3, r3, #2
 8003f3a:	3302      	adds	r3, #2
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f42:	4b3b      	ldr	r3, [pc, #236]	@ (8004030 <HAL_GPIO_Init+0x350>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f66:	4a32      	ldr	r2, [pc, #200]	@ (8004030 <HAL_GPIO_Init+0x350>)
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f6c:	4b30      	ldr	r3, [pc, #192]	@ (8004030 <HAL_GPIO_Init+0x350>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	43db      	mvns	r3, r3
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f90:	4a27      	ldr	r2, [pc, #156]	@ (8004030 <HAL_GPIO_Init+0x350>)
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003f96:	4b26      	ldr	r3, [pc, #152]	@ (8004030 <HAL_GPIO_Init+0x350>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	43db      	mvns	r3, r3
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003fba:	4a1d      	ldr	r2, [pc, #116]	@ (8004030 <HAL_GPIO_Init+0x350>)
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8004030 <HAL_GPIO_Init+0x350>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003fe4:	4a12      	ldr	r2, [pc, #72]	@ (8004030 <HAL_GPIO_Init+0x350>)
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	3301      	adds	r3, #1
 8003fee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f47f ae78 	bne.w	8003cf0 <HAL_GPIO_Init+0x10>
  }
}
 8004000:	bf00      	nop
 8004002:	bf00      	nop
 8004004:	371c      	adds	r7, #28
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	40021000 	.word	0x40021000
 8004014:	40010000 	.word	0x40010000
 8004018:	48000400 	.word	0x48000400
 800401c:	48000800 	.word	0x48000800
 8004020:	48000c00 	.word	0x48000c00
 8004024:	48001000 	.word	0x48001000
 8004028:	48001400 	.word	0x48001400
 800402c:	48001800 	.word	0x48001800
 8004030:	40010400 	.word	0x40010400

08004034 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691a      	ldr	r2, [r3, #16]
 8004044:	887b      	ldrh	r3, [r7, #2]
 8004046:	4013      	ands	r3, r2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800404c:	2301      	movs	r3, #1
 800404e:	73fb      	strb	r3, [r7, #15]
 8004050:	e001      	b.n	8004056 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004052:	2300      	movs	r3, #0
 8004054:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004056:	7bfb      	ldrb	r3, [r7, #15]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	807b      	strh	r3, [r7, #2]
 8004070:	4613      	mov	r3, r2
 8004072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004074:	787b      	ldrb	r3, [r7, #1]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800407a:	887a      	ldrh	r2, [r7, #2]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004080:	e002      	b.n	8004088 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004082:	887a      	ldrh	r2, [r7, #2]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	4603      	mov	r3, r0
 800409c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800409e:	4b08      	ldr	r3, [pc, #32]	@ (80040c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040a0:	695a      	ldr	r2, [r3, #20]
 80040a2:	88fb      	ldrh	r3, [r7, #6]
 80040a4:	4013      	ands	r3, r2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d006      	beq.n	80040b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040aa:	4a05      	ldr	r2, [pc, #20]	@ (80040c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040ac:	88fb      	ldrh	r3, [r7, #6]
 80040ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040b0:	88fb      	ldrh	r3, [r7, #6]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fe fde4 	bl	8002c80 <HAL_GPIO_EXTI_Callback>
  }
}
 80040b8:	bf00      	nop
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40010400 	.word	0x40010400

080040c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e08d      	b.n	80041f2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d106      	bne.n	80040f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7fe fa4a 	bl	8002584 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2224      	movs	r2, #36	@ 0x24
 80040f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0201 	bic.w	r2, r2, #1
 8004106:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004114:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004124:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d107      	bne.n	800413e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800413a:	609a      	str	r2, [r3, #8]
 800413c:	e006      	b.n	800414c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800414a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	2b02      	cmp	r3, #2
 8004152:	d108      	bne.n	8004166 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004162:	605a      	str	r2, [r3, #4]
 8004164:	e007      	b.n	8004176 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004174:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6812      	ldr	r2, [r2, #0]
 8004180:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004184:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004188:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004198:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691a      	ldr	r2, [r3, #16]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69d9      	ldr	r1, [r3, #28]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1a      	ldr	r2, [r3, #32]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0201 	orr.w	r2, r2, #1
 80041d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2220      	movs	r2, #32
 80041de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
 8004202:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b20      	cmp	r3, #32
 800420e:	d138      	bne.n	8004282 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004216:	2b01      	cmp	r3, #1
 8004218:	d101      	bne.n	800421e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800421a:	2302      	movs	r3, #2
 800421c:	e032      	b.n	8004284 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2224      	movs	r2, #36	@ 0x24
 800422a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0201 	bic.w	r2, r2, #1
 800423c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800424c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6819      	ldr	r1, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f042 0201 	orr.w	r2, r2, #1
 800426c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2220      	movs	r2, #32
 8004272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	e000      	b.n	8004284 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004282:	2302      	movs	r3, #2
  }
}
 8004284:	4618      	mov	r0, r3
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b20      	cmp	r3, #32
 80042a4:	d139      	bne.n	800431a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d101      	bne.n	80042b4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80042b0:	2302      	movs	r3, #2
 80042b2:	e033      	b.n	800431c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2224      	movs	r2, #36	@ 0x24
 80042c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0201 	bic.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80042e2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	021b      	lsls	r3, r3, #8
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 0201 	orr.w	r2, r2, #1
 8004304:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2220      	movs	r2, #32
 800430a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	e000      	b.n	800431c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800431a:	2302      	movs	r3, #2
  }
}
 800431c:	4618      	mov	r0, r3
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af02      	add	r7, sp, #8
 800432e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e101      	b.n	800453e <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d106      	bne.n	8004354 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7fe faa2 	bl	8002898 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2203      	movs	r2, #3
 8004358:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f002 fb98 	bl	8006a9c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6818      	ldr	r0, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	7c1a      	ldrb	r2, [r3, #16]
 8004374:	f88d 2000 	strb.w	r2, [sp]
 8004378:	3304      	adds	r3, #4
 800437a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800437c:	f002 fb61 	bl	8006a42 <USB_CoreInit>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d005      	beq.n	8004392 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2202      	movs	r2, #2
 800438a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e0d5      	b.n	800453e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2100      	movs	r1, #0
 8004398:	4618      	mov	r0, r3
 800439a:	f002 fb90 	bl	8006abe <USB_SetCurrentMode>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d005      	beq.n	80043b0 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e0c6      	b.n	800453e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043b0:	2300      	movs	r3, #0
 80043b2:	73fb      	strb	r3, [r7, #15]
 80043b4:	e04a      	b.n	800444c <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80043b6:	7bfa      	ldrb	r2, [r7, #15]
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	4613      	mov	r3, r2
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	4413      	add	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	440b      	add	r3, r1
 80043c4:	3315      	adds	r3, #21
 80043c6:	2201      	movs	r2, #1
 80043c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80043ca:	7bfa      	ldrb	r2, [r7, #15]
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	4613      	mov	r3, r2
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	4413      	add	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	440b      	add	r3, r1
 80043d8:	3314      	adds	r3, #20
 80043da:	7bfa      	ldrb	r2, [r7, #15]
 80043dc:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80043de:	7bfa      	ldrb	r2, [r7, #15]
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
 80043e2:	b298      	uxth	r0, r3
 80043e4:	6879      	ldr	r1, [r7, #4]
 80043e6:	4613      	mov	r3, r2
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	4413      	add	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	440b      	add	r3, r1
 80043f0:	332e      	adds	r3, #46	@ 0x2e
 80043f2:	4602      	mov	r2, r0
 80043f4:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80043f6:	7bfa      	ldrb	r2, [r7, #15]
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	4613      	mov	r3, r2
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	4413      	add	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	440b      	add	r3, r1
 8004404:	3318      	adds	r3, #24
 8004406:	2200      	movs	r2, #0
 8004408:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800440a:	7bfa      	ldrb	r2, [r7, #15]
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	4613      	mov	r3, r2
 8004410:	00db      	lsls	r3, r3, #3
 8004412:	4413      	add	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	440b      	add	r3, r1
 8004418:	331c      	adds	r3, #28
 800441a:	2200      	movs	r2, #0
 800441c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800441e:	7bfa      	ldrb	r2, [r7, #15]
 8004420:	6879      	ldr	r1, [r7, #4]
 8004422:	4613      	mov	r3, r2
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	4413      	add	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	440b      	add	r3, r1
 800442c:	3320      	adds	r3, #32
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004432:	7bfa      	ldrb	r2, [r7, #15]
 8004434:	6879      	ldr	r1, [r7, #4]
 8004436:	4613      	mov	r3, r2
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	4413      	add	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	440b      	add	r3, r1
 8004440:	3324      	adds	r3, #36	@ 0x24
 8004442:	2200      	movs	r2, #0
 8004444:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	3301      	adds	r3, #1
 800444a:	73fb      	strb	r3, [r7, #15]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	791b      	ldrb	r3, [r3, #4]
 8004450:	7bfa      	ldrb	r2, [r7, #15]
 8004452:	429a      	cmp	r2, r3
 8004454:	d3af      	bcc.n	80043b6 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004456:	2300      	movs	r3, #0
 8004458:	73fb      	strb	r3, [r7, #15]
 800445a:	e044      	b.n	80044e6 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800445c:	7bfa      	ldrb	r2, [r7, #15]
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	4613      	mov	r3, r2
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	4413      	add	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800446e:	2200      	movs	r2, #0
 8004470:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004472:	7bfa      	ldrb	r2, [r7, #15]
 8004474:	6879      	ldr	r1, [r7, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	4413      	add	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	440b      	add	r3, r1
 8004480:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004484:	7bfa      	ldrb	r2, [r7, #15]
 8004486:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004488:	7bfa      	ldrb	r2, [r7, #15]
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	4613      	mov	r3, r2
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	4413      	add	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800449a:	2200      	movs	r2, #0
 800449c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800449e:	7bfa      	ldrb	r2, [r7, #15]
 80044a0:	6879      	ldr	r1, [r7, #4]
 80044a2:	4613      	mov	r3, r2
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	4413      	add	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	440b      	add	r3, r1
 80044ac:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80044b4:	7bfa      	ldrb	r2, [r7, #15]
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	4613      	mov	r3, r2
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	4413      	add	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80044c6:	2200      	movs	r2, #0
 80044c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80044ca:	7bfa      	ldrb	r2, [r7, #15]
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	4613      	mov	r3, r2
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	4413      	add	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80044dc:	2200      	movs	r2, #0
 80044de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
 80044e2:	3301      	adds	r3, #1
 80044e4:	73fb      	strb	r3, [r7, #15]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	791b      	ldrb	r3, [r3, #4]
 80044ea:	7bfa      	ldrb	r2, [r7, #15]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d3b5      	bcc.n	800445c <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6818      	ldr	r0, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	7c1a      	ldrb	r2, [r3, #16]
 80044f8:	f88d 2000 	strb.w	r2, [sp]
 80044fc:	3304      	adds	r3, #4
 80044fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004500:	f002 fb2a 	bl	8006b58 <USB_DevInit>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d005      	beq.n	8004516 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2202      	movs	r2, #2
 800450e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e013      	b.n	800453e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	7b1b      	ldrb	r3, [r3, #12]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d102      	bne.n	8004532 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f80a 	bl	8004546 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f002 fccf 	bl	8006eda <USB_DevDisconnect>

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004546:	b480      	push	{r7}
 8004548:	b085      	sub	sp, #20
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004578:	f043 0303 	orr.w	r3, r3, #3
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
	...

08004590 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004594:	4b05      	ldr	r3, [pc, #20]	@ (80045ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a04      	ldr	r2, [pc, #16]	@ (80045ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800459a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800459e:	6013      	str	r3, [r2, #0]
}
 80045a0:	bf00      	nop
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	40007000 	.word	0x40007000

080045b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80045b0:	b480      	push	{r7}
 80045b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80045b4:	4b04      	ldr	r3, [pc, #16]	@ (80045c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80045bc:	4618      	mov	r0, r3
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40007000 	.word	0x40007000

080045cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045da:	d130      	bne.n	800463e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80045dc:	4b23      	ldr	r3, [pc, #140]	@ (800466c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80045e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045e8:	d038      	beq.n	800465c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045ea:	4b20      	ldr	r3, [pc, #128]	@ (800466c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80045f2:	4a1e      	ldr	r2, [pc, #120]	@ (800466c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80045fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004670 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2232      	movs	r2, #50	@ 0x32
 8004600:	fb02 f303 	mul.w	r3, r2, r3
 8004604:	4a1b      	ldr	r2, [pc, #108]	@ (8004674 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004606:	fba2 2303 	umull	r2, r3, r2, r3
 800460a:	0c9b      	lsrs	r3, r3, #18
 800460c:	3301      	adds	r3, #1
 800460e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004610:	e002      	b.n	8004618 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	3b01      	subs	r3, #1
 8004616:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004618:	4b14      	ldr	r3, [pc, #80]	@ (800466c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004620:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004624:	d102      	bne.n	800462c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1f2      	bne.n	8004612 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800462c:	4b0f      	ldr	r3, [pc, #60]	@ (800466c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004634:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004638:	d110      	bne.n	800465c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e00f      	b.n	800465e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800463e:	4b0b      	ldr	r3, [pc, #44]	@ (800466c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004646:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800464a:	d007      	beq.n	800465c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800464c:	4b07      	ldr	r3, [pc, #28]	@ (800466c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004654:	4a05      	ldr	r2, [pc, #20]	@ (800466c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004656:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800465a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40007000 	.word	0x40007000
 8004670:	20000014 	.word	0x20000014
 8004674:	431bde83 	.word	0x431bde83

08004678 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800467c:	4b05      	ldr	r3, [pc, #20]	@ (8004694 <HAL_PWREx_EnableVddUSB+0x1c>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	4a04      	ldr	r2, [pc, #16]	@ (8004694 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004682:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004686:	6053      	str	r3, [r2, #4]
}
 8004688:	bf00      	nop
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40007000 	.word	0x40007000

08004698 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af02      	add	r7, sp, #8
 800469e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80046a0:	f7fe fca8 	bl	8002ff4 <HAL_GetTick>
 80046a4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e063      	b.n	8004778 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10b      	bne.n	80046d4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7fd ffbb 	bl	8002640 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80046ca:	f241 3188 	movw	r1, #5000	@ 0x1388
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f858 	bl	8004784 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	3b01      	subs	r3, #1
 80046e4:	021a      	lsls	r2, r3, #8
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	2120      	movs	r1, #32
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f850 	bl	80047a0 <QSPI_WaitFlagStateUntilTimeout>
 8004700:	4603      	mov	r3, r0
 8004702:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004704:	7afb      	ldrb	r3, [r7, #11]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d131      	bne.n	800476e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004714:	f023 0310 	bic.w	r3, r3, #16
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6852      	ldr	r2, [r2, #4]
 800471c:	0611      	lsls	r1, r2, #24
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	68d2      	ldr	r2, [r2, #12]
 8004722:	4311      	orrs	r1, r2
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6812      	ldr	r2, [r2, #0]
 8004728:	430b      	orrs	r3, r1
 800472a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	4b13      	ldr	r3, [pc, #76]	@ (8004780 <HAL_QSPI_Init+0xe8>)
 8004734:	4013      	ands	r3, r2
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6912      	ldr	r2, [r2, #16]
 800473a:	0411      	lsls	r1, r2, #16
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6952      	ldr	r2, [r2, #20]
 8004740:	4311      	orrs	r1, r2
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6992      	ldr	r2, [r2, #24]
 8004746:	4311      	orrs	r1, r2
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6812      	ldr	r2, [r2, #0]
 800474c:	430b      	orrs	r3, r1
 800474e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8004776:	7afb      	ldrb	r3, [r7, #11]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	ffe0f8fe 	.word	0xffe0f8fe

08004784 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	4613      	mov	r3, r2
 80047ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80047b0:	e01a      	b.n	80047e8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b8:	d016      	beq.n	80047e8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ba:	f7fe fc1b 	bl	8002ff4 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d302      	bcc.n	80047d0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10b      	bne.n	80047e8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2204      	movs	r2, #4
 80047d4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047dc:	f043 0201 	orr.w	r2, r3, #1
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e00e      	b.n	8004806 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689a      	ldr	r2, [r3, #8]
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	4013      	ands	r3, r2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	bf14      	ite	ne
 80047f6:	2301      	movne	r3, #1
 80047f8:	2300      	moveq	r3, #0
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	461a      	mov	r2, r3
 80047fe:	79fb      	ldrb	r3, [r7, #7]
 8004800:	429a      	cmp	r2, r3
 8004802:	d1d6      	bne.n	80047b2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
	...

08004810 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b088      	sub	sp, #32
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e3ca      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004822:	4b97      	ldr	r3, [pc, #604]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 030c 	and.w	r3, r3, #12
 800482a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800482c:	4b94      	ldr	r3, [pc, #592]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f003 0303 	and.w	r3, r3, #3
 8004834:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0310 	and.w	r3, r3, #16
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 80e4 	beq.w	8004a0c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d007      	beq.n	800485a <HAL_RCC_OscConfig+0x4a>
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	2b0c      	cmp	r3, #12
 800484e:	f040 808b 	bne.w	8004968 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2b01      	cmp	r3, #1
 8004856:	f040 8087 	bne.w	8004968 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800485a:	4b89      	ldr	r3, [pc, #548]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d005      	beq.n	8004872 <HAL_RCC_OscConfig+0x62>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e3a2      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1a      	ldr	r2, [r3, #32]
 8004876:	4b82      	ldr	r3, [pc, #520]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b00      	cmp	r3, #0
 8004880:	d004      	beq.n	800488c <HAL_RCC_OscConfig+0x7c>
 8004882:	4b7f      	ldr	r3, [pc, #508]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800488a:	e005      	b.n	8004898 <HAL_RCC_OscConfig+0x88>
 800488c:	4b7c      	ldr	r3, [pc, #496]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 800488e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004892:	091b      	lsrs	r3, r3, #4
 8004894:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004898:	4293      	cmp	r3, r2
 800489a:	d223      	bcs.n	80048e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 fd55 	bl	8005350 <RCC_SetFlashLatencyFromMSIRange>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e383      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048b0:	4b73      	ldr	r3, [pc, #460]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a72      	ldr	r2, [pc, #456]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 80048b6:	f043 0308 	orr.w	r3, r3, #8
 80048ba:	6013      	str	r3, [r2, #0]
 80048bc:	4b70      	ldr	r3, [pc, #448]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	496d      	ldr	r1, [pc, #436]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048ce:	4b6c      	ldr	r3, [pc, #432]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	021b      	lsls	r3, r3, #8
 80048dc:	4968      	ldr	r1, [pc, #416]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	604b      	str	r3, [r1, #4]
 80048e2:	e025      	b.n	8004930 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048e4:	4b66      	ldr	r3, [pc, #408]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a65      	ldr	r2, [pc, #404]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 80048ea:	f043 0308 	orr.w	r3, r3, #8
 80048ee:	6013      	str	r3, [r2, #0]
 80048f0:	4b63      	ldr	r3, [pc, #396]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	4960      	ldr	r1, [pc, #384]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004902:	4b5f      	ldr	r3, [pc, #380]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	021b      	lsls	r3, r3, #8
 8004910:	495b      	ldr	r1, [pc, #364]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004912:	4313      	orrs	r3, r2
 8004914:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d109      	bne.n	8004930 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	4618      	mov	r0, r3
 8004922:	f000 fd15 	bl	8005350 <RCC_SetFlashLatencyFromMSIRange>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e343      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004930:	f000 fc4a 	bl	80051c8 <HAL_RCC_GetSysClockFreq>
 8004934:	4602      	mov	r2, r0
 8004936:	4b52      	ldr	r3, [pc, #328]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	091b      	lsrs	r3, r3, #4
 800493c:	f003 030f 	and.w	r3, r3, #15
 8004940:	4950      	ldr	r1, [pc, #320]	@ (8004a84 <HAL_RCC_OscConfig+0x274>)
 8004942:	5ccb      	ldrb	r3, [r1, r3]
 8004944:	f003 031f 	and.w	r3, r3, #31
 8004948:	fa22 f303 	lsr.w	r3, r2, r3
 800494c:	4a4e      	ldr	r2, [pc, #312]	@ (8004a88 <HAL_RCC_OscConfig+0x278>)
 800494e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004950:	4b4e      	ldr	r3, [pc, #312]	@ (8004a8c <HAL_RCC_OscConfig+0x27c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4618      	mov	r0, r3
 8004956:	f7fe fafd 	bl	8002f54 <HAL_InitTick>
 800495a:	4603      	mov	r3, r0
 800495c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800495e:	7bfb      	ldrb	r3, [r7, #15]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d052      	beq.n	8004a0a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004964:	7bfb      	ldrb	r3, [r7, #15]
 8004966:	e327      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d032      	beq.n	80049d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004970:	4b43      	ldr	r3, [pc, #268]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a42      	ldr	r2, [pc, #264]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004976:	f043 0301 	orr.w	r3, r3, #1
 800497a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800497c:	f7fe fb3a 	bl	8002ff4 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004984:	f7fe fb36 	bl	8002ff4 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e310      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004996:	4b3a      	ldr	r3, [pc, #232]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0f0      	beq.n	8004984 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049a2:	4b37      	ldr	r3, [pc, #220]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a36      	ldr	r2, [pc, #216]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 80049a8:	f043 0308 	orr.w	r3, r3, #8
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	4b34      	ldr	r3, [pc, #208]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	4931      	ldr	r1, [pc, #196]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049c0:	4b2f      	ldr	r3, [pc, #188]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	021b      	lsls	r3, r3, #8
 80049ce:	492c      	ldr	r1, [pc, #176]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	604b      	str	r3, [r1, #4]
 80049d4:	e01a      	b.n	8004a0c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80049d6:	4b2a      	ldr	r3, [pc, #168]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a29      	ldr	r2, [pc, #164]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 80049dc:	f023 0301 	bic.w	r3, r3, #1
 80049e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049e2:	f7fe fb07 	bl	8002ff4 <HAL_GetTick>
 80049e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049e8:	e008      	b.n	80049fc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049ea:	f7fe fb03 	bl	8002ff4 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e2dd      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049fc:	4b20      	ldr	r3, [pc, #128]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1f0      	bne.n	80049ea <HAL_RCC_OscConfig+0x1da>
 8004a08:	e000      	b.n	8004a0c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a0a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d074      	beq.n	8004b02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d005      	beq.n	8004a2a <HAL_RCC_OscConfig+0x21a>
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	2b0c      	cmp	r3, #12
 8004a22:	d10e      	bne.n	8004a42 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	2b03      	cmp	r3, #3
 8004a28:	d10b      	bne.n	8004a42 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a2a:	4b15      	ldr	r3, [pc, #84]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d064      	beq.n	8004b00 <HAL_RCC_OscConfig+0x2f0>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d160      	bne.n	8004b00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e2ba      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a4a:	d106      	bne.n	8004a5a <HAL_RCC_OscConfig+0x24a>
 8004a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a0b      	ldr	r2, [pc, #44]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004a52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	e026      	b.n	8004aa8 <HAL_RCC_OscConfig+0x298>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a62:	d115      	bne.n	8004a90 <HAL_RCC_OscConfig+0x280>
 8004a64:	4b06      	ldr	r3, [pc, #24]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a05      	ldr	r2, [pc, #20]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004a6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a6e:	6013      	str	r3, [r2, #0]
 8004a70:	4b03      	ldr	r3, [pc, #12]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a02      	ldr	r2, [pc, #8]	@ (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004a76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a7a:	6013      	str	r3, [r2, #0]
 8004a7c:	e014      	b.n	8004aa8 <HAL_RCC_OscConfig+0x298>
 8004a7e:	bf00      	nop
 8004a80:	40021000 	.word	0x40021000
 8004a84:	0800d700 	.word	0x0800d700
 8004a88:	20000014 	.word	0x20000014
 8004a8c:	20000018 	.word	0x20000018
 8004a90:	4ba0      	ldr	r3, [pc, #640]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a9f      	ldr	r2, [pc, #636]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004a96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	4b9d      	ldr	r3, [pc, #628]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a9c      	ldr	r2, [pc, #624]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004aa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d013      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab0:	f7fe faa0 	bl	8002ff4 <HAL_GetTick>
 8004ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ab6:	e008      	b.n	8004aca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ab8:	f7fe fa9c 	bl	8002ff4 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b64      	cmp	r3, #100	@ 0x64
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e276      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aca:	4b92      	ldr	r3, [pc, #584]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0f0      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x2a8>
 8004ad6:	e014      	b.n	8004b02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad8:	f7fe fa8c 	bl	8002ff4 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ae0:	f7fe fa88 	bl	8002ff4 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b64      	cmp	r3, #100	@ 0x64
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e262      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004af2:	4b88      	ldr	r3, [pc, #544]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1f0      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x2d0>
 8004afe:	e000      	b.n	8004b02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d060      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	2b04      	cmp	r3, #4
 8004b12:	d005      	beq.n	8004b20 <HAL_RCC_OscConfig+0x310>
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	2b0c      	cmp	r3, #12
 8004b18:	d119      	bne.n	8004b4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d116      	bne.n	8004b4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b20:	4b7c      	ldr	r3, [pc, #496]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d005      	beq.n	8004b38 <HAL_RCC_OscConfig+0x328>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e23f      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b38:	4b76      	ldr	r3, [pc, #472]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	061b      	lsls	r3, r3, #24
 8004b46:	4973      	ldr	r1, [pc, #460]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b4c:	e040      	b.n	8004bd0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d023      	beq.n	8004b9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b56:	4b6f      	ldr	r3, [pc, #444]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a6e      	ldr	r2, [pc, #440]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004b5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b62:	f7fe fa47 	bl	8002ff4 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b6a:	f7fe fa43 	bl	8002ff4 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e21d      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b7c:	4b65      	ldr	r3, [pc, #404]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0f0      	beq.n	8004b6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b88:	4b62      	ldr	r3, [pc, #392]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	061b      	lsls	r3, r3, #24
 8004b96:	495f      	ldr	r1, [pc, #380]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	604b      	str	r3, [r1, #4]
 8004b9c:	e018      	b.n	8004bd0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b9e:	4b5d      	ldr	r3, [pc, #372]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a5c      	ldr	r2, [pc, #368]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004ba4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004baa:	f7fe fa23 	bl	8002ff4 <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bb2:	f7fe fa1f 	bl	8002ff4 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e1f9      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bc4:	4b53      	ldr	r3, [pc, #332]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1f0      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0308 	and.w	r3, r3, #8
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d03c      	beq.n	8004c56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d01c      	beq.n	8004c1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004be4:	4b4b      	ldr	r3, [pc, #300]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bea:	4a4a      	ldr	r2, [pc, #296]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004bec:	f043 0301 	orr.w	r3, r3, #1
 8004bf0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf4:	f7fe f9fe 	bl	8002ff4 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bfc:	f7fe f9fa 	bl	8002ff4 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e1d4      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c0e:	4b41      	ldr	r3, [pc, #260]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d0ef      	beq.n	8004bfc <HAL_RCC_OscConfig+0x3ec>
 8004c1c:	e01b      	b.n	8004c56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c1e:	4b3d      	ldr	r3, [pc, #244]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c24:	4a3b      	ldr	r2, [pc, #236]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004c26:	f023 0301 	bic.w	r3, r3, #1
 8004c2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2e:	f7fe f9e1 	bl	8002ff4 <HAL_GetTick>
 8004c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c34:	e008      	b.n	8004c48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c36:	f7fe f9dd 	bl	8002ff4 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e1b7      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c48:	4b32      	ldr	r3, [pc, #200]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1ef      	bne.n	8004c36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0304 	and.w	r3, r3, #4
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 80a6 	beq.w	8004db0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c64:	2300      	movs	r3, #0
 8004c66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c68:	4b2a      	ldr	r3, [pc, #168]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10d      	bne.n	8004c90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c74:	4b27      	ldr	r3, [pc, #156]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c78:	4a26      	ldr	r2, [pc, #152]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004c7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c80:	4b24      	ldr	r3, [pc, #144]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c88:	60bb      	str	r3, [r7, #8]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c90:	4b21      	ldr	r3, [pc, #132]	@ (8004d18 <HAL_RCC_OscConfig+0x508>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d118      	bne.n	8004cce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c9c:	4b1e      	ldr	r3, [pc, #120]	@ (8004d18 <HAL_RCC_OscConfig+0x508>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a1d      	ldr	r2, [pc, #116]	@ (8004d18 <HAL_RCC_OscConfig+0x508>)
 8004ca2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ca6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ca8:	f7fe f9a4 	bl	8002ff4 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cb0:	f7fe f9a0 	bl	8002ff4 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e17a      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cc2:	4b15      	ldr	r3, [pc, #84]	@ (8004d18 <HAL_RCC_OscConfig+0x508>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0f0      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d108      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x4d8>
 8004cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004cde:	f043 0301 	orr.w	r3, r3, #1
 8004ce2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ce6:	e029      	b.n	8004d3c <HAL_RCC_OscConfig+0x52c>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2b05      	cmp	r3, #5
 8004cee:	d115      	bne.n	8004d1c <HAL_RCC_OscConfig+0x50c>
 8004cf0:	4b08      	ldr	r3, [pc, #32]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf6:	4a07      	ldr	r2, [pc, #28]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004cf8:	f043 0304 	orr.w	r3, r3, #4
 8004cfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d00:	4b04      	ldr	r3, [pc, #16]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d06:	4a03      	ldr	r2, [pc, #12]	@ (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004d08:	f043 0301 	orr.w	r3, r3, #1
 8004d0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d10:	e014      	b.n	8004d3c <HAL_RCC_OscConfig+0x52c>
 8004d12:	bf00      	nop
 8004d14:	40021000 	.word	0x40021000
 8004d18:	40007000 	.word	0x40007000
 8004d1c:	4b9c      	ldr	r3, [pc, #624]	@ (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d22:	4a9b      	ldr	r2, [pc, #620]	@ (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004d24:	f023 0301 	bic.w	r3, r3, #1
 8004d28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d2c:	4b98      	ldr	r3, [pc, #608]	@ (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d32:	4a97      	ldr	r2, [pc, #604]	@ (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004d34:	f023 0304 	bic.w	r3, r3, #4
 8004d38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d016      	beq.n	8004d72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d44:	f7fe f956 	bl	8002ff4 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d4a:	e00a      	b.n	8004d62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d4c:	f7fe f952 	bl	8002ff4 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e12a      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d62:	4b8b      	ldr	r3, [pc, #556]	@ (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0ed      	beq.n	8004d4c <HAL_RCC_OscConfig+0x53c>
 8004d70:	e015      	b.n	8004d9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d72:	f7fe f93f 	bl	8002ff4 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d78:	e00a      	b.n	8004d90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d7a:	f7fe f93b 	bl	8002ff4 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e113      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d90:	4b7f      	ldr	r3, [pc, #508]	@ (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1ed      	bne.n	8004d7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d9e:	7ffb      	ldrb	r3, [r7, #31]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d105      	bne.n	8004db0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004da4:	4b7a      	ldr	r3, [pc, #488]	@ (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da8:	4a79      	ldr	r2, [pc, #484]	@ (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004daa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dae:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 80fe 	beq.w	8004fb6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	f040 80d0 	bne.w	8004f64 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004dc4:	4b72      	ldr	r3, [pc, #456]	@ (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f003 0203 	and.w	r2, r3, #3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d130      	bne.n	8004e3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de2:	3b01      	subs	r3, #1
 8004de4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d127      	bne.n	8004e3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004df4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d11f      	bne.n	8004e3a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e04:	2a07      	cmp	r2, #7
 8004e06:	bf14      	ite	ne
 8004e08:	2201      	movne	r2, #1
 8004e0a:	2200      	moveq	r2, #0
 8004e0c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d113      	bne.n	8004e3a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e1c:	085b      	lsrs	r3, r3, #1
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d109      	bne.n	8004e3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e30:	085b      	lsrs	r3, r3, #1
 8004e32:	3b01      	subs	r3, #1
 8004e34:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d06e      	beq.n	8004f18 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	2b0c      	cmp	r3, #12
 8004e3e:	d069      	beq.n	8004f14 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e40:	4b53      	ldr	r3, [pc, #332]	@ (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d105      	bne.n	8004e58 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004e4c:	4b50      	ldr	r3, [pc, #320]	@ (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d001      	beq.n	8004e5c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e0ad      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004e5c:	4b4c      	ldr	r3, [pc, #304]	@ (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a4b      	ldr	r2, [pc, #300]	@ (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004e62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e66:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e68:	f7fe f8c4 	bl	8002ff4 <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e70:	f7fe f8c0 	bl	8002ff4 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e09a      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e82:	4b43      	ldr	r3, [pc, #268]	@ (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1f0      	bne.n	8004e70 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e8e:	4b40      	ldr	r3, [pc, #256]	@ (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	4b40      	ldr	r3, [pc, #256]	@ (8004f94 <HAL_RCC_OscConfig+0x784>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004e9e:	3a01      	subs	r2, #1
 8004ea0:	0112      	lsls	r2, r2, #4
 8004ea2:	4311      	orrs	r1, r2
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ea8:	0212      	lsls	r2, r2, #8
 8004eaa:	4311      	orrs	r1, r2
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004eb0:	0852      	lsrs	r2, r2, #1
 8004eb2:	3a01      	subs	r2, #1
 8004eb4:	0552      	lsls	r2, r2, #21
 8004eb6:	4311      	orrs	r1, r2
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004ebc:	0852      	lsrs	r2, r2, #1
 8004ebe:	3a01      	subs	r2, #1
 8004ec0:	0652      	lsls	r2, r2, #25
 8004ec2:	4311      	orrs	r1, r2
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ec8:	0912      	lsrs	r2, r2, #4
 8004eca:	0452      	lsls	r2, r2, #17
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	4930      	ldr	r1, [pc, #192]	@ (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ed4:	4b2e      	ldr	r3, [pc, #184]	@ (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a2d      	ldr	r2, [pc, #180]	@ (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004eda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ede:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	4a2a      	ldr	r2, [pc, #168]	@ (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004ee6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004eea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004eec:	f7fe f882 	bl	8002ff4 <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef4:	f7fe f87e 	bl	8002ff4 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e058      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f06:	4b22      	ldr	r3, [pc, #136]	@ (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0f0      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f12:	e050      	b.n	8004fb6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e04f      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f18:	4b1d      	ldr	r3, [pc, #116]	@ (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d148      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f24:	4b1a      	ldr	r3, [pc, #104]	@ (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a19      	ldr	r2, [pc, #100]	@ (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004f2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f30:	4b17      	ldr	r3, [pc, #92]	@ (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	4a16      	ldr	r2, [pc, #88]	@ (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004f36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f3c:	f7fe f85a 	bl	8002ff4 <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f44:	f7fe f856 	bl	8002ff4 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e030      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f56:	4b0e      	ldr	r3, [pc, #56]	@ (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0f0      	beq.n	8004f44 <HAL_RCC_OscConfig+0x734>
 8004f62:	e028      	b.n	8004fb6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	2b0c      	cmp	r3, #12
 8004f68:	d023      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f6a:	4b09      	ldr	r3, [pc, #36]	@ (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a08      	ldr	r2, [pc, #32]	@ (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004f70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f76:	f7fe f83d 	bl	8002ff4 <HAL_GetTick>
 8004f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f7c:	e00c      	b.n	8004f98 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f7e:	f7fe f839 	bl	8002ff4 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d905      	bls.n	8004f98 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e013      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
 8004f90:	40021000 	.word	0x40021000
 8004f94:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f98:	4b09      	ldr	r3, [pc, #36]	@ (8004fc0 <HAL_RCC_OscConfig+0x7b0>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1ec      	bne.n	8004f7e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004fa4:	4b06      	ldr	r3, [pc, #24]	@ (8004fc0 <HAL_RCC_OscConfig+0x7b0>)
 8004fa6:	68da      	ldr	r2, [r3, #12]
 8004fa8:	4905      	ldr	r1, [pc, #20]	@ (8004fc0 <HAL_RCC_OscConfig+0x7b0>)
 8004faa:	4b06      	ldr	r3, [pc, #24]	@ (8004fc4 <HAL_RCC_OscConfig+0x7b4>)
 8004fac:	4013      	ands	r3, r2
 8004fae:	60cb      	str	r3, [r1, #12]
 8004fb0:	e001      	b.n	8004fb6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e000      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3720      	adds	r7, #32
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	feeefffc 	.word	0xfeeefffc

08004fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e0e7      	b.n	80051ac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fdc:	4b75      	ldr	r3, [pc, #468]	@ (80051b4 <HAL_RCC_ClockConfig+0x1ec>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d910      	bls.n	800500c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fea:	4b72      	ldr	r3, [pc, #456]	@ (80051b4 <HAL_RCC_ClockConfig+0x1ec>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f023 0207 	bic.w	r2, r3, #7
 8004ff2:	4970      	ldr	r1, [pc, #448]	@ (80051b4 <HAL_RCC_ClockConfig+0x1ec>)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffa:	4b6e      	ldr	r3, [pc, #440]	@ (80051b4 <HAL_RCC_ClockConfig+0x1ec>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0307 	and.w	r3, r3, #7
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	429a      	cmp	r2, r3
 8005006:	d001      	beq.n	800500c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e0cf      	b.n	80051ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d010      	beq.n	800503a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	4b66      	ldr	r3, [pc, #408]	@ (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005024:	429a      	cmp	r2, r3
 8005026:	d908      	bls.n	800503a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005028:	4b63      	ldr	r3, [pc, #396]	@ (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	4960      	ldr	r1, [pc, #384]	@ (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005036:	4313      	orrs	r3, r2
 8005038:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d04c      	beq.n	80050e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	2b03      	cmp	r3, #3
 800504c:	d107      	bne.n	800505e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800504e:	4b5a      	ldr	r3, [pc, #360]	@ (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d121      	bne.n	800509e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e0a6      	b.n	80051ac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	2b02      	cmp	r3, #2
 8005064:	d107      	bne.n	8005076 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005066:	4b54      	ldr	r3, [pc, #336]	@ (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d115      	bne.n	800509e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e09a      	b.n	80051ac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d107      	bne.n	800508e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800507e:	4b4e      	ldr	r3, [pc, #312]	@ (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d109      	bne.n	800509e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e08e      	b.n	80051ac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800508e:	4b4a      	ldr	r3, [pc, #296]	@ (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e086      	b.n	80051ac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800509e:	4b46      	ldr	r3, [pc, #280]	@ (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f023 0203 	bic.w	r2, r3, #3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	4943      	ldr	r1, [pc, #268]	@ (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050b0:	f7fd ffa0 	bl	8002ff4 <HAL_GetTick>
 80050b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050b6:	e00a      	b.n	80050ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050b8:	f7fd ff9c 	bl	8002ff4 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e06e      	b.n	80051ac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ce:	4b3a      	ldr	r3, [pc, #232]	@ (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 020c 	and.w	r2, r3, #12
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	429a      	cmp	r2, r3
 80050de:	d1eb      	bne.n	80050b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d010      	beq.n	800510e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	4b31      	ldr	r3, [pc, #196]	@ (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d208      	bcs.n	800510e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050fc:	4b2e      	ldr	r3, [pc, #184]	@ (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	492b      	ldr	r1, [pc, #172]	@ (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 800510a:	4313      	orrs	r3, r2
 800510c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800510e:	4b29      	ldr	r3, [pc, #164]	@ (80051b4 <HAL_RCC_ClockConfig+0x1ec>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	429a      	cmp	r2, r3
 800511a:	d210      	bcs.n	800513e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511c:	4b25      	ldr	r3, [pc, #148]	@ (80051b4 <HAL_RCC_ClockConfig+0x1ec>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f023 0207 	bic.w	r2, r3, #7
 8005124:	4923      	ldr	r1, [pc, #140]	@ (80051b4 <HAL_RCC_ClockConfig+0x1ec>)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	4313      	orrs	r3, r2
 800512a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800512c:	4b21      	ldr	r3, [pc, #132]	@ (80051b4 <HAL_RCC_ClockConfig+0x1ec>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d001      	beq.n	800513e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e036      	b.n	80051ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0304 	and.w	r3, r3, #4
 8005146:	2b00      	cmp	r3, #0
 8005148:	d008      	beq.n	800515c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800514a:	4b1b      	ldr	r3, [pc, #108]	@ (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	4918      	ldr	r1, [pc, #96]	@ (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005158:	4313      	orrs	r3, r2
 800515a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0308 	and.w	r3, r3, #8
 8005164:	2b00      	cmp	r3, #0
 8005166:	d009      	beq.n	800517c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005168:	4b13      	ldr	r3, [pc, #76]	@ (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	00db      	lsls	r3, r3, #3
 8005176:	4910      	ldr	r1, [pc, #64]	@ (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005178:	4313      	orrs	r3, r2
 800517a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800517c:	f000 f824 	bl	80051c8 <HAL_RCC_GetSysClockFreq>
 8005180:	4602      	mov	r2, r0
 8005182:	4b0d      	ldr	r3, [pc, #52]	@ (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	091b      	lsrs	r3, r3, #4
 8005188:	f003 030f 	and.w	r3, r3, #15
 800518c:	490b      	ldr	r1, [pc, #44]	@ (80051bc <HAL_RCC_ClockConfig+0x1f4>)
 800518e:	5ccb      	ldrb	r3, [r1, r3]
 8005190:	f003 031f 	and.w	r3, r3, #31
 8005194:	fa22 f303 	lsr.w	r3, r2, r3
 8005198:	4a09      	ldr	r2, [pc, #36]	@ (80051c0 <HAL_RCC_ClockConfig+0x1f8>)
 800519a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800519c:	4b09      	ldr	r3, [pc, #36]	@ (80051c4 <HAL_RCC_ClockConfig+0x1fc>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7fd fed7 	bl	8002f54 <HAL_InitTick>
 80051a6:	4603      	mov	r3, r0
 80051a8:	72fb      	strb	r3, [r7, #11]

  return status;
 80051aa:	7afb      	ldrb	r3, [r7, #11]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	40022000 	.word	0x40022000
 80051b8:	40021000 	.word	0x40021000
 80051bc:	0800d700 	.word	0x0800d700
 80051c0:	20000014 	.word	0x20000014
 80051c4:	20000018 	.word	0x20000018

080051c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b089      	sub	sp, #36	@ 0x24
 80051cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	61fb      	str	r3, [r7, #28]
 80051d2:	2300      	movs	r3, #0
 80051d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051d6:	4b3e      	ldr	r3, [pc, #248]	@ (80052d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f003 030c 	and.w	r3, r3, #12
 80051de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051e0:	4b3b      	ldr	r3, [pc, #236]	@ (80052d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f003 0303 	and.w	r3, r3, #3
 80051e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d005      	beq.n	80051fc <HAL_RCC_GetSysClockFreq+0x34>
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	2b0c      	cmp	r3, #12
 80051f4:	d121      	bne.n	800523a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d11e      	bne.n	800523a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80051fc:	4b34      	ldr	r3, [pc, #208]	@ (80052d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b00      	cmp	r3, #0
 8005206:	d107      	bne.n	8005218 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005208:	4b31      	ldr	r3, [pc, #196]	@ (80052d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800520a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800520e:	0a1b      	lsrs	r3, r3, #8
 8005210:	f003 030f 	and.w	r3, r3, #15
 8005214:	61fb      	str	r3, [r7, #28]
 8005216:	e005      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005218:	4b2d      	ldr	r3, [pc, #180]	@ (80052d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	091b      	lsrs	r3, r3, #4
 800521e:	f003 030f 	and.w	r3, r3, #15
 8005222:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005224:	4a2b      	ldr	r2, [pc, #172]	@ (80052d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800522c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10d      	bne.n	8005250 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005238:	e00a      	b.n	8005250 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	2b04      	cmp	r3, #4
 800523e:	d102      	bne.n	8005246 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005240:	4b25      	ldr	r3, [pc, #148]	@ (80052d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005242:	61bb      	str	r3, [r7, #24]
 8005244:	e004      	b.n	8005250 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	2b08      	cmp	r3, #8
 800524a:	d101      	bne.n	8005250 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800524c:	4b23      	ldr	r3, [pc, #140]	@ (80052dc <HAL_RCC_GetSysClockFreq+0x114>)
 800524e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	2b0c      	cmp	r3, #12
 8005254:	d134      	bne.n	80052c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005256:	4b1e      	ldr	r3, [pc, #120]	@ (80052d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2b02      	cmp	r3, #2
 8005264:	d003      	beq.n	800526e <HAL_RCC_GetSysClockFreq+0xa6>
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	2b03      	cmp	r3, #3
 800526a:	d003      	beq.n	8005274 <HAL_RCC_GetSysClockFreq+0xac>
 800526c:	e005      	b.n	800527a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800526e:	4b1a      	ldr	r3, [pc, #104]	@ (80052d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005270:	617b      	str	r3, [r7, #20]
      break;
 8005272:	e005      	b.n	8005280 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005274:	4b19      	ldr	r3, [pc, #100]	@ (80052dc <HAL_RCC_GetSysClockFreq+0x114>)
 8005276:	617b      	str	r3, [r7, #20]
      break;
 8005278:	e002      	b.n	8005280 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	617b      	str	r3, [r7, #20]
      break;
 800527e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005280:	4b13      	ldr	r3, [pc, #76]	@ (80052d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	091b      	lsrs	r3, r3, #4
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	3301      	adds	r3, #1
 800528c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800528e:	4b10      	ldr	r3, [pc, #64]	@ (80052d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	0a1b      	lsrs	r3, r3, #8
 8005294:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	fb03 f202 	mul.w	r2, r3, r2
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052a6:	4b0a      	ldr	r3, [pc, #40]	@ (80052d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	0e5b      	lsrs	r3, r3, #25
 80052ac:	f003 0303 	and.w	r3, r3, #3
 80052b0:	3301      	adds	r3, #1
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80052be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80052c0:	69bb      	ldr	r3, [r7, #24]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3724      	adds	r7, #36	@ 0x24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	40021000 	.word	0x40021000
 80052d4:	0800d718 	.word	0x0800d718
 80052d8:	00f42400 	.word	0x00f42400
 80052dc:	007a1200 	.word	0x007a1200

080052e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052e4:	4b03      	ldr	r3, [pc, #12]	@ (80052f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80052e6:	681b      	ldr	r3, [r3, #0]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	20000014 	.word	0x20000014

080052f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80052fc:	f7ff fff0 	bl	80052e0 <HAL_RCC_GetHCLKFreq>
 8005300:	4602      	mov	r2, r0
 8005302:	4b06      	ldr	r3, [pc, #24]	@ (800531c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	0a1b      	lsrs	r3, r3, #8
 8005308:	f003 0307 	and.w	r3, r3, #7
 800530c:	4904      	ldr	r1, [pc, #16]	@ (8005320 <HAL_RCC_GetPCLK1Freq+0x28>)
 800530e:	5ccb      	ldrb	r3, [r1, r3]
 8005310:	f003 031f 	and.w	r3, r3, #31
 8005314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005318:	4618      	mov	r0, r3
 800531a:	bd80      	pop	{r7, pc}
 800531c:	40021000 	.word	0x40021000
 8005320:	0800d710 	.word	0x0800d710

08005324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005328:	f7ff ffda 	bl	80052e0 <HAL_RCC_GetHCLKFreq>
 800532c:	4602      	mov	r2, r0
 800532e:	4b06      	ldr	r3, [pc, #24]	@ (8005348 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	0adb      	lsrs	r3, r3, #11
 8005334:	f003 0307 	and.w	r3, r3, #7
 8005338:	4904      	ldr	r1, [pc, #16]	@ (800534c <HAL_RCC_GetPCLK2Freq+0x28>)
 800533a:	5ccb      	ldrb	r3, [r1, r3]
 800533c:	f003 031f 	and.w	r3, r3, #31
 8005340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005344:	4618      	mov	r0, r3
 8005346:	bd80      	pop	{r7, pc}
 8005348:	40021000 	.word	0x40021000
 800534c:	0800d710 	.word	0x0800d710

08005350 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005358:	2300      	movs	r3, #0
 800535a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800535c:	4b2a      	ldr	r3, [pc, #168]	@ (8005408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800535e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005360:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005368:	f7ff f922 	bl	80045b0 <HAL_PWREx_GetVoltageRange>
 800536c:	6178      	str	r0, [r7, #20]
 800536e:	e014      	b.n	800539a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005370:	4b25      	ldr	r3, [pc, #148]	@ (8005408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005374:	4a24      	ldr	r2, [pc, #144]	@ (8005408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800537a:	6593      	str	r3, [r2, #88]	@ 0x58
 800537c:	4b22      	ldr	r3, [pc, #136]	@ (8005408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800537e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005384:	60fb      	str	r3, [r7, #12]
 8005386:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005388:	f7ff f912 	bl	80045b0 <HAL_PWREx_GetVoltageRange>
 800538c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800538e:	4b1e      	ldr	r3, [pc, #120]	@ (8005408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005392:	4a1d      	ldr	r2, [pc, #116]	@ (8005408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005394:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005398:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053a0:	d10b      	bne.n	80053ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b80      	cmp	r3, #128	@ 0x80
 80053a6:	d919      	bls.n	80053dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2ba0      	cmp	r3, #160	@ 0xa0
 80053ac:	d902      	bls.n	80053b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053ae:	2302      	movs	r3, #2
 80053b0:	613b      	str	r3, [r7, #16]
 80053b2:	e013      	b.n	80053dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053b4:	2301      	movs	r3, #1
 80053b6:	613b      	str	r3, [r7, #16]
 80053b8:	e010      	b.n	80053dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b80      	cmp	r3, #128	@ 0x80
 80053be:	d902      	bls.n	80053c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80053c0:	2303      	movs	r3, #3
 80053c2:	613b      	str	r3, [r7, #16]
 80053c4:	e00a      	b.n	80053dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b80      	cmp	r3, #128	@ 0x80
 80053ca:	d102      	bne.n	80053d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053cc:	2302      	movs	r3, #2
 80053ce:	613b      	str	r3, [r7, #16]
 80053d0:	e004      	b.n	80053dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b70      	cmp	r3, #112	@ 0x70
 80053d6:	d101      	bne.n	80053dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053d8:	2301      	movs	r3, #1
 80053da:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80053dc:	4b0b      	ldr	r3, [pc, #44]	@ (800540c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f023 0207 	bic.w	r2, r3, #7
 80053e4:	4909      	ldr	r1, [pc, #36]	@ (800540c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80053ec:	4b07      	ldr	r3, [pc, #28]	@ (800540c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0307 	and.w	r3, r3, #7
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d001      	beq.n	80053fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e000      	b.n	8005400 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3718      	adds	r7, #24
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	40021000 	.word	0x40021000
 800540c:	40022000 	.word	0x40022000

08005410 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005418:	2300      	movs	r3, #0
 800541a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800541c:	2300      	movs	r3, #0
 800541e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005428:	2b00      	cmp	r3, #0
 800542a:	d041      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005430:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005434:	d02a      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005436:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800543a:	d824      	bhi.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800543c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005440:	d008      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005442:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005446:	d81e      	bhi.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800544c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005450:	d010      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005452:	e018      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005454:	4b86      	ldr	r3, [pc, #536]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	4a85      	ldr	r2, [pc, #532]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800545a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800545e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005460:	e015      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	3304      	adds	r3, #4
 8005466:	2100      	movs	r1, #0
 8005468:	4618      	mov	r0, r3
 800546a:	f000 facb 	bl	8005a04 <RCCEx_PLLSAI1_Config>
 800546e:	4603      	mov	r3, r0
 8005470:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005472:	e00c      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3320      	adds	r3, #32
 8005478:	2100      	movs	r1, #0
 800547a:	4618      	mov	r0, r3
 800547c:	f000 fbb6 	bl	8005bec <RCCEx_PLLSAI2_Config>
 8005480:	4603      	mov	r3, r0
 8005482:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005484:	e003      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	74fb      	strb	r3, [r7, #19]
      break;
 800548a:	e000      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800548c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800548e:	7cfb      	ldrb	r3, [r7, #19]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10b      	bne.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005494:	4b76      	ldr	r3, [pc, #472]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800549a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054a2:	4973      	ldr	r1, [pc, #460]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80054aa:	e001      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ac:	7cfb      	ldrb	r3, [r7, #19]
 80054ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d041      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80054c4:	d02a      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80054c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80054ca:	d824      	bhi.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80054cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054d0:	d008      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80054d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054d6:	d81e      	bhi.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00a      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80054dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054e0:	d010      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80054e2:	e018      	b.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054e4:	4b62      	ldr	r3, [pc, #392]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	4a61      	ldr	r2, [pc, #388]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054f0:	e015      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	3304      	adds	r3, #4
 80054f6:	2100      	movs	r1, #0
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fa83 	bl	8005a04 <RCCEx_PLLSAI1_Config>
 80054fe:	4603      	mov	r3, r0
 8005500:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005502:	e00c      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	3320      	adds	r3, #32
 8005508:	2100      	movs	r1, #0
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fb6e 	bl	8005bec <RCCEx_PLLSAI2_Config>
 8005510:	4603      	mov	r3, r0
 8005512:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005514:	e003      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	74fb      	strb	r3, [r7, #19]
      break;
 800551a:	e000      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800551c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800551e:	7cfb      	ldrb	r3, [r7, #19]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10b      	bne.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005524:	4b52      	ldr	r3, [pc, #328]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800552a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005532:	494f      	ldr	r1, [pc, #316]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005534:	4313      	orrs	r3, r2
 8005536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800553a:	e001      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800553c:	7cfb      	ldrb	r3, [r7, #19]
 800553e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 80a0 	beq.w	800568e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800554e:	2300      	movs	r3, #0
 8005550:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005552:	4b47      	ldr	r3, [pc, #284]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800555e:	2301      	movs	r3, #1
 8005560:	e000      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005562:	2300      	movs	r3, #0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00d      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005568:	4b41      	ldr	r3, [pc, #260]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800556a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800556c:	4a40      	ldr	r2, [pc, #256]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800556e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005572:	6593      	str	r3, [r2, #88]	@ 0x58
 8005574:	4b3e      	ldr	r3, [pc, #248]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800557c:	60bb      	str	r3, [r7, #8]
 800557e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005580:	2301      	movs	r3, #1
 8005582:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005584:	4b3b      	ldr	r3, [pc, #236]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a3a      	ldr	r2, [pc, #232]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800558a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800558e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005590:	f7fd fd30 	bl	8002ff4 <HAL_GetTick>
 8005594:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005596:	e009      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005598:	f7fd fd2c 	bl	8002ff4 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d902      	bls.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	74fb      	strb	r3, [r7, #19]
        break;
 80055aa:	e005      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055ac:	4b31      	ldr	r3, [pc, #196]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d0ef      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80055b8:	7cfb      	ldrb	r3, [r7, #19]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d15c      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80055be:	4b2c      	ldr	r3, [pc, #176]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d01f      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d019      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055dc:	4b24      	ldr	r3, [pc, #144]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055e8:	4b21      	ldr	r3, [pc, #132]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ee:	4a20      	ldr	r2, [pc, #128]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055fe:	4a1c      	ldr	r2, [pc, #112]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005600:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005604:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005608:	4a19      	ldr	r2, [pc, #100]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d016      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800561a:	f7fd fceb 	bl	8002ff4 <HAL_GetTick>
 800561e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005620:	e00b      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005622:	f7fd fce7 	bl	8002ff4 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005630:	4293      	cmp	r3, r2
 8005632:	d902      	bls.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	74fb      	strb	r3, [r7, #19]
            break;
 8005638:	e006      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800563a:	4b0d      	ldr	r3, [pc, #52]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800563c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d0ec      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005648:	7cfb      	ldrb	r3, [r7, #19]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10c      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800564e:	4b08      	ldr	r3, [pc, #32]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005654:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800565e:	4904      	ldr	r1, [pc, #16]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005660:	4313      	orrs	r3, r2
 8005662:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005666:	e009      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005668:	7cfb      	ldrb	r3, [r7, #19]
 800566a:	74bb      	strb	r3, [r7, #18]
 800566c:	e006      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800566e:	bf00      	nop
 8005670:	40021000 	.word	0x40021000
 8005674:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005678:	7cfb      	ldrb	r3, [r7, #19]
 800567a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800567c:	7c7b      	ldrb	r3, [r7, #17]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d105      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005682:	4b9e      	ldr	r3, [pc, #632]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005686:	4a9d      	ldr	r2, [pc, #628]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005688:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800568c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800569a:	4b98      	ldr	r3, [pc, #608]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800569c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a0:	f023 0203 	bic.w	r2, r3, #3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a8:	4994      	ldr	r1, [pc, #592]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056bc:	4b8f      	ldr	r3, [pc, #572]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c2:	f023 020c 	bic.w	r2, r3, #12
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ca:	498c      	ldr	r1, [pc, #560]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0304 	and.w	r3, r3, #4
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056de:	4b87      	ldr	r3, [pc, #540]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ec:	4983      	ldr	r1, [pc, #524]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0308 	and.w	r3, r3, #8
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00a      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005700:	4b7e      	ldr	r3, [pc, #504]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005706:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570e:	497b      	ldr	r1, [pc, #492]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0310 	and.w	r3, r3, #16
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00a      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005722:	4b76      	ldr	r3, [pc, #472]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005728:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005730:	4972      	ldr	r1, [pc, #456]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005732:	4313      	orrs	r3, r2
 8005734:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0320 	and.w	r3, r3, #32
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00a      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005744:	4b6d      	ldr	r3, [pc, #436]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800574a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005752:	496a      	ldr	r1, [pc, #424]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005754:	4313      	orrs	r3, r2
 8005756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00a      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005766:	4b65      	ldr	r3, [pc, #404]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800576c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005774:	4961      	ldr	r1, [pc, #388]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005776:	4313      	orrs	r3, r2
 8005778:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00a      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005788:	4b5c      	ldr	r3, [pc, #368]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800578a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800578e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005796:	4959      	ldr	r1, [pc, #356]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005798:	4313      	orrs	r3, r2
 800579a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00a      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057aa:	4b54      	ldr	r3, [pc, #336]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057b8:	4950      	ldr	r1, [pc, #320]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057cc:	4b4b      	ldr	r3, [pc, #300]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057da:	4948      	ldr	r1, [pc, #288]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00a      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057ee:	4b43      	ldr	r3, [pc, #268]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057fc:	493f      	ldr	r1, [pc, #252]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d028      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005810:	4b3a      	ldr	r3, [pc, #232]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005816:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800581e:	4937      	ldr	r1, [pc, #220]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005820:	4313      	orrs	r3, r2
 8005822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800582a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800582e:	d106      	bne.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005830:	4b32      	ldr	r3, [pc, #200]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	4a31      	ldr	r2, [pc, #196]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005836:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800583a:	60d3      	str	r3, [r2, #12]
 800583c:	e011      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005842:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005846:	d10c      	bne.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3304      	adds	r3, #4
 800584c:	2101      	movs	r1, #1
 800584e:	4618      	mov	r0, r3
 8005850:	f000 f8d8 	bl	8005a04 <RCCEx_PLLSAI1_Config>
 8005854:	4603      	mov	r3, r0
 8005856:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005858:	7cfb      	ldrb	r3, [r7, #19]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800585e:	7cfb      	ldrb	r3, [r7, #19]
 8005860:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d028      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800586e:	4b23      	ldr	r3, [pc, #140]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005874:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800587c:	491f      	ldr	r1, [pc, #124]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800587e:	4313      	orrs	r3, r2
 8005880:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005888:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800588c:	d106      	bne.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800588e:	4b1b      	ldr	r3, [pc, #108]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	4a1a      	ldr	r2, [pc, #104]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005894:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005898:	60d3      	str	r3, [r2, #12]
 800589a:	e011      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058a4:	d10c      	bne.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	3304      	adds	r3, #4
 80058aa:	2101      	movs	r1, #1
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 f8a9 	bl	8005a04 <RCCEx_PLLSAI1_Config>
 80058b2:	4603      	mov	r3, r0
 80058b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058b6:	7cfb      	ldrb	r3, [r7, #19]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80058bc:	7cfb      	ldrb	r3, [r7, #19]
 80058be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d02b      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058cc:	4b0b      	ldr	r3, [pc, #44]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058da:	4908      	ldr	r1, [pc, #32]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058ea:	d109      	bne.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058ec:	4b03      	ldr	r3, [pc, #12]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	4a02      	ldr	r2, [pc, #8]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058f6:	60d3      	str	r3, [r2, #12]
 80058f8:	e014      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80058fa:	bf00      	nop
 80058fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005904:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005908:	d10c      	bne.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	3304      	adds	r3, #4
 800590e:	2101      	movs	r1, #1
 8005910:	4618      	mov	r0, r3
 8005912:	f000 f877 	bl	8005a04 <RCCEx_PLLSAI1_Config>
 8005916:	4603      	mov	r3, r0
 8005918:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800591a:	7cfb      	ldrb	r3, [r7, #19]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005920:	7cfb      	ldrb	r3, [r7, #19]
 8005922:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d02f      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005930:	4b2b      	ldr	r3, [pc, #172]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005936:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800593e:	4928      	ldr	r1, [pc, #160]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005940:	4313      	orrs	r3, r2
 8005942:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800594a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800594e:	d10d      	bne.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	3304      	adds	r3, #4
 8005954:	2102      	movs	r1, #2
 8005956:	4618      	mov	r0, r3
 8005958:	f000 f854 	bl	8005a04 <RCCEx_PLLSAI1_Config>
 800595c:	4603      	mov	r3, r0
 800595e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005960:	7cfb      	ldrb	r3, [r7, #19]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d014      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005966:	7cfb      	ldrb	r3, [r7, #19]
 8005968:	74bb      	strb	r3, [r7, #18]
 800596a:	e011      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005970:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005974:	d10c      	bne.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	3320      	adds	r3, #32
 800597a:	2102      	movs	r1, #2
 800597c:	4618      	mov	r0, r3
 800597e:	f000 f935 	bl	8005bec <RCCEx_PLLSAI2_Config>
 8005982:	4603      	mov	r3, r0
 8005984:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005986:	7cfb      	ldrb	r3, [r7, #19]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800598c:	7cfb      	ldrb	r3, [r7, #19]
 800598e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00a      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800599c:	4b10      	ldr	r3, [pc, #64]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800599e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059a2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059aa:	490d      	ldr	r1, [pc, #52]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00b      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059be:	4b08      	ldr	r3, [pc, #32]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80059c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059ce:	4904      	ldr	r1, [pc, #16]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80059d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3718      	adds	r7, #24
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	40021000 	.word	0x40021000

080059e4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80059e4:	b480      	push	{r7}
 80059e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80059e8:	4b05      	ldr	r3, [pc, #20]	@ (8005a00 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a04      	ldr	r2, [pc, #16]	@ (8005a00 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80059ee:	f043 0304 	orr.w	r3, r3, #4
 80059f2:	6013      	str	r3, [r2, #0]
}
 80059f4:	bf00      	nop
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	40021000 	.word	0x40021000

08005a04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a12:	4b75      	ldr	r3, [pc, #468]	@ (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	f003 0303 	and.w	r3, r3, #3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d018      	beq.n	8005a50 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005a1e:	4b72      	ldr	r3, [pc, #456]	@ (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f003 0203 	and.w	r2, r3, #3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d10d      	bne.n	8005a4a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
       ||
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d009      	beq.n	8005a4a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005a36:	4b6c      	ldr	r3, [pc, #432]	@ (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	091b      	lsrs	r3, r3, #4
 8005a3c:	f003 0307 	and.w	r3, r3, #7
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
       ||
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d047      	beq.n	8005ada <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	73fb      	strb	r3, [r7, #15]
 8005a4e:	e044      	b.n	8005ada <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b03      	cmp	r3, #3
 8005a56:	d018      	beq.n	8005a8a <RCCEx_PLLSAI1_Config+0x86>
 8005a58:	2b03      	cmp	r3, #3
 8005a5a:	d825      	bhi.n	8005aa8 <RCCEx_PLLSAI1_Config+0xa4>
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d002      	beq.n	8005a66 <RCCEx_PLLSAI1_Config+0x62>
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d009      	beq.n	8005a78 <RCCEx_PLLSAI1_Config+0x74>
 8005a64:	e020      	b.n	8005aa8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a66:	4b60      	ldr	r3, [pc, #384]	@ (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d11d      	bne.n	8005aae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a76:	e01a      	b.n	8005aae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a78:	4b5b      	ldr	r3, [pc, #364]	@ (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d116      	bne.n	8005ab2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a88:	e013      	b.n	8005ab2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a8a:	4b57      	ldr	r3, [pc, #348]	@ (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10f      	bne.n	8005ab6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a96:	4b54      	ldr	r3, [pc, #336]	@ (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d109      	bne.n	8005ab6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005aa6:	e006      	b.n	8005ab6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8005aac:	e004      	b.n	8005ab8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005aae:	bf00      	nop
 8005ab0:	e002      	b.n	8005ab8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005ab2:	bf00      	nop
 8005ab4:	e000      	b.n	8005ab8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005ab6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10d      	bne.n	8005ada <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005abe:	4b4a      	ldr	r3, [pc, #296]	@ (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6819      	ldr	r1, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	011b      	lsls	r3, r3, #4
 8005ad2:	430b      	orrs	r3, r1
 8005ad4:	4944      	ldr	r1, [pc, #272]	@ (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005ada:	7bfb      	ldrb	r3, [r7, #15]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d17d      	bne.n	8005bdc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005ae0:	4b41      	ldr	r3, [pc, #260]	@ (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a40      	ldr	r2, [pc, #256]	@ (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ae6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005aea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aec:	f7fd fa82 	bl	8002ff4 <HAL_GetTick>
 8005af0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005af2:	e009      	b.n	8005b08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005af4:	f7fd fa7e 	bl	8002ff4 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d902      	bls.n	8005b08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	73fb      	strb	r3, [r7, #15]
        break;
 8005b06:	e005      	b.n	8005b14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b08:	4b37      	ldr	r3, [pc, #220]	@ (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1ef      	bne.n	8005af4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005b14:	7bfb      	ldrb	r3, [r7, #15]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d160      	bne.n	8005bdc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d111      	bne.n	8005b44 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b20:	4b31      	ldr	r3, [pc, #196]	@ (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005b28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	6892      	ldr	r2, [r2, #8]
 8005b30:	0211      	lsls	r1, r2, #8
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	68d2      	ldr	r2, [r2, #12]
 8005b36:	0912      	lsrs	r2, r2, #4
 8005b38:	0452      	lsls	r2, r2, #17
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	492a      	ldr	r1, [pc, #168]	@ (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	610b      	str	r3, [r1, #16]
 8005b42:	e027      	b.n	8005b94 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d112      	bne.n	8005b70 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b4a:	4b27      	ldr	r3, [pc, #156]	@ (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005b52:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	6892      	ldr	r2, [r2, #8]
 8005b5a:	0211      	lsls	r1, r2, #8
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	6912      	ldr	r2, [r2, #16]
 8005b60:	0852      	lsrs	r2, r2, #1
 8005b62:	3a01      	subs	r2, #1
 8005b64:	0552      	lsls	r2, r2, #21
 8005b66:	430a      	orrs	r2, r1
 8005b68:	491f      	ldr	r1, [pc, #124]	@ (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	610b      	str	r3, [r1, #16]
 8005b6e:	e011      	b.n	8005b94 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b70:	4b1d      	ldr	r3, [pc, #116]	@ (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005b78:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	6892      	ldr	r2, [r2, #8]
 8005b80:	0211      	lsls	r1, r2, #8
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6952      	ldr	r2, [r2, #20]
 8005b86:	0852      	lsrs	r2, r2, #1
 8005b88:	3a01      	subs	r2, #1
 8005b8a:	0652      	lsls	r2, r2, #25
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	4916      	ldr	r1, [pc, #88]	@ (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005b94:	4b14      	ldr	r3, [pc, #80]	@ (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a13      	ldr	r2, [pc, #76]	@ (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b9a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ba0:	f7fd fa28 	bl	8002ff4 <HAL_GetTick>
 8005ba4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ba6:	e009      	b.n	8005bbc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ba8:	f7fd fa24 	bl	8002ff4 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d902      	bls.n	8005bbc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	73fb      	strb	r3, [r7, #15]
          break;
 8005bba:	e005      	b.n	8005bc8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0ef      	beq.n	8005ba8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005bc8:	7bfb      	ldrb	r3, [r7, #15]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d106      	bne.n	8005bdc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005bce:	4b06      	ldr	r3, [pc, #24]	@ (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bd0:	691a      	ldr	r2, [r3, #16]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	4904      	ldr	r1, [pc, #16]	@ (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	40021000 	.word	0x40021000

08005bec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005bfa:	4b6a      	ldr	r3, [pc, #424]	@ (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	f003 0303 	and.w	r3, r3, #3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d018      	beq.n	8005c38 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005c06:	4b67      	ldr	r3, [pc, #412]	@ (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f003 0203 	and.w	r2, r3, #3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d10d      	bne.n	8005c32 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
       ||
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d009      	beq.n	8005c32 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005c1e:	4b61      	ldr	r3, [pc, #388]	@ (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	091b      	lsrs	r3, r3, #4
 8005c24:	f003 0307 	and.w	r3, r3, #7
 8005c28:	1c5a      	adds	r2, r3, #1
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
       ||
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d047      	beq.n	8005cc2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	73fb      	strb	r3, [r7, #15]
 8005c36:	e044      	b.n	8005cc2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b03      	cmp	r3, #3
 8005c3e:	d018      	beq.n	8005c72 <RCCEx_PLLSAI2_Config+0x86>
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d825      	bhi.n	8005c90 <RCCEx_PLLSAI2_Config+0xa4>
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d002      	beq.n	8005c4e <RCCEx_PLLSAI2_Config+0x62>
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d009      	beq.n	8005c60 <RCCEx_PLLSAI2_Config+0x74>
 8005c4c:	e020      	b.n	8005c90 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c4e:	4b55      	ldr	r3, [pc, #340]	@ (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d11d      	bne.n	8005c96 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c5e:	e01a      	b.n	8005c96 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c60:	4b50      	ldr	r3, [pc, #320]	@ (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d116      	bne.n	8005c9a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c70:	e013      	b.n	8005c9a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c72:	4b4c      	ldr	r3, [pc, #304]	@ (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10f      	bne.n	8005c9e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c7e:	4b49      	ldr	r3, [pc, #292]	@ (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d109      	bne.n	8005c9e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c8e:	e006      	b.n	8005c9e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	73fb      	strb	r3, [r7, #15]
      break;
 8005c94:	e004      	b.n	8005ca0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c96:	bf00      	nop
 8005c98:	e002      	b.n	8005ca0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c9a:	bf00      	nop
 8005c9c:	e000      	b.n	8005ca0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ca0:	7bfb      	ldrb	r3, [r7, #15]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10d      	bne.n	8005cc2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005ca6:	4b3f      	ldr	r3, [pc, #252]	@ (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6819      	ldr	r1, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	011b      	lsls	r3, r3, #4
 8005cba:	430b      	orrs	r3, r1
 8005cbc:	4939      	ldr	r1, [pc, #228]	@ (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005cc2:	7bfb      	ldrb	r3, [r7, #15]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d167      	bne.n	8005d98 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005cc8:	4b36      	ldr	r3, [pc, #216]	@ (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a35      	ldr	r2, [pc, #212]	@ (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cd4:	f7fd f98e 	bl	8002ff4 <HAL_GetTick>
 8005cd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005cda:	e009      	b.n	8005cf0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005cdc:	f7fd f98a 	bl	8002ff4 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d902      	bls.n	8005cf0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	73fb      	strb	r3, [r7, #15]
        break;
 8005cee:	e005      	b.n	8005cfc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1ef      	bne.n	8005cdc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005cfc:	7bfb      	ldrb	r3, [r7, #15]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d14a      	bne.n	8005d98 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d111      	bne.n	8005d2c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d08:	4b26      	ldr	r3, [pc, #152]	@ (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005d10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	6892      	ldr	r2, [r2, #8]
 8005d18:	0211      	lsls	r1, r2, #8
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	68d2      	ldr	r2, [r2, #12]
 8005d1e:	0912      	lsrs	r2, r2, #4
 8005d20:	0452      	lsls	r2, r2, #17
 8005d22:	430a      	orrs	r2, r1
 8005d24:	491f      	ldr	r1, [pc, #124]	@ (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	614b      	str	r3, [r1, #20]
 8005d2a:	e011      	b.n	8005d50 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005d34:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	6892      	ldr	r2, [r2, #8]
 8005d3c:	0211      	lsls	r1, r2, #8
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	6912      	ldr	r2, [r2, #16]
 8005d42:	0852      	lsrs	r2, r2, #1
 8005d44:	3a01      	subs	r2, #1
 8005d46:	0652      	lsls	r2, r2, #25
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	4916      	ldr	r1, [pc, #88]	@ (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005d50:	4b14      	ldr	r3, [pc, #80]	@ (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a13      	ldr	r2, [pc, #76]	@ (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d5c:	f7fd f94a 	bl	8002ff4 <HAL_GetTick>
 8005d60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d62:	e009      	b.n	8005d78 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d64:	f7fd f946 	bl	8002ff4 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d902      	bls.n	8005d78 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	73fb      	strb	r3, [r7, #15]
          break;
 8005d76:	e005      	b.n	8005d84 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d78:	4b0a      	ldr	r3, [pc, #40]	@ (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d0ef      	beq.n	8005d64 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d106      	bne.n	8005d98 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005d8a:	4b06      	ldr	r3, [pc, #24]	@ (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d8c:	695a      	ldr	r2, [r3, #20]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	4904      	ldr	r1, [pc, #16]	@ (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	40021000 	.word	0x40021000

08005da8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e095      	b.n	8005ee6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d108      	bne.n	8005dd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dca:	d009      	beq.n	8005de0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	61da      	str	r2, [r3, #28]
 8005dd2:	e005      	b.n	8005de0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d106      	bne.n	8005e00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f7fc fc64 	bl	80026c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2202      	movs	r2, #2
 8005e04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e20:	d902      	bls.n	8005e28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e22:	2300      	movs	r3, #0
 8005e24:	60fb      	str	r3, [r7, #12]
 8005e26:	e002      	b.n	8005e2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005e2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005e36:	d007      	beq.n	8005e48 <HAL_SPI_Init+0xa0>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e40:	d002      	beq.n	8005e48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005e58:	431a      	orrs	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	431a      	orrs	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	431a      	orrs	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e76:	431a      	orrs	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e80:	431a      	orrs	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e8a:	ea42 0103 	orr.w	r1, r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e92:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	0c1b      	lsrs	r3, r3, #16
 8005ea4:	f003 0204 	and.w	r2, r3, #4
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eac:	f003 0310 	and.w	r3, r3, #16
 8005eb0:	431a      	orrs	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eb6:	f003 0308 	and.w	r3, r3, #8
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005ec4:	ea42 0103 	orr.w	r1, r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b082      	sub	sp, #8
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e040      	b.n	8005f82 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d106      	bne.n	8005f16 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7fc fc1d 	bl	8002750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2224      	movs	r2, #36	@ 0x24
 8005f1a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 0201 	bic.w	r2, r2, #1
 8005f2a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d002      	beq.n	8005f3a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 fb69 	bl	800660c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f8ae 	bl	800609c <UART_SetConfig>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d101      	bne.n	8005f4a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e01b      	b.n	8005f82 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f58:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	689a      	ldr	r2, [r3, #8]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f68:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f042 0201 	orr.w	r2, r2, #1
 8005f78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 fbe8 	bl	8006750 <UART_CheckIdleState>
 8005f80:	4603      	mov	r3, r0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b08a      	sub	sp, #40	@ 0x28
 8005f8e:	af02      	add	r7, sp, #8
 8005f90:	60f8      	str	r0, [r7, #12]
 8005f92:	60b9      	str	r1, [r7, #8]
 8005f94:	603b      	str	r3, [r7, #0]
 8005f96:	4613      	mov	r3, r2
 8005f98:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f9e:	2b20      	cmp	r3, #32
 8005fa0:	d177      	bne.n	8006092 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d002      	beq.n	8005fae <HAL_UART_Transmit+0x24>
 8005fa8:	88fb      	ldrh	r3, [r7, #6]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e070      	b.n	8006094 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2221      	movs	r2, #33	@ 0x21
 8005fbe:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fc0:	f7fd f818 	bl	8002ff4 <HAL_GetTick>
 8005fc4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	88fa      	ldrh	r2, [r7, #6]
 8005fca:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	88fa      	ldrh	r2, [r7, #6]
 8005fd2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fde:	d108      	bne.n	8005ff2 <HAL_UART_Transmit+0x68>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d104      	bne.n	8005ff2 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	61bb      	str	r3, [r7, #24]
 8005ff0:	e003      	b.n	8005ffa <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ffa:	e02f      	b.n	800605c <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	2200      	movs	r2, #0
 8006004:	2180      	movs	r1, #128	@ 0x80
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f000 fc4a 	bl	80068a0 <UART_WaitOnFlagUntilTimeout>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d004      	beq.n	800601c <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2220      	movs	r2, #32
 8006016:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e03b      	b.n	8006094 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10b      	bne.n	800603a <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	881a      	ldrh	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800602e:	b292      	uxth	r2, r2
 8006030:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	3302      	adds	r3, #2
 8006036:	61bb      	str	r3, [r7, #24]
 8006038:	e007      	b.n	800604a <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	781a      	ldrb	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	3301      	adds	r3, #1
 8006048:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006050:	b29b      	uxth	r3, r3
 8006052:	3b01      	subs	r3, #1
 8006054:	b29a      	uxth	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006062:	b29b      	uxth	r3, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1c9      	bne.n	8005ffc <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2200      	movs	r2, #0
 8006070:	2140      	movs	r1, #64	@ 0x40
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f000 fc14 	bl	80068a0 <UART_WaitOnFlagUntilTimeout>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d004      	beq.n	8006088 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2220      	movs	r2, #32
 8006082:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e005      	b.n	8006094 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2220      	movs	r2, #32
 800608c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800608e:	2300      	movs	r3, #0
 8006090:	e000      	b.n	8006094 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006092:	2302      	movs	r3, #2
  }
}
 8006094:	4618      	mov	r0, r3
 8006096:	3720      	adds	r7, #32
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800609c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060a0:	b08a      	sub	sp, #40	@ 0x28
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060a6:	2300      	movs	r3, #0
 80060a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	689a      	ldr	r2, [r3, #8]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	431a      	orrs	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	431a      	orrs	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	69db      	ldr	r3, [r3, #28]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	4ba4      	ldr	r3, [pc, #656]	@ (800635c <UART_SetConfig+0x2c0>)
 80060cc:	4013      	ands	r3, r2
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	6812      	ldr	r2, [r2, #0]
 80060d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80060d4:	430b      	orrs	r3, r1
 80060d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	68da      	ldr	r2, [r3, #12]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a99      	ldr	r2, [pc, #612]	@ (8006360 <UART_SetConfig+0x2c4>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d004      	beq.n	8006108 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006104:	4313      	orrs	r3, r2
 8006106:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006118:	430a      	orrs	r2, r1
 800611a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a90      	ldr	r2, [pc, #576]	@ (8006364 <UART_SetConfig+0x2c8>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d126      	bne.n	8006174 <UART_SetConfig+0xd8>
 8006126:	4b90      	ldr	r3, [pc, #576]	@ (8006368 <UART_SetConfig+0x2cc>)
 8006128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800612c:	f003 0303 	and.w	r3, r3, #3
 8006130:	2b03      	cmp	r3, #3
 8006132:	d81b      	bhi.n	800616c <UART_SetConfig+0xd0>
 8006134:	a201      	add	r2, pc, #4	@ (adr r2, 800613c <UART_SetConfig+0xa0>)
 8006136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613a:	bf00      	nop
 800613c:	0800614d 	.word	0x0800614d
 8006140:	0800615d 	.word	0x0800615d
 8006144:	08006155 	.word	0x08006155
 8006148:	08006165 	.word	0x08006165
 800614c:	2301      	movs	r3, #1
 800614e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006152:	e116      	b.n	8006382 <UART_SetConfig+0x2e6>
 8006154:	2302      	movs	r3, #2
 8006156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800615a:	e112      	b.n	8006382 <UART_SetConfig+0x2e6>
 800615c:	2304      	movs	r3, #4
 800615e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006162:	e10e      	b.n	8006382 <UART_SetConfig+0x2e6>
 8006164:	2308      	movs	r3, #8
 8006166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800616a:	e10a      	b.n	8006382 <UART_SetConfig+0x2e6>
 800616c:	2310      	movs	r3, #16
 800616e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006172:	e106      	b.n	8006382 <UART_SetConfig+0x2e6>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a7c      	ldr	r2, [pc, #496]	@ (800636c <UART_SetConfig+0x2d0>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d138      	bne.n	80061f0 <UART_SetConfig+0x154>
 800617e:	4b7a      	ldr	r3, [pc, #488]	@ (8006368 <UART_SetConfig+0x2cc>)
 8006180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006184:	f003 030c 	and.w	r3, r3, #12
 8006188:	2b0c      	cmp	r3, #12
 800618a:	d82d      	bhi.n	80061e8 <UART_SetConfig+0x14c>
 800618c:	a201      	add	r2, pc, #4	@ (adr r2, 8006194 <UART_SetConfig+0xf8>)
 800618e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006192:	bf00      	nop
 8006194:	080061c9 	.word	0x080061c9
 8006198:	080061e9 	.word	0x080061e9
 800619c:	080061e9 	.word	0x080061e9
 80061a0:	080061e9 	.word	0x080061e9
 80061a4:	080061d9 	.word	0x080061d9
 80061a8:	080061e9 	.word	0x080061e9
 80061ac:	080061e9 	.word	0x080061e9
 80061b0:	080061e9 	.word	0x080061e9
 80061b4:	080061d1 	.word	0x080061d1
 80061b8:	080061e9 	.word	0x080061e9
 80061bc:	080061e9 	.word	0x080061e9
 80061c0:	080061e9 	.word	0x080061e9
 80061c4:	080061e1 	.word	0x080061e1
 80061c8:	2300      	movs	r3, #0
 80061ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061ce:	e0d8      	b.n	8006382 <UART_SetConfig+0x2e6>
 80061d0:	2302      	movs	r3, #2
 80061d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061d6:	e0d4      	b.n	8006382 <UART_SetConfig+0x2e6>
 80061d8:	2304      	movs	r3, #4
 80061da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061de:	e0d0      	b.n	8006382 <UART_SetConfig+0x2e6>
 80061e0:	2308      	movs	r3, #8
 80061e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061e6:	e0cc      	b.n	8006382 <UART_SetConfig+0x2e6>
 80061e8:	2310      	movs	r3, #16
 80061ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061ee:	e0c8      	b.n	8006382 <UART_SetConfig+0x2e6>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a5e      	ldr	r2, [pc, #376]	@ (8006370 <UART_SetConfig+0x2d4>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d125      	bne.n	8006246 <UART_SetConfig+0x1aa>
 80061fa:	4b5b      	ldr	r3, [pc, #364]	@ (8006368 <UART_SetConfig+0x2cc>)
 80061fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006200:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006204:	2b30      	cmp	r3, #48	@ 0x30
 8006206:	d016      	beq.n	8006236 <UART_SetConfig+0x19a>
 8006208:	2b30      	cmp	r3, #48	@ 0x30
 800620a:	d818      	bhi.n	800623e <UART_SetConfig+0x1a2>
 800620c:	2b20      	cmp	r3, #32
 800620e:	d00a      	beq.n	8006226 <UART_SetConfig+0x18a>
 8006210:	2b20      	cmp	r3, #32
 8006212:	d814      	bhi.n	800623e <UART_SetConfig+0x1a2>
 8006214:	2b00      	cmp	r3, #0
 8006216:	d002      	beq.n	800621e <UART_SetConfig+0x182>
 8006218:	2b10      	cmp	r3, #16
 800621a:	d008      	beq.n	800622e <UART_SetConfig+0x192>
 800621c:	e00f      	b.n	800623e <UART_SetConfig+0x1a2>
 800621e:	2300      	movs	r3, #0
 8006220:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006224:	e0ad      	b.n	8006382 <UART_SetConfig+0x2e6>
 8006226:	2302      	movs	r3, #2
 8006228:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800622c:	e0a9      	b.n	8006382 <UART_SetConfig+0x2e6>
 800622e:	2304      	movs	r3, #4
 8006230:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006234:	e0a5      	b.n	8006382 <UART_SetConfig+0x2e6>
 8006236:	2308      	movs	r3, #8
 8006238:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800623c:	e0a1      	b.n	8006382 <UART_SetConfig+0x2e6>
 800623e:	2310      	movs	r3, #16
 8006240:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006244:	e09d      	b.n	8006382 <UART_SetConfig+0x2e6>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a4a      	ldr	r2, [pc, #296]	@ (8006374 <UART_SetConfig+0x2d8>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d125      	bne.n	800629c <UART_SetConfig+0x200>
 8006250:	4b45      	ldr	r3, [pc, #276]	@ (8006368 <UART_SetConfig+0x2cc>)
 8006252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006256:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800625a:	2bc0      	cmp	r3, #192	@ 0xc0
 800625c:	d016      	beq.n	800628c <UART_SetConfig+0x1f0>
 800625e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006260:	d818      	bhi.n	8006294 <UART_SetConfig+0x1f8>
 8006262:	2b80      	cmp	r3, #128	@ 0x80
 8006264:	d00a      	beq.n	800627c <UART_SetConfig+0x1e0>
 8006266:	2b80      	cmp	r3, #128	@ 0x80
 8006268:	d814      	bhi.n	8006294 <UART_SetConfig+0x1f8>
 800626a:	2b00      	cmp	r3, #0
 800626c:	d002      	beq.n	8006274 <UART_SetConfig+0x1d8>
 800626e:	2b40      	cmp	r3, #64	@ 0x40
 8006270:	d008      	beq.n	8006284 <UART_SetConfig+0x1e8>
 8006272:	e00f      	b.n	8006294 <UART_SetConfig+0x1f8>
 8006274:	2300      	movs	r3, #0
 8006276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800627a:	e082      	b.n	8006382 <UART_SetConfig+0x2e6>
 800627c:	2302      	movs	r3, #2
 800627e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006282:	e07e      	b.n	8006382 <UART_SetConfig+0x2e6>
 8006284:	2304      	movs	r3, #4
 8006286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800628a:	e07a      	b.n	8006382 <UART_SetConfig+0x2e6>
 800628c:	2308      	movs	r3, #8
 800628e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006292:	e076      	b.n	8006382 <UART_SetConfig+0x2e6>
 8006294:	2310      	movs	r3, #16
 8006296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800629a:	e072      	b.n	8006382 <UART_SetConfig+0x2e6>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a35      	ldr	r2, [pc, #212]	@ (8006378 <UART_SetConfig+0x2dc>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d12a      	bne.n	80062fc <UART_SetConfig+0x260>
 80062a6:	4b30      	ldr	r3, [pc, #192]	@ (8006368 <UART_SetConfig+0x2cc>)
 80062a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062b4:	d01a      	beq.n	80062ec <UART_SetConfig+0x250>
 80062b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062ba:	d81b      	bhi.n	80062f4 <UART_SetConfig+0x258>
 80062bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062c0:	d00c      	beq.n	80062dc <UART_SetConfig+0x240>
 80062c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062c6:	d815      	bhi.n	80062f4 <UART_SetConfig+0x258>
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d003      	beq.n	80062d4 <UART_SetConfig+0x238>
 80062cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062d0:	d008      	beq.n	80062e4 <UART_SetConfig+0x248>
 80062d2:	e00f      	b.n	80062f4 <UART_SetConfig+0x258>
 80062d4:	2300      	movs	r3, #0
 80062d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062da:	e052      	b.n	8006382 <UART_SetConfig+0x2e6>
 80062dc:	2302      	movs	r3, #2
 80062de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062e2:	e04e      	b.n	8006382 <UART_SetConfig+0x2e6>
 80062e4:	2304      	movs	r3, #4
 80062e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062ea:	e04a      	b.n	8006382 <UART_SetConfig+0x2e6>
 80062ec:	2308      	movs	r3, #8
 80062ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062f2:	e046      	b.n	8006382 <UART_SetConfig+0x2e6>
 80062f4:	2310      	movs	r3, #16
 80062f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062fa:	e042      	b.n	8006382 <UART_SetConfig+0x2e6>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a17      	ldr	r2, [pc, #92]	@ (8006360 <UART_SetConfig+0x2c4>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d13a      	bne.n	800637c <UART_SetConfig+0x2e0>
 8006306:	4b18      	ldr	r3, [pc, #96]	@ (8006368 <UART_SetConfig+0x2cc>)
 8006308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800630c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006310:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006314:	d01a      	beq.n	800634c <UART_SetConfig+0x2b0>
 8006316:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800631a:	d81b      	bhi.n	8006354 <UART_SetConfig+0x2b8>
 800631c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006320:	d00c      	beq.n	800633c <UART_SetConfig+0x2a0>
 8006322:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006326:	d815      	bhi.n	8006354 <UART_SetConfig+0x2b8>
 8006328:	2b00      	cmp	r3, #0
 800632a:	d003      	beq.n	8006334 <UART_SetConfig+0x298>
 800632c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006330:	d008      	beq.n	8006344 <UART_SetConfig+0x2a8>
 8006332:	e00f      	b.n	8006354 <UART_SetConfig+0x2b8>
 8006334:	2300      	movs	r3, #0
 8006336:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800633a:	e022      	b.n	8006382 <UART_SetConfig+0x2e6>
 800633c:	2302      	movs	r3, #2
 800633e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006342:	e01e      	b.n	8006382 <UART_SetConfig+0x2e6>
 8006344:	2304      	movs	r3, #4
 8006346:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800634a:	e01a      	b.n	8006382 <UART_SetConfig+0x2e6>
 800634c:	2308      	movs	r3, #8
 800634e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006352:	e016      	b.n	8006382 <UART_SetConfig+0x2e6>
 8006354:	2310      	movs	r3, #16
 8006356:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800635a:	e012      	b.n	8006382 <UART_SetConfig+0x2e6>
 800635c:	efff69f3 	.word	0xefff69f3
 8006360:	40008000 	.word	0x40008000
 8006364:	40013800 	.word	0x40013800
 8006368:	40021000 	.word	0x40021000
 800636c:	40004400 	.word	0x40004400
 8006370:	40004800 	.word	0x40004800
 8006374:	40004c00 	.word	0x40004c00
 8006378:	40005000 	.word	0x40005000
 800637c:	2310      	movs	r3, #16
 800637e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a9f      	ldr	r2, [pc, #636]	@ (8006604 <UART_SetConfig+0x568>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d17a      	bne.n	8006482 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800638c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006390:	2b08      	cmp	r3, #8
 8006392:	d824      	bhi.n	80063de <UART_SetConfig+0x342>
 8006394:	a201      	add	r2, pc, #4	@ (adr r2, 800639c <UART_SetConfig+0x300>)
 8006396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639a:	bf00      	nop
 800639c:	080063c1 	.word	0x080063c1
 80063a0:	080063df 	.word	0x080063df
 80063a4:	080063c9 	.word	0x080063c9
 80063a8:	080063df 	.word	0x080063df
 80063ac:	080063cf 	.word	0x080063cf
 80063b0:	080063df 	.word	0x080063df
 80063b4:	080063df 	.word	0x080063df
 80063b8:	080063df 	.word	0x080063df
 80063bc:	080063d7 	.word	0x080063d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063c0:	f7fe ff9a 	bl	80052f8 <HAL_RCC_GetPCLK1Freq>
 80063c4:	61f8      	str	r0, [r7, #28]
        break;
 80063c6:	e010      	b.n	80063ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063c8:	4b8f      	ldr	r3, [pc, #572]	@ (8006608 <UART_SetConfig+0x56c>)
 80063ca:	61fb      	str	r3, [r7, #28]
        break;
 80063cc:	e00d      	b.n	80063ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063ce:	f7fe fefb 	bl	80051c8 <HAL_RCC_GetSysClockFreq>
 80063d2:	61f8      	str	r0, [r7, #28]
        break;
 80063d4:	e009      	b.n	80063ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063da:	61fb      	str	r3, [r7, #28]
        break;
 80063dc:	e005      	b.n	80063ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80063de:	2300      	movs	r3, #0
 80063e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80063e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 80fb 	beq.w	80065e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	4613      	mov	r3, r2
 80063f8:	005b      	lsls	r3, r3, #1
 80063fa:	4413      	add	r3, r2
 80063fc:	69fa      	ldr	r2, [r7, #28]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d305      	bcc.n	800640e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006408:	69fa      	ldr	r2, [r7, #28]
 800640a:	429a      	cmp	r2, r3
 800640c:	d903      	bls.n	8006416 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006414:	e0e8      	b.n	80065e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	2200      	movs	r2, #0
 800641a:	461c      	mov	r4, r3
 800641c:	4615      	mov	r5, r2
 800641e:	f04f 0200 	mov.w	r2, #0
 8006422:	f04f 0300 	mov.w	r3, #0
 8006426:	022b      	lsls	r3, r5, #8
 8006428:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800642c:	0222      	lsls	r2, r4, #8
 800642e:	68f9      	ldr	r1, [r7, #12]
 8006430:	6849      	ldr	r1, [r1, #4]
 8006432:	0849      	lsrs	r1, r1, #1
 8006434:	2000      	movs	r0, #0
 8006436:	4688      	mov	r8, r1
 8006438:	4681      	mov	r9, r0
 800643a:	eb12 0a08 	adds.w	sl, r2, r8
 800643e:	eb43 0b09 	adc.w	fp, r3, r9
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	603b      	str	r3, [r7, #0]
 800644a:	607a      	str	r2, [r7, #4]
 800644c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006450:	4650      	mov	r0, sl
 8006452:	4659      	mov	r1, fp
 8006454:	f7fa fbf8 	bl	8000c48 <__aeabi_uldivmod>
 8006458:	4602      	mov	r2, r0
 800645a:	460b      	mov	r3, r1
 800645c:	4613      	mov	r3, r2
 800645e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006466:	d308      	bcc.n	800647a <UART_SetConfig+0x3de>
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800646e:	d204      	bcs.n	800647a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	60da      	str	r2, [r3, #12]
 8006478:	e0b6      	b.n	80065e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006480:	e0b2      	b.n	80065e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	69db      	ldr	r3, [r3, #28]
 8006486:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800648a:	d15e      	bne.n	800654a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800648c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006490:	2b08      	cmp	r3, #8
 8006492:	d828      	bhi.n	80064e6 <UART_SetConfig+0x44a>
 8006494:	a201      	add	r2, pc, #4	@ (adr r2, 800649c <UART_SetConfig+0x400>)
 8006496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649a:	bf00      	nop
 800649c:	080064c1 	.word	0x080064c1
 80064a0:	080064c9 	.word	0x080064c9
 80064a4:	080064d1 	.word	0x080064d1
 80064a8:	080064e7 	.word	0x080064e7
 80064ac:	080064d7 	.word	0x080064d7
 80064b0:	080064e7 	.word	0x080064e7
 80064b4:	080064e7 	.word	0x080064e7
 80064b8:	080064e7 	.word	0x080064e7
 80064bc:	080064df 	.word	0x080064df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064c0:	f7fe ff1a 	bl	80052f8 <HAL_RCC_GetPCLK1Freq>
 80064c4:	61f8      	str	r0, [r7, #28]
        break;
 80064c6:	e014      	b.n	80064f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064c8:	f7fe ff2c 	bl	8005324 <HAL_RCC_GetPCLK2Freq>
 80064cc:	61f8      	str	r0, [r7, #28]
        break;
 80064ce:	e010      	b.n	80064f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064d0:	4b4d      	ldr	r3, [pc, #308]	@ (8006608 <UART_SetConfig+0x56c>)
 80064d2:	61fb      	str	r3, [r7, #28]
        break;
 80064d4:	e00d      	b.n	80064f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064d6:	f7fe fe77 	bl	80051c8 <HAL_RCC_GetSysClockFreq>
 80064da:	61f8      	str	r0, [r7, #28]
        break;
 80064dc:	e009      	b.n	80064f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064e2:	61fb      	str	r3, [r7, #28]
        break;
 80064e4:	e005      	b.n	80064f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80064f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d077      	beq.n	80065e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	005a      	lsls	r2, r3, #1
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	085b      	lsrs	r3, r3, #1
 8006502:	441a      	add	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	fbb2 f3f3 	udiv	r3, r2, r3
 800650c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	2b0f      	cmp	r3, #15
 8006512:	d916      	bls.n	8006542 <UART_SetConfig+0x4a6>
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800651a:	d212      	bcs.n	8006542 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	b29b      	uxth	r3, r3
 8006520:	f023 030f 	bic.w	r3, r3, #15
 8006524:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	085b      	lsrs	r3, r3, #1
 800652a:	b29b      	uxth	r3, r3
 800652c:	f003 0307 	and.w	r3, r3, #7
 8006530:	b29a      	uxth	r2, r3
 8006532:	8afb      	ldrh	r3, [r7, #22]
 8006534:	4313      	orrs	r3, r2
 8006536:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	8afa      	ldrh	r2, [r7, #22]
 800653e:	60da      	str	r2, [r3, #12]
 8006540:	e052      	b.n	80065e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006548:	e04e      	b.n	80065e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800654a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800654e:	2b08      	cmp	r3, #8
 8006550:	d827      	bhi.n	80065a2 <UART_SetConfig+0x506>
 8006552:	a201      	add	r2, pc, #4	@ (adr r2, 8006558 <UART_SetConfig+0x4bc>)
 8006554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006558:	0800657d 	.word	0x0800657d
 800655c:	08006585 	.word	0x08006585
 8006560:	0800658d 	.word	0x0800658d
 8006564:	080065a3 	.word	0x080065a3
 8006568:	08006593 	.word	0x08006593
 800656c:	080065a3 	.word	0x080065a3
 8006570:	080065a3 	.word	0x080065a3
 8006574:	080065a3 	.word	0x080065a3
 8006578:	0800659b 	.word	0x0800659b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800657c:	f7fe febc 	bl	80052f8 <HAL_RCC_GetPCLK1Freq>
 8006580:	61f8      	str	r0, [r7, #28]
        break;
 8006582:	e014      	b.n	80065ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006584:	f7fe fece 	bl	8005324 <HAL_RCC_GetPCLK2Freq>
 8006588:	61f8      	str	r0, [r7, #28]
        break;
 800658a:	e010      	b.n	80065ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800658c:	4b1e      	ldr	r3, [pc, #120]	@ (8006608 <UART_SetConfig+0x56c>)
 800658e:	61fb      	str	r3, [r7, #28]
        break;
 8006590:	e00d      	b.n	80065ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006592:	f7fe fe19 	bl	80051c8 <HAL_RCC_GetSysClockFreq>
 8006596:	61f8      	str	r0, [r7, #28]
        break;
 8006598:	e009      	b.n	80065ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800659a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800659e:	61fb      	str	r3, [r7, #28]
        break;
 80065a0:	e005      	b.n	80065ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80065a2:	2300      	movs	r3, #0
 80065a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80065ac:	bf00      	nop
    }

    if (pclk != 0U)
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d019      	beq.n	80065e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	085a      	lsrs	r2, r3, #1
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	441a      	add	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	2b0f      	cmp	r3, #15
 80065cc:	d909      	bls.n	80065e2 <UART_SetConfig+0x546>
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065d4:	d205      	bcs.n	80065e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	b29a      	uxth	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	60da      	str	r2, [r3, #12]
 80065e0:	e002      	b.n	80065e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80065f4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3728      	adds	r7, #40	@ 0x28
 80065fc:	46bd      	mov	sp, r7
 80065fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006602:	bf00      	nop
 8006604:	40008000 	.word	0x40008000
 8006608:	00f42400 	.word	0x00f42400

0800660c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006618:	f003 0308 	and.w	r3, r3, #8
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00a      	beq.n	8006636 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	430a      	orrs	r2, r1
 8006634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00a      	beq.n	8006658 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	430a      	orrs	r2, r1
 8006656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800665c:	f003 0302 	and.w	r3, r3, #2
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00a      	beq.n	800667a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800667e:	f003 0304 	and.w	r3, r3, #4
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00a      	beq.n	800669c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	430a      	orrs	r2, r1
 800669a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a0:	f003 0310 	and.w	r3, r3, #16
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00a      	beq.n	80066be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c2:	f003 0320 	and.w	r3, r3, #32
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00a      	beq.n	80066e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	430a      	orrs	r2, r1
 80066de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d01a      	beq.n	8006722 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	430a      	orrs	r2, r1
 8006700:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006706:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800670a:	d10a      	bne.n	8006722 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	430a      	orrs	r2, r1
 8006742:	605a      	str	r2, [r3, #4]
  }
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b098      	sub	sp, #96	@ 0x60
 8006754:	af02      	add	r7, sp, #8
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006760:	f7fc fc48 	bl	8002ff4 <HAL_GetTick>
 8006764:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0308 	and.w	r3, r3, #8
 8006770:	2b08      	cmp	r3, #8
 8006772:	d12e      	bne.n	80067d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006774:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800677c:	2200      	movs	r2, #0
 800677e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f88c 	bl	80068a0 <UART_WaitOnFlagUntilTimeout>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d021      	beq.n	80067d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006796:	e853 3f00 	ldrex	r3, [r3]
 800679a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800679c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800679e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	461a      	mov	r2, r3
 80067aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80067ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067b4:	e841 2300 	strex	r3, r2, [r1]
 80067b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1e6      	bne.n	800678e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2220      	movs	r2, #32
 80067c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e062      	b.n	8006898 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0304 	and.w	r3, r3, #4
 80067dc:	2b04      	cmp	r3, #4
 80067de:	d149      	bne.n	8006874 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067e8:	2200      	movs	r2, #0
 80067ea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f856 	bl	80068a0 <UART_WaitOnFlagUntilTimeout>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d03c      	beq.n	8006874 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006802:	e853 3f00 	ldrex	r3, [r3]
 8006806:	623b      	str	r3, [r7, #32]
   return(result);
 8006808:	6a3b      	ldr	r3, [r7, #32]
 800680a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800680e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	461a      	mov	r2, r3
 8006816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006818:	633b      	str	r3, [r7, #48]	@ 0x30
 800681a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800681e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006820:	e841 2300 	strex	r3, r2, [r1]
 8006824:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1e6      	bne.n	80067fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	3308      	adds	r3, #8
 8006832:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	e853 3f00 	ldrex	r3, [r3]
 800683a:	60fb      	str	r3, [r7, #12]
   return(result);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f023 0301 	bic.w	r3, r3, #1
 8006842:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	3308      	adds	r3, #8
 800684a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800684c:	61fa      	str	r2, [r7, #28]
 800684e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006850:	69b9      	ldr	r1, [r7, #24]
 8006852:	69fa      	ldr	r2, [r7, #28]
 8006854:	e841 2300 	strex	r3, r2, [r1]
 8006858:	617b      	str	r3, [r7, #20]
   return(result);
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1e5      	bne.n	800682c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2220      	movs	r2, #32
 8006864:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e011      	b.n	8006898 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2220      	movs	r2, #32
 8006878:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2220      	movs	r2, #32
 800687e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3758      	adds	r7, #88	@ 0x58
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	603b      	str	r3, [r7, #0]
 80068ac:	4613      	mov	r3, r2
 80068ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068b0:	e04f      	b.n	8006952 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b8:	d04b      	beq.n	8006952 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ba:	f7fc fb9b 	bl	8002ff4 <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	69ba      	ldr	r2, [r7, #24]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d302      	bcc.n	80068d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d101      	bne.n	80068d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e04e      	b.n	8006972 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0304 	and.w	r3, r3, #4
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d037      	beq.n	8006952 <UART_WaitOnFlagUntilTimeout+0xb2>
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	2b80      	cmp	r3, #128	@ 0x80
 80068e6:	d034      	beq.n	8006952 <UART_WaitOnFlagUntilTimeout+0xb2>
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	2b40      	cmp	r3, #64	@ 0x40
 80068ec:	d031      	beq.n	8006952 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	f003 0308 	and.w	r3, r3, #8
 80068f8:	2b08      	cmp	r3, #8
 80068fa:	d110      	bne.n	800691e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2208      	movs	r2, #8
 8006902:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f000 f838 	bl	800697a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2208      	movs	r2, #8
 800690e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e029      	b.n	8006972 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	69db      	ldr	r3, [r3, #28]
 8006924:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006928:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800692c:	d111      	bne.n	8006952 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006936:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f000 f81e 	bl	800697a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2220      	movs	r2, #32
 8006942:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e00f      	b.n	8006972 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	69da      	ldr	r2, [r3, #28]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	4013      	ands	r3, r2
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	429a      	cmp	r2, r3
 8006960:	bf0c      	ite	eq
 8006962:	2301      	moveq	r3, #1
 8006964:	2300      	movne	r3, #0
 8006966:	b2db      	uxtb	r3, r3
 8006968:	461a      	mov	r2, r3
 800696a:	79fb      	ldrb	r3, [r7, #7]
 800696c:	429a      	cmp	r2, r3
 800696e:	d0a0      	beq.n	80068b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800697a:	b480      	push	{r7}
 800697c:	b095      	sub	sp, #84	@ 0x54
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800698a:	e853 3f00 	ldrex	r3, [r3]
 800698e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006992:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006996:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	461a      	mov	r2, r3
 800699e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80069a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80069a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069a8:	e841 2300 	strex	r3, r2, [r1]
 80069ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1e6      	bne.n	8006982 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3308      	adds	r3, #8
 80069ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069bc:	6a3b      	ldr	r3, [r7, #32]
 80069be:	e853 3f00 	ldrex	r3, [r3]
 80069c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	f023 0301 	bic.w	r3, r3, #1
 80069ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3308      	adds	r3, #8
 80069d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069dc:	e841 2300 	strex	r3, r2, [r1]
 80069e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1e5      	bne.n	80069b4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d118      	bne.n	8006a22 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	e853 3f00 	ldrex	r3, [r3]
 80069fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	f023 0310 	bic.w	r3, r3, #16
 8006a04:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a0e:	61bb      	str	r3, [r7, #24]
 8006a10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a12:	6979      	ldr	r1, [r7, #20]
 8006a14:	69ba      	ldr	r2, [r7, #24]
 8006a16:	e841 2300 	strex	r3, r2, [r1]
 8006a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1e6      	bne.n	80069f0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2220      	movs	r2, #32
 8006a26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006a36:	bf00      	nop
 8006a38:	3754      	adds	r7, #84	@ 0x54
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a42:	b084      	sub	sp, #16
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	f107 001c 	add.w	r0, r7, #28
 8006a50:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 fa69 	bl	8006f38 <USB_CoreReset>
 8006a66:	4603      	mov	r3, r0
 8006a68:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006a6a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d106      	bne.n	8006a80 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a76:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	639a      	str	r2, [r3, #56]	@ 0x38
 8006a7e:	e005      	b.n	8006a8c <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a84:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a98:	b004      	add	sp, #16
 8006a9a:	4770      	bx	lr

08006a9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	f023 0201 	bic.w	r2, r3, #1
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b084      	sub	sp, #16
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006aca:	2300      	movs	r3, #0
 8006acc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ada:	78fb      	ldrb	r3, [r7, #3]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d115      	bne.n	8006b0c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006aec:	200a      	movs	r0, #10
 8006aee:	f7fc fa8d 	bl	800300c <HAL_Delay>
      ms += 10U;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	330a      	adds	r3, #10
 8006af6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 fa0f 	bl	8006f1c <USB_GetMode>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d01e      	beq.n	8006b42 <USB_SetCurrentMode+0x84>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2bc7      	cmp	r3, #199	@ 0xc7
 8006b08:	d9f0      	bls.n	8006aec <USB_SetCurrentMode+0x2e>
 8006b0a:	e01a      	b.n	8006b42 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b0c:	78fb      	ldrb	r3, [r7, #3]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d115      	bne.n	8006b3e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b1e:	200a      	movs	r0, #10
 8006b20:	f7fc fa74 	bl	800300c <HAL_Delay>
      ms += 10U;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	330a      	adds	r3, #10
 8006b28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f9f6 	bl	8006f1c <USB_GetMode>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d005      	beq.n	8006b42 <USB_SetCurrentMode+0x84>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2bc7      	cmp	r3, #199	@ 0xc7
 8006b3a:	d9f0      	bls.n	8006b1e <USB_SetCurrentMode+0x60>
 8006b3c:	e001      	b.n	8006b42 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e005      	b.n	8006b4e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2bc8      	cmp	r3, #200	@ 0xc8
 8006b46:	d101      	bne.n	8006b4c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e000      	b.n	8006b4e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
	...

08006b58 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b58:	b084      	sub	sp, #16
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b086      	sub	sp, #24
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
 8006b62:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006b66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006b72:	2300      	movs	r3, #0
 8006b74:	613b      	str	r3, [r7, #16]
 8006b76:	e009      	b.n	8006b8c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	3340      	adds	r3, #64	@ 0x40
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	2200      	movs	r2, #0
 8006b84:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	613b      	str	r3, [r7, #16]
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	2b0e      	cmp	r3, #14
 8006b90:	d9f2      	bls.n	8006b78 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b92:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d11c      	bne.n	8006bd4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ba8:	f043 0302 	orr.w	r3, r3, #2
 8006bac:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bb2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	e005      	b.n	8006be0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006be6:	461a      	mov	r2, r3
 8006be8:	2300      	movs	r3, #0
 8006bea:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006bec:	2103      	movs	r1, #3
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f95a 	bl	8006ea8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006bf4:	2110      	movs	r1, #16
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 f8f6 	bl	8006de8 <USB_FlushTxFifo>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f920 	bl	8006e4c <USB_FlushRxFifo>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	2300      	movs	r3, #0
 8006c20:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c28:	461a      	mov	r2, r3
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c34:	461a      	mov	r2, r3
 8006c36:	2300      	movs	r3, #0
 8006c38:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	613b      	str	r3, [r7, #16]
 8006c3e:	e043      	b.n	8006cc8 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c56:	d118      	bne.n	8006c8a <USB_DevInit+0x132>
    {
      if (i == 0U)
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10a      	bne.n	8006c74 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006c70:	6013      	str	r3, [r2, #0]
 8006c72:	e013      	b.n	8006c9c <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c80:	461a      	mov	r2, r3
 8006c82:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006c86:	6013      	str	r3, [r2, #0]
 8006c88:	e008      	b.n	8006c9c <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	015a      	lsls	r2, r3, #5
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	4413      	add	r3, r2
 8006c92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c96:	461a      	mov	r2, r3
 8006c98:	2300      	movs	r3, #0
 8006c9a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ca8:	461a      	mov	r2, r3
 8006caa:	2300      	movs	r3, #0
 8006cac:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	015a      	lsls	r2, r3, #5
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cba:	461a      	mov	r2, r3
 8006cbc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006cc0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	613b      	str	r3, [r7, #16]
 8006cc8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006ccc:	461a      	mov	r2, r3
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d3b5      	bcc.n	8006c40 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	613b      	str	r3, [r7, #16]
 8006cd8:	e043      	b.n	8006d62 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cf0:	d118      	bne.n	8006d24 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10a      	bne.n	8006d0e <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d04:	461a      	mov	r2, r3
 8006d06:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006d0a:	6013      	str	r3, [r2, #0]
 8006d0c:	e013      	b.n	8006d36 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	015a      	lsls	r2, r3, #5
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	4413      	add	r3, r2
 8006d16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006d20:	6013      	str	r3, [r2, #0]
 8006d22:	e008      	b.n	8006d36 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d30:	461a      	mov	r2, r3
 8006d32:	2300      	movs	r3, #0
 8006d34:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	015a      	lsls	r2, r3, #5
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d42:	461a      	mov	r2, r3
 8006d44:	2300      	movs	r3, #0
 8006d46:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d54:	461a      	mov	r2, r3
 8006d56:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006d5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	613b      	str	r3, [r7, #16]
 8006d62:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006d66:	461a      	mov	r2, r3
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d3b5      	bcc.n	8006cda <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d80:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006d8e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	f043 0210 	orr.w	r2, r3, #16
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	699a      	ldr	r2, [r3, #24]
 8006da0:	4b10      	ldr	r3, [pc, #64]	@ (8006de4 <USB_DevInit+0x28c>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006da8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d005      	beq.n	8006dbc <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	f043 0208 	orr.w	r2, r3, #8
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006dbc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d107      	bne.n	8006dd4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006dcc:	f043 0304 	orr.w	r3, r3, #4
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3718      	adds	r7, #24
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006de0:	b004      	add	sp, #16
 8006de2:	4770      	bx	lr
 8006de4:	803c3800 	.word	0x803c3800

08006de8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006df2:	2300      	movs	r3, #0
 8006df4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e02:	d901      	bls.n	8006e08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e01b      	b.n	8006e40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	daf2      	bge.n	8006df6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	019b      	lsls	r3, r3, #6
 8006e18:	f043 0220 	orr.w	r2, r3, #32
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	3301      	adds	r3, #1
 8006e24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e2c:	d901      	bls.n	8006e32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e006      	b.n	8006e40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	f003 0320 	and.w	r3, r3, #32
 8006e3a:	2b20      	cmp	r3, #32
 8006e3c:	d0f0      	beq.n	8006e20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e54:	2300      	movs	r3, #0
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e64:	d901      	bls.n	8006e6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e018      	b.n	8006e9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	daf2      	bge.n	8006e58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2210      	movs	r2, #16
 8006e7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e88:	d901      	bls.n	8006e8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e006      	b.n	8006e9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	f003 0310 	and.w	r3, r3, #16
 8006e96:	2b10      	cmp	r3, #16
 8006e98:	d0f0      	beq.n	8006e7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	78fb      	ldrb	r3, [r7, #3]
 8006ec2:	68f9      	ldr	r1, [r7, #12]
 8006ec4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3714      	adds	r7, #20
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b085      	sub	sp, #20
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006ef4:	f023 0303 	bic.w	r3, r3, #3
 8006ef8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f08:	f043 0302 	orr.w	r3, r3, #2
 8006f0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3714      	adds	r7, #20
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	695b      	ldr	r3, [r3, #20]
 8006f28:	f003 0301 	and.w	r3, r3, #1
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f40:	2300      	movs	r3, #0
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	3301      	adds	r3, #1
 8006f48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f50:	d901      	bls.n	8006f56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e01b      	b.n	8006f8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	daf2      	bge.n	8006f44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	f043 0201 	orr.w	r2, r3, #1
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	3301      	adds	r3, #1
 8006f72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f7a:	d901      	bls.n	8006f80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e006      	b.n	8006f8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	f003 0301 	and.w	r3, r3, #1
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d0f0      	beq.n	8006f6e <USB_CoreReset+0x36>

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
	...

08006f9c <__NVIC_SetPriority>:
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	6039      	str	r1, [r7, #0]
 8006fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	db0a      	blt.n	8006fc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	b2da      	uxtb	r2, r3
 8006fb4:	490c      	ldr	r1, [pc, #48]	@ (8006fe8 <__NVIC_SetPriority+0x4c>)
 8006fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fba:	0112      	lsls	r2, r2, #4
 8006fbc:	b2d2      	uxtb	r2, r2
 8006fbe:	440b      	add	r3, r1
 8006fc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006fc4:	e00a      	b.n	8006fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	b2da      	uxtb	r2, r3
 8006fca:	4908      	ldr	r1, [pc, #32]	@ (8006fec <__NVIC_SetPriority+0x50>)
 8006fcc:	79fb      	ldrb	r3, [r7, #7]
 8006fce:	f003 030f 	and.w	r3, r3, #15
 8006fd2:	3b04      	subs	r3, #4
 8006fd4:	0112      	lsls	r2, r2, #4
 8006fd6:	b2d2      	uxtb	r2, r2
 8006fd8:	440b      	add	r3, r1
 8006fda:	761a      	strb	r2, [r3, #24]
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	e000e100 	.word	0xe000e100
 8006fec:	e000ed00 	.word	0xe000ed00

08006ff0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	f06f 0004 	mvn.w	r0, #4
 8006ffa:	f7ff ffcf 	bl	8006f9c <__NVIC_SetPriority>
#endif
}
 8006ffe:	bf00      	nop
 8007000:	bd80      	pop	{r7, pc}
	...

08007004 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800700a:	f3ef 8305 	mrs	r3, IPSR
 800700e:	603b      	str	r3, [r7, #0]
  return(result);
 8007010:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007012:	2b00      	cmp	r3, #0
 8007014:	d003      	beq.n	800701e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007016:	f06f 0305 	mvn.w	r3, #5
 800701a:	607b      	str	r3, [r7, #4]
 800701c:	e00c      	b.n	8007038 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800701e:	4b0a      	ldr	r3, [pc, #40]	@ (8007048 <osKernelInitialize+0x44>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d105      	bne.n	8007032 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007026:	4b08      	ldr	r3, [pc, #32]	@ (8007048 <osKernelInitialize+0x44>)
 8007028:	2201      	movs	r2, #1
 800702a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800702c:	2300      	movs	r3, #0
 800702e:	607b      	str	r3, [r7, #4]
 8007030:	e002      	b.n	8007038 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007032:	f04f 33ff 	mov.w	r3, #4294967295
 8007036:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007038:	687b      	ldr	r3, [r7, #4]
}
 800703a:	4618      	mov	r0, r3
 800703c:	370c      	adds	r7, #12
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	2000a548 	.word	0x2000a548

0800704c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007052:	f3ef 8305 	mrs	r3, IPSR
 8007056:	603b      	str	r3, [r7, #0]
  return(result);
 8007058:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800705a:	2b00      	cmp	r3, #0
 800705c:	d003      	beq.n	8007066 <osKernelStart+0x1a>
    stat = osErrorISR;
 800705e:	f06f 0305 	mvn.w	r3, #5
 8007062:	607b      	str	r3, [r7, #4]
 8007064:	e010      	b.n	8007088 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007066:	4b0b      	ldr	r3, [pc, #44]	@ (8007094 <osKernelStart+0x48>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d109      	bne.n	8007082 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800706e:	f7ff ffbf 	bl	8006ff0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007072:	4b08      	ldr	r3, [pc, #32]	@ (8007094 <osKernelStart+0x48>)
 8007074:	2202      	movs	r2, #2
 8007076:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007078:	f001 f87a 	bl	8008170 <vTaskStartScheduler>
      stat = osOK;
 800707c:	2300      	movs	r3, #0
 800707e:	607b      	str	r3, [r7, #4]
 8007080:	e002      	b.n	8007088 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007082:	f04f 33ff 	mov.w	r3, #4294967295
 8007086:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007088:	687b      	ldr	r3, [r7, #4]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	2000a548 	.word	0x2000a548

08007098 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007098:	b580      	push	{r7, lr}
 800709a:	b08e      	sub	sp, #56	@ 0x38
 800709c:	af04      	add	r7, sp, #16
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80070a4:	2300      	movs	r3, #0
 80070a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070a8:	f3ef 8305 	mrs	r3, IPSR
 80070ac:	617b      	str	r3, [r7, #20]
  return(result);
 80070ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d17e      	bne.n	80071b2 <osThreadNew+0x11a>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d07b      	beq.n	80071b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80070ba:	2380      	movs	r3, #128	@ 0x80
 80070bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80070be:	2318      	movs	r3, #24
 80070c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80070c2:	2300      	movs	r3, #0
 80070c4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80070c6:	f04f 33ff 	mov.w	r3, #4294967295
 80070ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d045      	beq.n	800715e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d002      	beq.n	80070e0 <osThreadNew+0x48>
        name = attr->name;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	699b      	ldr	r3, [r3, #24]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d008      	beq.n	8007106 <osThreadNew+0x6e>
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	2b38      	cmp	r3, #56	@ 0x38
 80070f8:	d805      	bhi.n	8007106 <osThreadNew+0x6e>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <osThreadNew+0x72>
        return (NULL);
 8007106:	2300      	movs	r3, #0
 8007108:	e054      	b.n	80071b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	089b      	lsrs	r3, r3, #2
 8007118:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00e      	beq.n	8007140 <osThreadNew+0xa8>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	2b5b      	cmp	r3, #91	@ 0x5b
 8007128:	d90a      	bls.n	8007140 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800712e:	2b00      	cmp	r3, #0
 8007130:	d006      	beq.n	8007140 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d002      	beq.n	8007140 <osThreadNew+0xa8>
        mem = 1;
 800713a:	2301      	movs	r3, #1
 800713c:	61bb      	str	r3, [r7, #24]
 800713e:	e010      	b.n	8007162 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10c      	bne.n	8007162 <osThreadNew+0xca>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d108      	bne.n	8007162 <osThreadNew+0xca>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d104      	bne.n	8007162 <osThreadNew+0xca>
          mem = 0;
 8007158:	2300      	movs	r3, #0
 800715a:	61bb      	str	r3, [r7, #24]
 800715c:	e001      	b.n	8007162 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800715e:	2300      	movs	r3, #0
 8007160:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d110      	bne.n	800718a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007170:	9202      	str	r2, [sp, #8]
 8007172:	9301      	str	r3, [sp, #4]
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	6a3a      	ldr	r2, [r7, #32]
 800717c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f000 fe1a 	bl	8007db8 <xTaskCreateStatic>
 8007184:	4603      	mov	r3, r0
 8007186:	613b      	str	r3, [r7, #16]
 8007188:	e013      	b.n	80071b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d110      	bne.n	80071b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007190:	6a3b      	ldr	r3, [r7, #32]
 8007192:	b29a      	uxth	r2, r3
 8007194:	f107 0310 	add.w	r3, r7, #16
 8007198:	9301      	str	r3, [sp, #4]
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f000 fe68 	bl	8007e78 <xTaskCreate>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d001      	beq.n	80071b2 <osThreadNew+0x11a>
            hTask = NULL;
 80071ae:	2300      	movs	r3, #0
 80071b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80071b2:	693b      	ldr	r3, [r7, #16]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3728      	adds	r7, #40	@ 0x28
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071c4:	f3ef 8305 	mrs	r3, IPSR
 80071c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80071ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d003      	beq.n	80071d8 <osDelay+0x1c>
    stat = osErrorISR;
 80071d0:	f06f 0305 	mvn.w	r3, #5
 80071d4:	60fb      	str	r3, [r7, #12]
 80071d6:	e007      	b.n	80071e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80071d8:	2300      	movs	r3, #0
 80071da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d002      	beq.n	80071e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 ff8e 	bl	8008104 <vTaskDelay>
    }
  }

  return (stat);
 80071e8:	68fb      	ldr	r3, [r7, #12]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
	...

080071f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	4a07      	ldr	r2, [pc, #28]	@ (8007220 <vApplicationGetIdleTaskMemory+0x2c>)
 8007204:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	4a06      	ldr	r2, [pc, #24]	@ (8007224 <vApplicationGetIdleTaskMemory+0x30>)
 800720a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2280      	movs	r2, #128	@ 0x80
 8007210:	601a      	str	r2, [r3, #0]
}
 8007212:	bf00      	nop
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	2000a54c 	.word	0x2000a54c
 8007224:	2000a5a8 	.word	0x2000a5a8

08007228 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	4a07      	ldr	r2, [pc, #28]	@ (8007254 <vApplicationGetTimerTaskMemory+0x2c>)
 8007238:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	4a06      	ldr	r2, [pc, #24]	@ (8007258 <vApplicationGetTimerTaskMemory+0x30>)
 800723e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007246:	601a      	str	r2, [r3, #0]
}
 8007248:	bf00      	nop
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	2000a7a8 	.word	0x2000a7a8
 8007258:	2000a804 	.word	0x2000a804

0800725c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f103 0208 	add.w	r2, r3, #8
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f04f 32ff 	mov.w	r2, #4294967295
 8007274:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f103 0208 	add.w	r2, r3, #8
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f103 0208 	add.w	r2, r3, #8
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007290:	bf00      	nop
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80072aa:	bf00      	nop
 80072ac:	370c      	adds	r7, #12
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072b6:	b480      	push	{r7}
 80072b8:	b085      	sub	sp, #20
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	689a      	ldr	r2, [r3, #8]
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	683a      	ldr	r2, [r7, #0]
 80072da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	683a      	ldr	r2, [r7, #0]
 80072e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	1c5a      	adds	r2, r3, #1
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	601a      	str	r2, [r3, #0]
}
 80072f2:	bf00      	nop
 80072f4:	3714      	adds	r7, #20
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr

080072fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072fe:	b480      	push	{r7}
 8007300:	b085      	sub	sp, #20
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007314:	d103      	bne.n	800731e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	60fb      	str	r3, [r7, #12]
 800731c:	e00c      	b.n	8007338 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	3308      	adds	r3, #8
 8007322:	60fb      	str	r3, [r7, #12]
 8007324:	e002      	b.n	800732c <vListInsert+0x2e>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	60fb      	str	r3, [r7, #12]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68ba      	ldr	r2, [r7, #8]
 8007334:	429a      	cmp	r2, r3
 8007336:	d2f6      	bcs.n	8007326 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	685a      	ldr	r2, [r3, #4]
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	683a      	ldr	r2, [r7, #0]
 8007346:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	683a      	ldr	r2, [r7, #0]
 8007352:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	1c5a      	adds	r2, r3, #1
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	601a      	str	r2, [r3, #0]
}
 8007364:	bf00      	nop
 8007366:	3714      	adds	r7, #20
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	6892      	ldr	r2, [r2, #8]
 8007386:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	6852      	ldr	r2, [r2, #4]
 8007390:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	429a      	cmp	r2, r3
 800739a:	d103      	bne.n	80073a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	689a      	ldr	r2, [r3, #8]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	1e5a      	subs	r2, r3, #1
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10b      	bne.n	80073f0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80073d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073dc:	f383 8811 	msr	BASEPRI, r3
 80073e0:	f3bf 8f6f 	isb	sy
 80073e4:	f3bf 8f4f 	dsb	sy
 80073e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80073ea:	bf00      	nop
 80073ec:	bf00      	nop
 80073ee:	e7fd      	b.n	80073ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80073f0:	f002 f87a 	bl	80094e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073fc:	68f9      	ldr	r1, [r7, #12]
 80073fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007400:	fb01 f303 	mul.w	r3, r1, r3
 8007404:	441a      	add	r2, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007420:	3b01      	subs	r3, #1
 8007422:	68f9      	ldr	r1, [r7, #12]
 8007424:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007426:	fb01 f303 	mul.w	r3, r1, r3
 800742a:	441a      	add	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	22ff      	movs	r2, #255	@ 0xff
 8007434:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	22ff      	movs	r2, #255	@ 0xff
 800743c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d114      	bne.n	8007470 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d01a      	beq.n	8007484 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	3310      	adds	r3, #16
 8007452:	4618      	mov	r0, r3
 8007454:	f001 f91a 	bl	800868c <xTaskRemoveFromEventList>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d012      	beq.n	8007484 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800745e:	4b0d      	ldr	r3, [pc, #52]	@ (8007494 <xQueueGenericReset+0xd0>)
 8007460:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007464:	601a      	str	r2, [r3, #0]
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	e009      	b.n	8007484 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	3310      	adds	r3, #16
 8007474:	4618      	mov	r0, r3
 8007476:	f7ff fef1 	bl	800725c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	3324      	adds	r3, #36	@ 0x24
 800747e:	4618      	mov	r0, r3
 8007480:	f7ff feec 	bl	800725c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007484:	f002 f862 	bl	800954c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007488:	2301      	movs	r3, #1
}
 800748a:	4618      	mov	r0, r3
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	e000ed04 	.word	0xe000ed04

08007498 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007498:	b580      	push	{r7, lr}
 800749a:	b08e      	sub	sp, #56	@ 0x38
 800749c:	af02      	add	r7, sp, #8
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
 80074a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d10b      	bne.n	80074c4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80074ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b0:	f383 8811 	msr	BASEPRI, r3
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80074be:	bf00      	nop
 80074c0:	bf00      	nop
 80074c2:	e7fd      	b.n	80074c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10b      	bne.n	80074e2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80074ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80074dc:	bf00      	nop
 80074de:	bf00      	nop
 80074e0:	e7fd      	b.n	80074de <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d002      	beq.n	80074ee <xQueueGenericCreateStatic+0x56>
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d001      	beq.n	80074f2 <xQueueGenericCreateStatic+0x5a>
 80074ee:	2301      	movs	r3, #1
 80074f0:	e000      	b.n	80074f4 <xQueueGenericCreateStatic+0x5c>
 80074f2:	2300      	movs	r3, #0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10b      	bne.n	8007510 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80074f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074fc:	f383 8811 	msr	BASEPRI, r3
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	623b      	str	r3, [r7, #32]
}
 800750a:	bf00      	nop
 800750c:	bf00      	nop
 800750e:	e7fd      	b.n	800750c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d102      	bne.n	800751c <xQueueGenericCreateStatic+0x84>
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d101      	bne.n	8007520 <xQueueGenericCreateStatic+0x88>
 800751c:	2301      	movs	r3, #1
 800751e:	e000      	b.n	8007522 <xQueueGenericCreateStatic+0x8a>
 8007520:	2300      	movs	r3, #0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10b      	bne.n	800753e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800752a:	f383 8811 	msr	BASEPRI, r3
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	61fb      	str	r3, [r7, #28]
}
 8007538:	bf00      	nop
 800753a:	bf00      	nop
 800753c:	e7fd      	b.n	800753a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800753e:	2350      	movs	r3, #80	@ 0x50
 8007540:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	2b50      	cmp	r3, #80	@ 0x50
 8007546:	d00b      	beq.n	8007560 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800754c:	f383 8811 	msr	BASEPRI, r3
 8007550:	f3bf 8f6f 	isb	sy
 8007554:	f3bf 8f4f 	dsb	sy
 8007558:	61bb      	str	r3, [r7, #24]
}
 800755a:	bf00      	nop
 800755c:	bf00      	nop
 800755e:	e7fd      	b.n	800755c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007560:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00d      	beq.n	8007588 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800756c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800756e:	2201      	movs	r2, #1
 8007570:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007574:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	4613      	mov	r3, r2
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	68b9      	ldr	r1, [r7, #8]
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f000 f805 	bl	8007592 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800758a:	4618      	mov	r0, r3
 800758c:	3730      	adds	r7, #48	@ 0x30
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b084      	sub	sp, #16
 8007596:	af00      	add	r7, sp, #0
 8007598:	60f8      	str	r0, [r7, #12]
 800759a:	60b9      	str	r1, [r7, #8]
 800759c:	607a      	str	r2, [r7, #4]
 800759e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d103      	bne.n	80075ae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	69ba      	ldr	r2, [r7, #24]
 80075aa:	601a      	str	r2, [r3, #0]
 80075ac:	e002      	b.n	80075b4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80075c0:	2101      	movs	r1, #1
 80075c2:	69b8      	ldr	r0, [r7, #24]
 80075c4:	f7ff fefe 	bl	80073c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	78fa      	ldrb	r2, [r7, #3]
 80075cc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80075d0:	bf00      	nop
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b08e      	sub	sp, #56	@ 0x38
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
 80075e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80075e6:	2300      	movs	r3, #0
 80075e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80075ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10b      	bne.n	800760c <xQueueGenericSend+0x34>
	__asm volatile
 80075f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007606:	bf00      	nop
 8007608:	bf00      	nop
 800760a:	e7fd      	b.n	8007608 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d103      	bne.n	800761a <xQueueGenericSend+0x42>
 8007612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <xQueueGenericSend+0x46>
 800761a:	2301      	movs	r3, #1
 800761c:	e000      	b.n	8007620 <xQueueGenericSend+0x48>
 800761e:	2300      	movs	r3, #0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d10b      	bne.n	800763c <xQueueGenericSend+0x64>
	__asm volatile
 8007624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007628:	f383 8811 	msr	BASEPRI, r3
 800762c:	f3bf 8f6f 	isb	sy
 8007630:	f3bf 8f4f 	dsb	sy
 8007634:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007636:	bf00      	nop
 8007638:	bf00      	nop
 800763a:	e7fd      	b.n	8007638 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	2b02      	cmp	r3, #2
 8007640:	d103      	bne.n	800764a <xQueueGenericSend+0x72>
 8007642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007646:	2b01      	cmp	r3, #1
 8007648:	d101      	bne.n	800764e <xQueueGenericSend+0x76>
 800764a:	2301      	movs	r3, #1
 800764c:	e000      	b.n	8007650 <xQueueGenericSend+0x78>
 800764e:	2300      	movs	r3, #0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10b      	bne.n	800766c <xQueueGenericSend+0x94>
	__asm volatile
 8007654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007658:	f383 8811 	msr	BASEPRI, r3
 800765c:	f3bf 8f6f 	isb	sy
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	623b      	str	r3, [r7, #32]
}
 8007666:	bf00      	nop
 8007668:	bf00      	nop
 800766a:	e7fd      	b.n	8007668 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800766c:	f001 f9ce 	bl	8008a0c <xTaskGetSchedulerState>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d102      	bne.n	800767c <xQueueGenericSend+0xa4>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d101      	bne.n	8007680 <xQueueGenericSend+0xa8>
 800767c:	2301      	movs	r3, #1
 800767e:	e000      	b.n	8007682 <xQueueGenericSend+0xaa>
 8007680:	2300      	movs	r3, #0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10b      	bne.n	800769e <xQueueGenericSend+0xc6>
	__asm volatile
 8007686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800768a:	f383 8811 	msr	BASEPRI, r3
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	61fb      	str	r3, [r7, #28]
}
 8007698:	bf00      	nop
 800769a:	bf00      	nop
 800769c:	e7fd      	b.n	800769a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800769e:	f001 ff23 	bl	80094e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80076a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d302      	bcc.n	80076b4 <xQueueGenericSend+0xdc>
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d129      	bne.n	8007708 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80076b4:	683a      	ldr	r2, [r7, #0]
 80076b6:	68b9      	ldr	r1, [r7, #8]
 80076b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076ba:	f000 fa0f 	bl	8007adc <prvCopyDataToQueue>
 80076be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d010      	beq.n	80076ea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ca:	3324      	adds	r3, #36	@ 0x24
 80076cc:	4618      	mov	r0, r3
 80076ce:	f000 ffdd 	bl	800868c <xTaskRemoveFromEventList>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d013      	beq.n	8007700 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80076d8:	4b3f      	ldr	r3, [pc, #252]	@ (80077d8 <xQueueGenericSend+0x200>)
 80076da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076de:	601a      	str	r2, [r3, #0]
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	e00a      	b.n	8007700 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80076ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d007      	beq.n	8007700 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80076f0:	4b39      	ldr	r3, [pc, #228]	@ (80077d8 <xQueueGenericSend+0x200>)
 80076f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076f6:	601a      	str	r2, [r3, #0]
 80076f8:	f3bf 8f4f 	dsb	sy
 80076fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007700:	f001 ff24 	bl	800954c <vPortExitCritical>
				return pdPASS;
 8007704:	2301      	movs	r3, #1
 8007706:	e063      	b.n	80077d0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d103      	bne.n	8007716 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800770e:	f001 ff1d 	bl	800954c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007712:	2300      	movs	r3, #0
 8007714:	e05c      	b.n	80077d0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007718:	2b00      	cmp	r3, #0
 800771a:	d106      	bne.n	800772a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800771c:	f107 0314 	add.w	r3, r7, #20
 8007720:	4618      	mov	r0, r3
 8007722:	f001 f817 	bl	8008754 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007726:	2301      	movs	r3, #1
 8007728:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800772a:	f001 ff0f 	bl	800954c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800772e:	f000 fd87 	bl	8008240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007732:	f001 fed9 	bl	80094e8 <vPortEnterCritical>
 8007736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007738:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800773c:	b25b      	sxtb	r3, r3
 800773e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007742:	d103      	bne.n	800774c <xQueueGenericSend+0x174>
 8007744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007746:	2200      	movs	r2, #0
 8007748:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800774c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007752:	b25b      	sxtb	r3, r3
 8007754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007758:	d103      	bne.n	8007762 <xQueueGenericSend+0x18a>
 800775a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775c:	2200      	movs	r2, #0
 800775e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007762:	f001 fef3 	bl	800954c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007766:	1d3a      	adds	r2, r7, #4
 8007768:	f107 0314 	add.w	r3, r7, #20
 800776c:	4611      	mov	r1, r2
 800776e:	4618      	mov	r0, r3
 8007770:	f001 f806 	bl	8008780 <xTaskCheckForTimeOut>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d124      	bne.n	80077c4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800777a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800777c:	f000 faa6 	bl	8007ccc <prvIsQueueFull>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d018      	beq.n	80077b8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007788:	3310      	adds	r3, #16
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	4611      	mov	r1, r2
 800778e:	4618      	mov	r0, r3
 8007790:	f000 ff2a 	bl	80085e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007794:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007796:	f000 fa31 	bl	8007bfc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800779a:	f000 fd5f 	bl	800825c <xTaskResumeAll>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f47f af7c 	bne.w	800769e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80077a6:	4b0c      	ldr	r3, [pc, #48]	@ (80077d8 <xQueueGenericSend+0x200>)
 80077a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077ac:	601a      	str	r2, [r3, #0]
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	e772      	b.n	800769e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80077b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80077ba:	f000 fa1f 	bl	8007bfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077be:	f000 fd4d 	bl	800825c <xTaskResumeAll>
 80077c2:	e76c      	b.n	800769e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80077c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80077c6:	f000 fa19 	bl	8007bfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077ca:	f000 fd47 	bl	800825c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80077ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3738      	adds	r7, #56	@ 0x38
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	e000ed04 	.word	0xe000ed04

080077dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b090      	sub	sp, #64	@ 0x40
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
 80077e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80077ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10b      	bne.n	800780c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80077f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f8:	f383 8811 	msr	BASEPRI, r3
 80077fc:	f3bf 8f6f 	isb	sy
 8007800:	f3bf 8f4f 	dsb	sy
 8007804:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007806:	bf00      	nop
 8007808:	bf00      	nop
 800780a:	e7fd      	b.n	8007808 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d103      	bne.n	800781a <xQueueGenericSendFromISR+0x3e>
 8007812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <xQueueGenericSendFromISR+0x42>
 800781a:	2301      	movs	r3, #1
 800781c:	e000      	b.n	8007820 <xQueueGenericSendFromISR+0x44>
 800781e:	2300      	movs	r3, #0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10b      	bne.n	800783c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007828:	f383 8811 	msr	BASEPRI, r3
 800782c:	f3bf 8f6f 	isb	sy
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007836:	bf00      	nop
 8007838:	bf00      	nop
 800783a:	e7fd      	b.n	8007838 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	2b02      	cmp	r3, #2
 8007840:	d103      	bne.n	800784a <xQueueGenericSendFromISR+0x6e>
 8007842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007846:	2b01      	cmp	r3, #1
 8007848:	d101      	bne.n	800784e <xQueueGenericSendFromISR+0x72>
 800784a:	2301      	movs	r3, #1
 800784c:	e000      	b.n	8007850 <xQueueGenericSendFromISR+0x74>
 800784e:	2300      	movs	r3, #0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d10b      	bne.n	800786c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	623b      	str	r3, [r7, #32]
}
 8007866:	bf00      	nop
 8007868:	bf00      	nop
 800786a:	e7fd      	b.n	8007868 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800786c:	f001 ff1c 	bl	80096a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007870:	f3ef 8211 	mrs	r2, BASEPRI
 8007874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007878:	f383 8811 	msr	BASEPRI, r3
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	61fa      	str	r2, [r7, #28]
 8007886:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007888:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800788a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800788c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800788e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007894:	429a      	cmp	r2, r3
 8007896:	d302      	bcc.n	800789e <xQueueGenericSendFromISR+0xc2>
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	2b02      	cmp	r3, #2
 800789c:	d12f      	bne.n	80078fe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800789e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078ae:	683a      	ldr	r2, [r7, #0]
 80078b0:	68b9      	ldr	r1, [r7, #8]
 80078b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80078b4:	f000 f912 	bl	8007adc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80078b8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80078bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c0:	d112      	bne.n	80078e8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d016      	beq.n	80078f8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078cc:	3324      	adds	r3, #36	@ 0x24
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 fedc 	bl	800868c <xTaskRemoveFromEventList>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00e      	beq.n	80078f8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00b      	beq.n	80078f8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	601a      	str	r2, [r3, #0]
 80078e6:	e007      	b.n	80078f8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80078e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80078ec:	3301      	adds	r3, #1
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	b25a      	sxtb	r2, r3
 80078f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80078f8:	2301      	movs	r3, #1
 80078fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80078fc:	e001      	b.n	8007902 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80078fe:	2300      	movs	r3, #0
 8007900:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007904:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800790c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800790e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007910:	4618      	mov	r0, r3
 8007912:	3740      	adds	r7, #64	@ 0x40
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b08c      	sub	sp, #48	@ 0x30
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007924:	2300      	movs	r3, #0
 8007926:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800792c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10b      	bne.n	800794a <xQueueReceive+0x32>
	__asm volatile
 8007932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007936:	f383 8811 	msr	BASEPRI, r3
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	623b      	str	r3, [r7, #32]
}
 8007944:	bf00      	nop
 8007946:	bf00      	nop
 8007948:	e7fd      	b.n	8007946 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d103      	bne.n	8007958 <xQueueReceive+0x40>
 8007950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007954:	2b00      	cmp	r3, #0
 8007956:	d101      	bne.n	800795c <xQueueReceive+0x44>
 8007958:	2301      	movs	r3, #1
 800795a:	e000      	b.n	800795e <xQueueReceive+0x46>
 800795c:	2300      	movs	r3, #0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10b      	bne.n	800797a <xQueueReceive+0x62>
	__asm volatile
 8007962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	61fb      	str	r3, [r7, #28]
}
 8007974:	bf00      	nop
 8007976:	bf00      	nop
 8007978:	e7fd      	b.n	8007976 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800797a:	f001 f847 	bl	8008a0c <xTaskGetSchedulerState>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d102      	bne.n	800798a <xQueueReceive+0x72>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <xQueueReceive+0x76>
 800798a:	2301      	movs	r3, #1
 800798c:	e000      	b.n	8007990 <xQueueReceive+0x78>
 800798e:	2300      	movs	r3, #0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10b      	bne.n	80079ac <xQueueReceive+0x94>
	__asm volatile
 8007994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007998:	f383 8811 	msr	BASEPRI, r3
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	61bb      	str	r3, [r7, #24]
}
 80079a6:	bf00      	nop
 80079a8:	bf00      	nop
 80079aa:	e7fd      	b.n	80079a8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079ac:	f001 fd9c 	bl	80094e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079b4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d01f      	beq.n	80079fc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80079bc:	68b9      	ldr	r1, [r7, #8]
 80079be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079c0:	f000 f8f6 	bl	8007bb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80079c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c6:	1e5a      	subs	r2, r3, #1
 80079c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00f      	beq.n	80079f4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d6:	3310      	adds	r3, #16
 80079d8:	4618      	mov	r0, r3
 80079da:	f000 fe57 	bl	800868c <xTaskRemoveFromEventList>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d007      	beq.n	80079f4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80079e4:	4b3c      	ldr	r3, [pc, #240]	@ (8007ad8 <xQueueReceive+0x1c0>)
 80079e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079ea:	601a      	str	r2, [r3, #0]
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80079f4:	f001 fdaa 	bl	800954c <vPortExitCritical>
				return pdPASS;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e069      	b.n	8007ad0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d103      	bne.n	8007a0a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a02:	f001 fda3 	bl	800954c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a06:	2300      	movs	r3, #0
 8007a08:	e062      	b.n	8007ad0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d106      	bne.n	8007a1e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a10:	f107 0310 	add.w	r3, r7, #16
 8007a14:	4618      	mov	r0, r3
 8007a16:	f000 fe9d 	bl	8008754 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a1e:	f001 fd95 	bl	800954c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a22:	f000 fc0d 	bl	8008240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a26:	f001 fd5f 	bl	80094e8 <vPortEnterCritical>
 8007a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a30:	b25b      	sxtb	r3, r3
 8007a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a36:	d103      	bne.n	8007a40 <xQueueReceive+0x128>
 8007a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a46:	b25b      	sxtb	r3, r3
 8007a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a4c:	d103      	bne.n	8007a56 <xQueueReceive+0x13e>
 8007a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a50:	2200      	movs	r2, #0
 8007a52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a56:	f001 fd79 	bl	800954c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a5a:	1d3a      	adds	r2, r7, #4
 8007a5c:	f107 0310 	add.w	r3, r7, #16
 8007a60:	4611      	mov	r1, r2
 8007a62:	4618      	mov	r0, r3
 8007a64:	f000 fe8c 	bl	8008780 <xTaskCheckForTimeOut>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d123      	bne.n	8007ab6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a70:	f000 f916 	bl	8007ca0 <prvIsQueueEmpty>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d017      	beq.n	8007aaa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a7c:	3324      	adds	r3, #36	@ 0x24
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	4611      	mov	r1, r2
 8007a82:	4618      	mov	r0, r3
 8007a84:	f000 fdb0 	bl	80085e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a8a:	f000 f8b7 	bl	8007bfc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a8e:	f000 fbe5 	bl	800825c <xTaskResumeAll>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d189      	bne.n	80079ac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007a98:	4b0f      	ldr	r3, [pc, #60]	@ (8007ad8 <xQueueReceive+0x1c0>)
 8007a9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	e780      	b.n	80079ac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007aaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007aac:	f000 f8a6 	bl	8007bfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ab0:	f000 fbd4 	bl	800825c <xTaskResumeAll>
 8007ab4:	e77a      	b.n	80079ac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007ab6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ab8:	f000 f8a0 	bl	8007bfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007abc:	f000 fbce 	bl	800825c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ac0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ac2:	f000 f8ed 	bl	8007ca0 <prvIsQueueEmpty>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f43f af6f 	beq.w	80079ac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007ace:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3730      	adds	r7, #48	@ 0x30
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	e000ed04 	.word	0xe000ed04

08007adc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b086      	sub	sp, #24
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007af0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d10d      	bne.n	8007b16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d14d      	bne.n	8007b9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	4618      	mov	r0, r3
 8007b08:	f000 ff9e 	bl	8008a48 <xTaskPriorityDisinherit>
 8007b0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	609a      	str	r2, [r3, #8]
 8007b14:	e043      	b.n	8007b9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d119      	bne.n	8007b50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6858      	ldr	r0, [r3, #4]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b24:	461a      	mov	r2, r3
 8007b26:	68b9      	ldr	r1, [r7, #8]
 8007b28:	f002 fe03 	bl	800a732 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	685a      	ldr	r2, [r3, #4]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b34:	441a      	add	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	685a      	ldr	r2, [r3, #4]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d32b      	bcc.n	8007b9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	605a      	str	r2, [r3, #4]
 8007b4e:	e026      	b.n	8007b9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	68d8      	ldr	r0, [r3, #12]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b58:	461a      	mov	r2, r3
 8007b5a:	68b9      	ldr	r1, [r7, #8]
 8007b5c:	f002 fde9 	bl	800a732 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	68da      	ldr	r2, [r3, #12]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b68:	425b      	negs	r3, r3
 8007b6a:	441a      	add	r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	68da      	ldr	r2, [r3, #12]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d207      	bcs.n	8007b8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	689a      	ldr	r2, [r3, #8]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b84:	425b      	negs	r3, r3
 8007b86:	441a      	add	r2, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d105      	bne.n	8007b9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d002      	beq.n	8007b9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	1c5a      	adds	r2, r3, #1
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007ba6:	697b      	ldr	r3, [r7, #20]
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3718      	adds	r7, #24
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d018      	beq.n	8007bf4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	68da      	ldr	r2, [r3, #12]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bca:	441a      	add	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	68da      	ldr	r2, [r3, #12]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d303      	bcc.n	8007be4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	68d9      	ldr	r1, [r3, #12]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bec:	461a      	mov	r2, r3
 8007bee:	6838      	ldr	r0, [r7, #0]
 8007bf0:	f002 fd9f 	bl	800a732 <memcpy>
	}
}
 8007bf4:	bf00      	nop
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007c04:	f001 fc70 	bl	80094e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c10:	e011      	b.n	8007c36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d012      	beq.n	8007c40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	3324      	adds	r3, #36	@ 0x24
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f000 fd34 	bl	800868c <xTaskRemoveFromEventList>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d001      	beq.n	8007c2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007c2a:	f000 fe0d 	bl	8008848 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007c2e:	7bfb      	ldrb	r3, [r7, #15]
 8007c30:	3b01      	subs	r3, #1
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	dce9      	bgt.n	8007c12 <prvUnlockQueue+0x16>
 8007c3e:	e000      	b.n	8007c42 <prvUnlockQueue+0x46>
					break;
 8007c40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	22ff      	movs	r2, #255	@ 0xff
 8007c46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007c4a:	f001 fc7f 	bl	800954c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007c4e:	f001 fc4b 	bl	80094e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c5a:	e011      	b.n	8007c80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d012      	beq.n	8007c8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	3310      	adds	r3, #16
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f000 fd0f 	bl	800868c <xTaskRemoveFromEventList>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d001      	beq.n	8007c78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007c74:	f000 fde8 	bl	8008848 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007c78:	7bbb      	ldrb	r3, [r7, #14]
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	dce9      	bgt.n	8007c5c <prvUnlockQueue+0x60>
 8007c88:	e000      	b.n	8007c8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007c8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	22ff      	movs	r2, #255	@ 0xff
 8007c90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007c94:	f001 fc5a 	bl	800954c <vPortExitCritical>
}
 8007c98:	bf00      	nop
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ca8:	f001 fc1e 	bl	80094e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d102      	bne.n	8007cba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	60fb      	str	r3, [r7, #12]
 8007cb8:	e001      	b.n	8007cbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007cbe:	f001 fc45 	bl	800954c <vPortExitCritical>

	return xReturn;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007cd4:	f001 fc08 	bl	80094e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d102      	bne.n	8007cea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	60fb      	str	r3, [r7, #12]
 8007ce8:	e001      	b.n	8007cee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007cea:	2300      	movs	r3, #0
 8007cec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007cee:	f001 fc2d 	bl	800954c <vPortExitCritical>

	return xReturn;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3710      	adds	r7, #16
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d06:	2300      	movs	r3, #0
 8007d08:	60fb      	str	r3, [r7, #12]
 8007d0a:	e014      	b.n	8007d36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007d0c:	4a0f      	ldr	r2, [pc, #60]	@ (8007d4c <vQueueAddToRegistry+0x50>)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10b      	bne.n	8007d30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007d18:	490c      	ldr	r1, [pc, #48]	@ (8007d4c <vQueueAddToRegistry+0x50>)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	683a      	ldr	r2, [r7, #0]
 8007d1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007d22:	4a0a      	ldr	r2, [pc, #40]	@ (8007d4c <vQueueAddToRegistry+0x50>)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	00db      	lsls	r3, r3, #3
 8007d28:	4413      	add	r3, r2
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007d2e:	e006      	b.n	8007d3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	3301      	adds	r3, #1
 8007d34:	60fb      	str	r3, [r7, #12]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2b07      	cmp	r3, #7
 8007d3a:	d9e7      	bls.n	8007d0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007d3c:	bf00      	nop
 8007d3e:	bf00      	nop
 8007d40:	3714      	adds	r7, #20
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	2000ac04 	.word	0x2000ac04

08007d50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007d60:	f001 fbc2 	bl	80094e8 <vPortEnterCritical>
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d6a:	b25b      	sxtb	r3, r3
 8007d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d70:	d103      	bne.n	8007d7a <vQueueWaitForMessageRestricted+0x2a>
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d80:	b25b      	sxtb	r3, r3
 8007d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d86:	d103      	bne.n	8007d90 <vQueueWaitForMessageRestricted+0x40>
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d90:	f001 fbdc 	bl	800954c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d106      	bne.n	8007daa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	3324      	adds	r3, #36	@ 0x24
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	68b9      	ldr	r1, [r7, #8]
 8007da4:	4618      	mov	r0, r3
 8007da6:	f000 fc45 	bl	8008634 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007daa:	6978      	ldr	r0, [r7, #20]
 8007dac:	f7ff ff26 	bl	8007bfc <prvUnlockQueue>
	}
 8007db0:	bf00      	nop
 8007db2:	3718      	adds	r7, #24
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b08e      	sub	sp, #56	@ 0x38
 8007dbc:	af04      	add	r7, sp, #16
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
 8007dc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10b      	bne.n	8007de4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd0:	f383 8811 	msr	BASEPRI, r3
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	623b      	str	r3, [r7, #32]
}
 8007dde:	bf00      	nop
 8007de0:	bf00      	nop
 8007de2:	e7fd      	b.n	8007de0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10b      	bne.n	8007e02 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dee:	f383 8811 	msr	BASEPRI, r3
 8007df2:	f3bf 8f6f 	isb	sy
 8007df6:	f3bf 8f4f 	dsb	sy
 8007dfa:	61fb      	str	r3, [r7, #28]
}
 8007dfc:	bf00      	nop
 8007dfe:	bf00      	nop
 8007e00:	e7fd      	b.n	8007dfe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e02:	235c      	movs	r3, #92	@ 0x5c
 8007e04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	2b5c      	cmp	r3, #92	@ 0x5c
 8007e0a:	d00b      	beq.n	8007e24 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	61bb      	str	r3, [r7, #24]
}
 8007e1e:	bf00      	nop
 8007e20:	bf00      	nop
 8007e22:	e7fd      	b.n	8007e20 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007e24:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d01e      	beq.n	8007e6a <xTaskCreateStatic+0xb2>
 8007e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d01b      	beq.n	8007e6a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e34:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e3a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e3e:	2202      	movs	r2, #2
 8007e40:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e44:	2300      	movs	r3, #0
 8007e46:	9303      	str	r3, [sp, #12]
 8007e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4a:	9302      	str	r3, [sp, #8]
 8007e4c:	f107 0314 	add.w	r3, r7, #20
 8007e50:	9301      	str	r3, [sp, #4]
 8007e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	68b9      	ldr	r1, [r7, #8]
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 f850 	bl	8007f02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007e64:	f000 f8de 	bl	8008024 <prvAddNewTaskToReadyList>
 8007e68:	e001      	b.n	8007e6e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007e6e:	697b      	ldr	r3, [r7, #20]
	}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3728      	adds	r7, #40	@ 0x28
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b08c      	sub	sp, #48	@ 0x30
 8007e7c:	af04      	add	r7, sp, #16
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	603b      	str	r3, [r7, #0]
 8007e84:	4613      	mov	r3, r2
 8007e86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007e88:	88fb      	ldrh	r3, [r7, #6]
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f001 fc4d 	bl	800972c <pvPortMalloc>
 8007e92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00e      	beq.n	8007eb8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007e9a:	205c      	movs	r0, #92	@ 0x5c
 8007e9c:	f001 fc46 	bl	800972c <pvPortMalloc>
 8007ea0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d003      	beq.n	8007eb0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	631a      	str	r2, [r3, #48]	@ 0x30
 8007eae:	e005      	b.n	8007ebc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007eb0:	6978      	ldr	r0, [r7, #20]
 8007eb2:	f001 fd09 	bl	80098c8 <vPortFree>
 8007eb6:	e001      	b.n	8007ebc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d017      	beq.n	8007ef2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007eca:	88fa      	ldrh	r2, [r7, #6]
 8007ecc:	2300      	movs	r3, #0
 8007ece:	9303      	str	r3, [sp, #12]
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	9302      	str	r3, [sp, #8]
 8007ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ed6:	9301      	str	r3, [sp, #4]
 8007ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	68b9      	ldr	r1, [r7, #8]
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f000 f80e 	bl	8007f02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ee6:	69f8      	ldr	r0, [r7, #28]
 8007ee8:	f000 f89c 	bl	8008024 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007eec:	2301      	movs	r3, #1
 8007eee:	61bb      	str	r3, [r7, #24]
 8007ef0:	e002      	b.n	8007ef8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007ef8:	69bb      	ldr	r3, [r7, #24]
	}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3720      	adds	r7, #32
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b088      	sub	sp, #32
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	60b9      	str	r1, [r7, #8]
 8007f0c:	607a      	str	r2, [r7, #4]
 8007f0e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f12:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	461a      	mov	r2, r3
 8007f1a:	21a5      	movs	r1, #165	@ 0xa5
 8007f1c:	f002 fb8a 	bl	800a634 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4413      	add	r3, r2
 8007f30:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	f023 0307 	bic.w	r3, r3, #7
 8007f38:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	f003 0307 	and.w	r3, r3, #7
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00b      	beq.n	8007f5c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f48:	f383 8811 	msr	BASEPRI, r3
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	617b      	str	r3, [r7, #20]
}
 8007f56:	bf00      	nop
 8007f58:	bf00      	nop
 8007f5a:	e7fd      	b.n	8007f58 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d01f      	beq.n	8007fa2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f62:	2300      	movs	r3, #0
 8007f64:	61fb      	str	r3, [r7, #28]
 8007f66:	e012      	b.n	8007f8e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	7819      	ldrb	r1, [r3, #0]
 8007f70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	4413      	add	r3, r2
 8007f76:	3334      	adds	r3, #52	@ 0x34
 8007f78:	460a      	mov	r2, r1
 8007f7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	4413      	add	r3, r2
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d006      	beq.n	8007f96 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	61fb      	str	r3, [r7, #28]
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	2b0f      	cmp	r3, #15
 8007f92:	d9e9      	bls.n	8007f68 <prvInitialiseNewTask+0x66>
 8007f94:	e000      	b.n	8007f98 <prvInitialiseNewTask+0x96>
			{
				break;
 8007f96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007fa0:	e003      	b.n	8007faa <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fac:	2b37      	cmp	r3, #55	@ 0x37
 8007fae:	d901      	bls.n	8007fb4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007fb0:	2337      	movs	r3, #55	@ 0x37
 8007fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007fb8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007fbe:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc8:	3304      	adds	r3, #4
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7ff f966 	bl	800729c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd2:	3318      	adds	r3, #24
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f7ff f961 	bl	800729c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fee:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ffe:	683a      	ldr	r2, [r7, #0]
 8008000:	68f9      	ldr	r1, [r7, #12]
 8008002:	69b8      	ldr	r0, [r7, #24]
 8008004:	f001 f93e 	bl	8009284 <pxPortInitialiseStack>
 8008008:	4602      	mov	r2, r0
 800800a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800800c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800800e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008010:	2b00      	cmp	r3, #0
 8008012:	d002      	beq.n	800801a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008016:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008018:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800801a:	bf00      	nop
 800801c:	3720      	adds	r7, #32
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
	...

08008024 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800802c:	f001 fa5c 	bl	80094e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008030:	4b2d      	ldr	r3, [pc, #180]	@ (80080e8 <prvAddNewTaskToReadyList+0xc4>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	3301      	adds	r3, #1
 8008036:	4a2c      	ldr	r2, [pc, #176]	@ (80080e8 <prvAddNewTaskToReadyList+0xc4>)
 8008038:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800803a:	4b2c      	ldr	r3, [pc, #176]	@ (80080ec <prvAddNewTaskToReadyList+0xc8>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d109      	bne.n	8008056 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008042:	4a2a      	ldr	r2, [pc, #168]	@ (80080ec <prvAddNewTaskToReadyList+0xc8>)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008048:	4b27      	ldr	r3, [pc, #156]	@ (80080e8 <prvAddNewTaskToReadyList+0xc4>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d110      	bne.n	8008072 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008050:	f000 fc1e 	bl	8008890 <prvInitialiseTaskLists>
 8008054:	e00d      	b.n	8008072 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008056:	4b26      	ldr	r3, [pc, #152]	@ (80080f0 <prvAddNewTaskToReadyList+0xcc>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d109      	bne.n	8008072 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800805e:	4b23      	ldr	r3, [pc, #140]	@ (80080ec <prvAddNewTaskToReadyList+0xc8>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008068:	429a      	cmp	r2, r3
 800806a:	d802      	bhi.n	8008072 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800806c:	4a1f      	ldr	r2, [pc, #124]	@ (80080ec <prvAddNewTaskToReadyList+0xc8>)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008072:	4b20      	ldr	r3, [pc, #128]	@ (80080f4 <prvAddNewTaskToReadyList+0xd0>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	3301      	adds	r3, #1
 8008078:	4a1e      	ldr	r2, [pc, #120]	@ (80080f4 <prvAddNewTaskToReadyList+0xd0>)
 800807a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800807c:	4b1d      	ldr	r3, [pc, #116]	@ (80080f4 <prvAddNewTaskToReadyList+0xd0>)
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008088:	4b1b      	ldr	r3, [pc, #108]	@ (80080f8 <prvAddNewTaskToReadyList+0xd4>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	429a      	cmp	r2, r3
 800808e:	d903      	bls.n	8008098 <prvAddNewTaskToReadyList+0x74>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008094:	4a18      	ldr	r2, [pc, #96]	@ (80080f8 <prvAddNewTaskToReadyList+0xd4>)
 8008096:	6013      	str	r3, [r2, #0]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800809c:	4613      	mov	r3, r2
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	4413      	add	r3, r2
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	4a15      	ldr	r2, [pc, #84]	@ (80080fc <prvAddNewTaskToReadyList+0xd8>)
 80080a6:	441a      	add	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	3304      	adds	r3, #4
 80080ac:	4619      	mov	r1, r3
 80080ae:	4610      	mov	r0, r2
 80080b0:	f7ff f901 	bl	80072b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80080b4:	f001 fa4a 	bl	800954c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80080b8:	4b0d      	ldr	r3, [pc, #52]	@ (80080f0 <prvAddNewTaskToReadyList+0xcc>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00e      	beq.n	80080de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80080c0:	4b0a      	ldr	r3, [pc, #40]	@ (80080ec <prvAddNewTaskToReadyList+0xc8>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d207      	bcs.n	80080de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80080ce:	4b0c      	ldr	r3, [pc, #48]	@ (8008100 <prvAddNewTaskToReadyList+0xdc>)
 80080d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080d4:	601a      	str	r2, [r3, #0]
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080de:	bf00      	nop
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	2000b118 	.word	0x2000b118
 80080ec:	2000ac44 	.word	0x2000ac44
 80080f0:	2000b124 	.word	0x2000b124
 80080f4:	2000b134 	.word	0x2000b134
 80080f8:	2000b120 	.word	0x2000b120
 80080fc:	2000ac48 	.word	0x2000ac48
 8008100:	e000ed04 	.word	0xe000ed04

08008104 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800810c:	2300      	movs	r3, #0
 800810e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d018      	beq.n	8008148 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008116:	4b14      	ldr	r3, [pc, #80]	@ (8008168 <vTaskDelay+0x64>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00b      	beq.n	8008136 <vTaskDelay+0x32>
	__asm volatile
 800811e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008122:	f383 8811 	msr	BASEPRI, r3
 8008126:	f3bf 8f6f 	isb	sy
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	60bb      	str	r3, [r7, #8]
}
 8008130:	bf00      	nop
 8008132:	bf00      	nop
 8008134:	e7fd      	b.n	8008132 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008136:	f000 f883 	bl	8008240 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800813a:	2100      	movs	r1, #0
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 fcf3 	bl	8008b28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008142:	f000 f88b 	bl	800825c <xTaskResumeAll>
 8008146:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d107      	bne.n	800815e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800814e:	4b07      	ldr	r3, [pc, #28]	@ (800816c <vTaskDelay+0x68>)
 8008150:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008154:	601a      	str	r2, [r3, #0]
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800815e:	bf00      	nop
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	2000b140 	.word	0x2000b140
 800816c:	e000ed04 	.word	0xe000ed04

08008170 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b08a      	sub	sp, #40	@ 0x28
 8008174:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008176:	2300      	movs	r3, #0
 8008178:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800817a:	2300      	movs	r3, #0
 800817c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800817e:	463a      	mov	r2, r7
 8008180:	1d39      	adds	r1, r7, #4
 8008182:	f107 0308 	add.w	r3, r7, #8
 8008186:	4618      	mov	r0, r3
 8008188:	f7ff f834 	bl	80071f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800818c:	6839      	ldr	r1, [r7, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	68ba      	ldr	r2, [r7, #8]
 8008192:	9202      	str	r2, [sp, #8]
 8008194:	9301      	str	r3, [sp, #4]
 8008196:	2300      	movs	r3, #0
 8008198:	9300      	str	r3, [sp, #0]
 800819a:	2300      	movs	r3, #0
 800819c:	460a      	mov	r2, r1
 800819e:	4922      	ldr	r1, [pc, #136]	@ (8008228 <vTaskStartScheduler+0xb8>)
 80081a0:	4822      	ldr	r0, [pc, #136]	@ (800822c <vTaskStartScheduler+0xbc>)
 80081a2:	f7ff fe09 	bl	8007db8 <xTaskCreateStatic>
 80081a6:	4603      	mov	r3, r0
 80081a8:	4a21      	ldr	r2, [pc, #132]	@ (8008230 <vTaskStartScheduler+0xc0>)
 80081aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80081ac:	4b20      	ldr	r3, [pc, #128]	@ (8008230 <vTaskStartScheduler+0xc0>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d002      	beq.n	80081ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80081b4:	2301      	movs	r3, #1
 80081b6:	617b      	str	r3, [r7, #20]
 80081b8:	e001      	b.n	80081be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80081ba:	2300      	movs	r3, #0
 80081bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d102      	bne.n	80081ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80081c4:	f000 fd04 	bl	8008bd0 <xTimerCreateTimerTask>
 80081c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d116      	bne.n	80081fe <vTaskStartScheduler+0x8e>
	__asm volatile
 80081d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	613b      	str	r3, [r7, #16]
}
 80081e2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80081e4:	4b13      	ldr	r3, [pc, #76]	@ (8008234 <vTaskStartScheduler+0xc4>)
 80081e6:	f04f 32ff 	mov.w	r2, #4294967295
 80081ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80081ec:	4b12      	ldr	r3, [pc, #72]	@ (8008238 <vTaskStartScheduler+0xc8>)
 80081ee:	2201      	movs	r2, #1
 80081f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80081f2:	4b12      	ldr	r3, [pc, #72]	@ (800823c <vTaskStartScheduler+0xcc>)
 80081f4:	2200      	movs	r2, #0
 80081f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80081f8:	f001 f8d2 	bl	80093a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80081fc:	e00f      	b.n	800821e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008204:	d10b      	bne.n	800821e <vTaskStartScheduler+0xae>
	__asm volatile
 8008206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800820a:	f383 8811 	msr	BASEPRI, r3
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	f3bf 8f4f 	dsb	sy
 8008216:	60fb      	str	r3, [r7, #12]
}
 8008218:	bf00      	nop
 800821a:	bf00      	nop
 800821c:	e7fd      	b.n	800821a <vTaskStartScheduler+0xaa>
}
 800821e:	bf00      	nop
 8008220:	3718      	adds	r7, #24
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	0800d6b4 	.word	0x0800d6b4
 800822c:	08008861 	.word	0x08008861
 8008230:	2000b13c 	.word	0x2000b13c
 8008234:	2000b138 	.word	0x2000b138
 8008238:	2000b124 	.word	0x2000b124
 800823c:	2000b11c 	.word	0x2000b11c

08008240 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008240:	b480      	push	{r7}
 8008242:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008244:	4b04      	ldr	r3, [pc, #16]	@ (8008258 <vTaskSuspendAll+0x18>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	3301      	adds	r3, #1
 800824a:	4a03      	ldr	r2, [pc, #12]	@ (8008258 <vTaskSuspendAll+0x18>)
 800824c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800824e:	bf00      	nop
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	2000b140 	.word	0x2000b140

0800825c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008262:	2300      	movs	r3, #0
 8008264:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008266:	2300      	movs	r3, #0
 8008268:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800826a:	4b42      	ldr	r3, [pc, #264]	@ (8008374 <xTaskResumeAll+0x118>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d10b      	bne.n	800828a <xTaskResumeAll+0x2e>
	__asm volatile
 8008272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	603b      	str	r3, [r7, #0]
}
 8008284:	bf00      	nop
 8008286:	bf00      	nop
 8008288:	e7fd      	b.n	8008286 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800828a:	f001 f92d 	bl	80094e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800828e:	4b39      	ldr	r3, [pc, #228]	@ (8008374 <xTaskResumeAll+0x118>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	3b01      	subs	r3, #1
 8008294:	4a37      	ldr	r2, [pc, #220]	@ (8008374 <xTaskResumeAll+0x118>)
 8008296:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008298:	4b36      	ldr	r3, [pc, #216]	@ (8008374 <xTaskResumeAll+0x118>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d162      	bne.n	8008366 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80082a0:	4b35      	ldr	r3, [pc, #212]	@ (8008378 <xTaskResumeAll+0x11c>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d05e      	beq.n	8008366 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082a8:	e02f      	b.n	800830a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082aa:	4b34      	ldr	r3, [pc, #208]	@ (800837c <xTaskResumeAll+0x120>)
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	3318      	adds	r3, #24
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7ff f85a 	bl	8007370 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	3304      	adds	r3, #4
 80082c0:	4618      	mov	r0, r3
 80082c2:	f7ff f855 	bl	8007370 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ca:	4b2d      	ldr	r3, [pc, #180]	@ (8008380 <xTaskResumeAll+0x124>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d903      	bls.n	80082da <xTaskResumeAll+0x7e>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d6:	4a2a      	ldr	r2, [pc, #168]	@ (8008380 <xTaskResumeAll+0x124>)
 80082d8:	6013      	str	r3, [r2, #0]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082de:	4613      	mov	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4413      	add	r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	4a27      	ldr	r2, [pc, #156]	@ (8008384 <xTaskResumeAll+0x128>)
 80082e8:	441a      	add	r2, r3
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	3304      	adds	r3, #4
 80082ee:	4619      	mov	r1, r3
 80082f0:	4610      	mov	r0, r2
 80082f2:	f7fe ffe0 	bl	80072b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082fa:	4b23      	ldr	r3, [pc, #140]	@ (8008388 <xTaskResumeAll+0x12c>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008300:	429a      	cmp	r2, r3
 8008302:	d302      	bcc.n	800830a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008304:	4b21      	ldr	r3, [pc, #132]	@ (800838c <xTaskResumeAll+0x130>)
 8008306:	2201      	movs	r2, #1
 8008308:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800830a:	4b1c      	ldr	r3, [pc, #112]	@ (800837c <xTaskResumeAll+0x120>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1cb      	bne.n	80082aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d001      	beq.n	800831c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008318:	f000 fb58 	bl	80089cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800831c:	4b1c      	ldr	r3, [pc, #112]	@ (8008390 <xTaskResumeAll+0x134>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d010      	beq.n	800834a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008328:	f000 f846 	bl	80083b8 <xTaskIncrementTick>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d002      	beq.n	8008338 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008332:	4b16      	ldr	r3, [pc, #88]	@ (800838c <xTaskResumeAll+0x130>)
 8008334:	2201      	movs	r2, #1
 8008336:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	3b01      	subs	r3, #1
 800833c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d1f1      	bne.n	8008328 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008344:	4b12      	ldr	r3, [pc, #72]	@ (8008390 <xTaskResumeAll+0x134>)
 8008346:	2200      	movs	r2, #0
 8008348:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800834a:	4b10      	ldr	r3, [pc, #64]	@ (800838c <xTaskResumeAll+0x130>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d009      	beq.n	8008366 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008352:	2301      	movs	r3, #1
 8008354:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008356:	4b0f      	ldr	r3, [pc, #60]	@ (8008394 <xTaskResumeAll+0x138>)
 8008358:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800835c:	601a      	str	r2, [r3, #0]
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008366:	f001 f8f1 	bl	800954c <vPortExitCritical>

	return xAlreadyYielded;
 800836a:	68bb      	ldr	r3, [r7, #8]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	2000b140 	.word	0x2000b140
 8008378:	2000b118 	.word	0x2000b118
 800837c:	2000b0d8 	.word	0x2000b0d8
 8008380:	2000b120 	.word	0x2000b120
 8008384:	2000ac48 	.word	0x2000ac48
 8008388:	2000ac44 	.word	0x2000ac44
 800838c:	2000b12c 	.word	0x2000b12c
 8008390:	2000b128 	.word	0x2000b128
 8008394:	e000ed04 	.word	0xe000ed04

08008398 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800839e:	4b05      	ldr	r3, [pc, #20]	@ (80083b4 <xTaskGetTickCount+0x1c>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80083a4:	687b      	ldr	r3, [r7, #4]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	370c      	adds	r7, #12
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	2000b11c 	.word	0x2000b11c

080083b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b086      	sub	sp, #24
 80083bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083be:	2300      	movs	r3, #0
 80083c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083c2:	4b4f      	ldr	r3, [pc, #316]	@ (8008500 <xTaskIncrementTick+0x148>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f040 8090 	bne.w	80084ec <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083cc:	4b4d      	ldr	r3, [pc, #308]	@ (8008504 <xTaskIncrementTick+0x14c>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	3301      	adds	r3, #1
 80083d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80083d4:	4a4b      	ldr	r2, [pc, #300]	@ (8008504 <xTaskIncrementTick+0x14c>)
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d121      	bne.n	8008424 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80083e0:	4b49      	ldr	r3, [pc, #292]	@ (8008508 <xTaskIncrementTick+0x150>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00b      	beq.n	8008402 <xTaskIncrementTick+0x4a>
	__asm volatile
 80083ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ee:	f383 8811 	msr	BASEPRI, r3
 80083f2:	f3bf 8f6f 	isb	sy
 80083f6:	f3bf 8f4f 	dsb	sy
 80083fa:	603b      	str	r3, [r7, #0]
}
 80083fc:	bf00      	nop
 80083fe:	bf00      	nop
 8008400:	e7fd      	b.n	80083fe <xTaskIncrementTick+0x46>
 8008402:	4b41      	ldr	r3, [pc, #260]	@ (8008508 <xTaskIncrementTick+0x150>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	60fb      	str	r3, [r7, #12]
 8008408:	4b40      	ldr	r3, [pc, #256]	@ (800850c <xTaskIncrementTick+0x154>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a3e      	ldr	r2, [pc, #248]	@ (8008508 <xTaskIncrementTick+0x150>)
 800840e:	6013      	str	r3, [r2, #0]
 8008410:	4a3e      	ldr	r2, [pc, #248]	@ (800850c <xTaskIncrementTick+0x154>)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6013      	str	r3, [r2, #0]
 8008416:	4b3e      	ldr	r3, [pc, #248]	@ (8008510 <xTaskIncrementTick+0x158>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	3301      	adds	r3, #1
 800841c:	4a3c      	ldr	r2, [pc, #240]	@ (8008510 <xTaskIncrementTick+0x158>)
 800841e:	6013      	str	r3, [r2, #0]
 8008420:	f000 fad4 	bl	80089cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008424:	4b3b      	ldr	r3, [pc, #236]	@ (8008514 <xTaskIncrementTick+0x15c>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	693a      	ldr	r2, [r7, #16]
 800842a:	429a      	cmp	r2, r3
 800842c:	d349      	bcc.n	80084c2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800842e:	4b36      	ldr	r3, [pc, #216]	@ (8008508 <xTaskIncrementTick+0x150>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d104      	bne.n	8008442 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008438:	4b36      	ldr	r3, [pc, #216]	@ (8008514 <xTaskIncrementTick+0x15c>)
 800843a:	f04f 32ff 	mov.w	r2, #4294967295
 800843e:	601a      	str	r2, [r3, #0]
					break;
 8008440:	e03f      	b.n	80084c2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008442:	4b31      	ldr	r3, [pc, #196]	@ (8008508 <xTaskIncrementTick+0x150>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	429a      	cmp	r2, r3
 8008458:	d203      	bcs.n	8008462 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800845a:	4a2e      	ldr	r2, [pc, #184]	@ (8008514 <xTaskIncrementTick+0x15c>)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008460:	e02f      	b.n	80084c2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	3304      	adds	r3, #4
 8008466:	4618      	mov	r0, r3
 8008468:	f7fe ff82 	bl	8007370 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008470:	2b00      	cmp	r3, #0
 8008472:	d004      	beq.n	800847e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	3318      	adds	r3, #24
 8008478:	4618      	mov	r0, r3
 800847a:	f7fe ff79 	bl	8007370 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008482:	4b25      	ldr	r3, [pc, #148]	@ (8008518 <xTaskIncrementTick+0x160>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	429a      	cmp	r2, r3
 8008488:	d903      	bls.n	8008492 <xTaskIncrementTick+0xda>
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800848e:	4a22      	ldr	r2, [pc, #136]	@ (8008518 <xTaskIncrementTick+0x160>)
 8008490:	6013      	str	r3, [r2, #0]
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008496:	4613      	mov	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4413      	add	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	4a1f      	ldr	r2, [pc, #124]	@ (800851c <xTaskIncrementTick+0x164>)
 80084a0:	441a      	add	r2, r3
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	3304      	adds	r3, #4
 80084a6:	4619      	mov	r1, r3
 80084a8:	4610      	mov	r0, r2
 80084aa:	f7fe ff04 	bl	80072b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084b2:	4b1b      	ldr	r3, [pc, #108]	@ (8008520 <xTaskIncrementTick+0x168>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d3b8      	bcc.n	800842e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80084bc:	2301      	movs	r3, #1
 80084be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084c0:	e7b5      	b.n	800842e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084c2:	4b17      	ldr	r3, [pc, #92]	@ (8008520 <xTaskIncrementTick+0x168>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084c8:	4914      	ldr	r1, [pc, #80]	@ (800851c <xTaskIncrementTick+0x164>)
 80084ca:	4613      	mov	r3, r2
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	4413      	add	r3, r2
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	440b      	add	r3, r1
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d901      	bls.n	80084de <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80084da:	2301      	movs	r3, #1
 80084dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80084de:	4b11      	ldr	r3, [pc, #68]	@ (8008524 <xTaskIncrementTick+0x16c>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d007      	beq.n	80084f6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80084e6:	2301      	movs	r3, #1
 80084e8:	617b      	str	r3, [r7, #20]
 80084ea:	e004      	b.n	80084f6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80084ec:	4b0e      	ldr	r3, [pc, #56]	@ (8008528 <xTaskIncrementTick+0x170>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	3301      	adds	r3, #1
 80084f2:	4a0d      	ldr	r2, [pc, #52]	@ (8008528 <xTaskIncrementTick+0x170>)
 80084f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80084f6:	697b      	ldr	r3, [r7, #20]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3718      	adds	r7, #24
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	2000b140 	.word	0x2000b140
 8008504:	2000b11c 	.word	0x2000b11c
 8008508:	2000b0d0 	.word	0x2000b0d0
 800850c:	2000b0d4 	.word	0x2000b0d4
 8008510:	2000b130 	.word	0x2000b130
 8008514:	2000b138 	.word	0x2000b138
 8008518:	2000b120 	.word	0x2000b120
 800851c:	2000ac48 	.word	0x2000ac48
 8008520:	2000ac44 	.word	0x2000ac44
 8008524:	2000b12c 	.word	0x2000b12c
 8008528:	2000b128 	.word	0x2000b128

0800852c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008532:	4b28      	ldr	r3, [pc, #160]	@ (80085d4 <vTaskSwitchContext+0xa8>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d003      	beq.n	8008542 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800853a:	4b27      	ldr	r3, [pc, #156]	@ (80085d8 <vTaskSwitchContext+0xac>)
 800853c:	2201      	movs	r2, #1
 800853e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008540:	e042      	b.n	80085c8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008542:	4b25      	ldr	r3, [pc, #148]	@ (80085d8 <vTaskSwitchContext+0xac>)
 8008544:	2200      	movs	r2, #0
 8008546:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008548:	4b24      	ldr	r3, [pc, #144]	@ (80085dc <vTaskSwitchContext+0xb0>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	60fb      	str	r3, [r7, #12]
 800854e:	e011      	b.n	8008574 <vTaskSwitchContext+0x48>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d10b      	bne.n	800856e <vTaskSwitchContext+0x42>
	__asm volatile
 8008556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800855a:	f383 8811 	msr	BASEPRI, r3
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f3bf 8f4f 	dsb	sy
 8008566:	607b      	str	r3, [r7, #4]
}
 8008568:	bf00      	nop
 800856a:	bf00      	nop
 800856c:	e7fd      	b.n	800856a <vTaskSwitchContext+0x3e>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	3b01      	subs	r3, #1
 8008572:	60fb      	str	r3, [r7, #12]
 8008574:	491a      	ldr	r1, [pc, #104]	@ (80085e0 <vTaskSwitchContext+0xb4>)
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	4613      	mov	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4413      	add	r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	440b      	add	r3, r1
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d0e3      	beq.n	8008550 <vTaskSwitchContext+0x24>
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	4613      	mov	r3, r2
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	4413      	add	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4a13      	ldr	r2, [pc, #76]	@ (80085e0 <vTaskSwitchContext+0xb4>)
 8008594:	4413      	add	r3, r2
 8008596:	60bb      	str	r3, [r7, #8]
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	685a      	ldr	r2, [r3, #4]
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	605a      	str	r2, [r3, #4]
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	685a      	ldr	r2, [r3, #4]
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	3308      	adds	r3, #8
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d104      	bne.n	80085b8 <vTaskSwitchContext+0x8c>
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	685a      	ldr	r2, [r3, #4]
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	605a      	str	r2, [r3, #4]
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	4a09      	ldr	r2, [pc, #36]	@ (80085e4 <vTaskSwitchContext+0xb8>)
 80085c0:	6013      	str	r3, [r2, #0]
 80085c2:	4a06      	ldr	r2, [pc, #24]	@ (80085dc <vTaskSwitchContext+0xb0>)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6013      	str	r3, [r2, #0]
}
 80085c8:	bf00      	nop
 80085ca:	3714      	adds	r7, #20
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr
 80085d4:	2000b140 	.word	0x2000b140
 80085d8:	2000b12c 	.word	0x2000b12c
 80085dc:	2000b120 	.word	0x2000b120
 80085e0:	2000ac48 	.word	0x2000ac48
 80085e4:	2000ac44 	.word	0x2000ac44

080085e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d10b      	bne.n	8008610 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80085f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085fc:	f383 8811 	msr	BASEPRI, r3
 8008600:	f3bf 8f6f 	isb	sy
 8008604:	f3bf 8f4f 	dsb	sy
 8008608:	60fb      	str	r3, [r7, #12]
}
 800860a:	bf00      	nop
 800860c:	bf00      	nop
 800860e:	e7fd      	b.n	800860c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008610:	4b07      	ldr	r3, [pc, #28]	@ (8008630 <vTaskPlaceOnEventList+0x48>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	3318      	adds	r3, #24
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f7fe fe70 	bl	80072fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800861e:	2101      	movs	r1, #1
 8008620:	6838      	ldr	r0, [r7, #0]
 8008622:	f000 fa81 	bl	8008b28 <prvAddCurrentTaskToDelayedList>
}
 8008626:	bf00      	nop
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	2000ac44 	.word	0x2000ac44

08008634 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008634:	b580      	push	{r7, lr}
 8008636:	b086      	sub	sp, #24
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d10b      	bne.n	800865e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800864a:	f383 8811 	msr	BASEPRI, r3
 800864e:	f3bf 8f6f 	isb	sy
 8008652:	f3bf 8f4f 	dsb	sy
 8008656:	617b      	str	r3, [r7, #20]
}
 8008658:	bf00      	nop
 800865a:	bf00      	nop
 800865c:	e7fd      	b.n	800865a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800865e:	4b0a      	ldr	r3, [pc, #40]	@ (8008688 <vTaskPlaceOnEventListRestricted+0x54>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	3318      	adds	r3, #24
 8008664:	4619      	mov	r1, r3
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f7fe fe25 	bl	80072b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d002      	beq.n	8008678 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008672:	f04f 33ff 	mov.w	r3, #4294967295
 8008676:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008678:	6879      	ldr	r1, [r7, #4]
 800867a:	68b8      	ldr	r0, [r7, #8]
 800867c:	f000 fa54 	bl	8008b28 <prvAddCurrentTaskToDelayedList>
	}
 8008680:	bf00      	nop
 8008682:	3718      	adds	r7, #24
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	2000ac44 	.word	0x2000ac44

0800868c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b086      	sub	sp, #24
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d10b      	bne.n	80086ba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80086a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a6:	f383 8811 	msr	BASEPRI, r3
 80086aa:	f3bf 8f6f 	isb	sy
 80086ae:	f3bf 8f4f 	dsb	sy
 80086b2:	60fb      	str	r3, [r7, #12]
}
 80086b4:	bf00      	nop
 80086b6:	bf00      	nop
 80086b8:	e7fd      	b.n	80086b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	3318      	adds	r3, #24
 80086be:	4618      	mov	r0, r3
 80086c0:	f7fe fe56 	bl	8007370 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086c4:	4b1d      	ldr	r3, [pc, #116]	@ (800873c <xTaskRemoveFromEventList+0xb0>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d11d      	bne.n	8008708 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	3304      	adds	r3, #4
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7fe fe4d 	bl	8007370 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086da:	4b19      	ldr	r3, [pc, #100]	@ (8008740 <xTaskRemoveFromEventList+0xb4>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d903      	bls.n	80086ea <xTaskRemoveFromEventList+0x5e>
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e6:	4a16      	ldr	r2, [pc, #88]	@ (8008740 <xTaskRemoveFromEventList+0xb4>)
 80086e8:	6013      	str	r3, [r2, #0]
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086ee:	4613      	mov	r3, r2
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	4413      	add	r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4a13      	ldr	r2, [pc, #76]	@ (8008744 <xTaskRemoveFromEventList+0xb8>)
 80086f8:	441a      	add	r2, r3
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	3304      	adds	r3, #4
 80086fe:	4619      	mov	r1, r3
 8008700:	4610      	mov	r0, r2
 8008702:	f7fe fdd8 	bl	80072b6 <vListInsertEnd>
 8008706:	e005      	b.n	8008714 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	3318      	adds	r3, #24
 800870c:	4619      	mov	r1, r3
 800870e:	480e      	ldr	r0, [pc, #56]	@ (8008748 <xTaskRemoveFromEventList+0xbc>)
 8008710:	f7fe fdd1 	bl	80072b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008718:	4b0c      	ldr	r3, [pc, #48]	@ (800874c <xTaskRemoveFromEventList+0xc0>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800871e:	429a      	cmp	r2, r3
 8008720:	d905      	bls.n	800872e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008722:	2301      	movs	r3, #1
 8008724:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008726:	4b0a      	ldr	r3, [pc, #40]	@ (8008750 <xTaskRemoveFromEventList+0xc4>)
 8008728:	2201      	movs	r2, #1
 800872a:	601a      	str	r2, [r3, #0]
 800872c:	e001      	b.n	8008732 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800872e:	2300      	movs	r3, #0
 8008730:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008732:	697b      	ldr	r3, [r7, #20]
}
 8008734:	4618      	mov	r0, r3
 8008736:	3718      	adds	r7, #24
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}
 800873c:	2000b140 	.word	0x2000b140
 8008740:	2000b120 	.word	0x2000b120
 8008744:	2000ac48 	.word	0x2000ac48
 8008748:	2000b0d8 	.word	0x2000b0d8
 800874c:	2000ac44 	.word	0x2000ac44
 8008750:	2000b12c 	.word	0x2000b12c

08008754 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800875c:	4b06      	ldr	r3, [pc, #24]	@ (8008778 <vTaskInternalSetTimeOutState+0x24>)
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008764:	4b05      	ldr	r3, [pc, #20]	@ (800877c <vTaskInternalSetTimeOutState+0x28>)
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	605a      	str	r2, [r3, #4]
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr
 8008778:	2000b130 	.word	0x2000b130
 800877c:	2000b11c 	.word	0x2000b11c

08008780 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b088      	sub	sp, #32
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10b      	bne.n	80087a8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008794:	f383 8811 	msr	BASEPRI, r3
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	613b      	str	r3, [r7, #16]
}
 80087a2:	bf00      	nop
 80087a4:	bf00      	nop
 80087a6:	e7fd      	b.n	80087a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10b      	bne.n	80087c6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80087ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b2:	f383 8811 	msr	BASEPRI, r3
 80087b6:	f3bf 8f6f 	isb	sy
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	60fb      	str	r3, [r7, #12]
}
 80087c0:	bf00      	nop
 80087c2:	bf00      	nop
 80087c4:	e7fd      	b.n	80087c2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80087c6:	f000 fe8f 	bl	80094e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80087ca:	4b1d      	ldr	r3, [pc, #116]	@ (8008840 <xTaskCheckForTimeOut+0xc0>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	69ba      	ldr	r2, [r7, #24]
 80087d6:	1ad3      	subs	r3, r2, r3
 80087d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e2:	d102      	bne.n	80087ea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80087e4:	2300      	movs	r3, #0
 80087e6:	61fb      	str	r3, [r7, #28]
 80087e8:	e023      	b.n	8008832 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	4b15      	ldr	r3, [pc, #84]	@ (8008844 <xTaskCheckForTimeOut+0xc4>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d007      	beq.n	8008806 <xTaskCheckForTimeOut+0x86>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	69ba      	ldr	r2, [r7, #24]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d302      	bcc.n	8008806 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008800:	2301      	movs	r3, #1
 8008802:	61fb      	str	r3, [r7, #28]
 8008804:	e015      	b.n	8008832 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	697a      	ldr	r2, [r7, #20]
 800880c:	429a      	cmp	r2, r3
 800880e:	d20b      	bcs.n	8008828 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	1ad2      	subs	r2, r2, r3
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f7ff ff99 	bl	8008754 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008822:	2300      	movs	r3, #0
 8008824:	61fb      	str	r3, [r7, #28]
 8008826:	e004      	b.n	8008832 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	2200      	movs	r2, #0
 800882c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800882e:	2301      	movs	r3, #1
 8008830:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008832:	f000 fe8b 	bl	800954c <vPortExitCritical>

	return xReturn;
 8008836:	69fb      	ldr	r3, [r7, #28]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3720      	adds	r7, #32
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	2000b11c 	.word	0x2000b11c
 8008844:	2000b130 	.word	0x2000b130

08008848 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008848:	b480      	push	{r7}
 800884a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800884c:	4b03      	ldr	r3, [pc, #12]	@ (800885c <vTaskMissedYield+0x14>)
 800884e:	2201      	movs	r2, #1
 8008850:	601a      	str	r2, [r3, #0]
}
 8008852:	bf00      	nop
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr
 800885c:	2000b12c 	.word	0x2000b12c

08008860 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008868:	f000 f852 	bl	8008910 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800886c:	4b06      	ldr	r3, [pc, #24]	@ (8008888 <prvIdleTask+0x28>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2b01      	cmp	r3, #1
 8008872:	d9f9      	bls.n	8008868 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008874:	4b05      	ldr	r3, [pc, #20]	@ (800888c <prvIdleTask+0x2c>)
 8008876:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800887a:	601a      	str	r2, [r3, #0]
 800887c:	f3bf 8f4f 	dsb	sy
 8008880:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008884:	e7f0      	b.n	8008868 <prvIdleTask+0x8>
 8008886:	bf00      	nop
 8008888:	2000ac48 	.word	0x2000ac48
 800888c:	e000ed04 	.word	0xe000ed04

08008890 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008896:	2300      	movs	r3, #0
 8008898:	607b      	str	r3, [r7, #4]
 800889a:	e00c      	b.n	80088b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	4613      	mov	r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	4a12      	ldr	r2, [pc, #72]	@ (80088f0 <prvInitialiseTaskLists+0x60>)
 80088a8:	4413      	add	r3, r2
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7fe fcd6 	bl	800725c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	3301      	adds	r3, #1
 80088b4:	607b      	str	r3, [r7, #4]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2b37      	cmp	r3, #55	@ 0x37
 80088ba:	d9ef      	bls.n	800889c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80088bc:	480d      	ldr	r0, [pc, #52]	@ (80088f4 <prvInitialiseTaskLists+0x64>)
 80088be:	f7fe fccd 	bl	800725c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80088c2:	480d      	ldr	r0, [pc, #52]	@ (80088f8 <prvInitialiseTaskLists+0x68>)
 80088c4:	f7fe fcca 	bl	800725c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80088c8:	480c      	ldr	r0, [pc, #48]	@ (80088fc <prvInitialiseTaskLists+0x6c>)
 80088ca:	f7fe fcc7 	bl	800725c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80088ce:	480c      	ldr	r0, [pc, #48]	@ (8008900 <prvInitialiseTaskLists+0x70>)
 80088d0:	f7fe fcc4 	bl	800725c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80088d4:	480b      	ldr	r0, [pc, #44]	@ (8008904 <prvInitialiseTaskLists+0x74>)
 80088d6:	f7fe fcc1 	bl	800725c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80088da:	4b0b      	ldr	r3, [pc, #44]	@ (8008908 <prvInitialiseTaskLists+0x78>)
 80088dc:	4a05      	ldr	r2, [pc, #20]	@ (80088f4 <prvInitialiseTaskLists+0x64>)
 80088de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80088e0:	4b0a      	ldr	r3, [pc, #40]	@ (800890c <prvInitialiseTaskLists+0x7c>)
 80088e2:	4a05      	ldr	r2, [pc, #20]	@ (80088f8 <prvInitialiseTaskLists+0x68>)
 80088e4:	601a      	str	r2, [r3, #0]
}
 80088e6:	bf00      	nop
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	2000ac48 	.word	0x2000ac48
 80088f4:	2000b0a8 	.word	0x2000b0a8
 80088f8:	2000b0bc 	.word	0x2000b0bc
 80088fc:	2000b0d8 	.word	0x2000b0d8
 8008900:	2000b0ec 	.word	0x2000b0ec
 8008904:	2000b104 	.word	0x2000b104
 8008908:	2000b0d0 	.word	0x2000b0d0
 800890c:	2000b0d4 	.word	0x2000b0d4

08008910 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008916:	e019      	b.n	800894c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008918:	f000 fde6 	bl	80094e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800891c:	4b10      	ldr	r3, [pc, #64]	@ (8008960 <prvCheckTasksWaitingTermination+0x50>)
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	3304      	adds	r3, #4
 8008928:	4618      	mov	r0, r3
 800892a:	f7fe fd21 	bl	8007370 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800892e:	4b0d      	ldr	r3, [pc, #52]	@ (8008964 <prvCheckTasksWaitingTermination+0x54>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	3b01      	subs	r3, #1
 8008934:	4a0b      	ldr	r2, [pc, #44]	@ (8008964 <prvCheckTasksWaitingTermination+0x54>)
 8008936:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008938:	4b0b      	ldr	r3, [pc, #44]	@ (8008968 <prvCheckTasksWaitingTermination+0x58>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	3b01      	subs	r3, #1
 800893e:	4a0a      	ldr	r2, [pc, #40]	@ (8008968 <prvCheckTasksWaitingTermination+0x58>)
 8008940:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008942:	f000 fe03 	bl	800954c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 f810 	bl	800896c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800894c:	4b06      	ldr	r3, [pc, #24]	@ (8008968 <prvCheckTasksWaitingTermination+0x58>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1e1      	bne.n	8008918 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008954:	bf00      	nop
 8008956:	bf00      	nop
 8008958:	3708      	adds	r7, #8
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	2000b0ec 	.word	0x2000b0ec
 8008964:	2000b118 	.word	0x2000b118
 8008968:	2000b100 	.word	0x2000b100

0800896c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800897a:	2b00      	cmp	r3, #0
 800897c:	d108      	bne.n	8008990 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008982:	4618      	mov	r0, r3
 8008984:	f000 ffa0 	bl	80098c8 <vPortFree>
				vPortFree( pxTCB );
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 ff9d 	bl	80098c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800898e:	e019      	b.n	80089c4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008996:	2b01      	cmp	r3, #1
 8008998:	d103      	bne.n	80089a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 ff94 	bl	80098c8 <vPortFree>
	}
 80089a0:	e010      	b.n	80089c4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	d00b      	beq.n	80089c4 <prvDeleteTCB+0x58>
	__asm volatile
 80089ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b0:	f383 8811 	msr	BASEPRI, r3
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	60fb      	str	r3, [r7, #12]
}
 80089be:	bf00      	nop
 80089c0:	bf00      	nop
 80089c2:	e7fd      	b.n	80089c0 <prvDeleteTCB+0x54>
	}
 80089c4:	bf00      	nop
 80089c6:	3710      	adds	r7, #16
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089d2:	4b0c      	ldr	r3, [pc, #48]	@ (8008a04 <prvResetNextTaskUnblockTime+0x38>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d104      	bne.n	80089e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80089dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008a08 <prvResetNextTaskUnblockTime+0x3c>)
 80089de:	f04f 32ff 	mov.w	r2, #4294967295
 80089e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80089e4:	e008      	b.n	80089f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089e6:	4b07      	ldr	r3, [pc, #28]	@ (8008a04 <prvResetNextTaskUnblockTime+0x38>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	4a04      	ldr	r2, [pc, #16]	@ (8008a08 <prvResetNextTaskUnblockTime+0x3c>)
 80089f6:	6013      	str	r3, [r2, #0]
}
 80089f8:	bf00      	nop
 80089fa:	370c      	adds	r7, #12
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	2000b0d0 	.word	0x2000b0d0
 8008a08:	2000b138 	.word	0x2000b138

08008a0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008a12:	4b0b      	ldr	r3, [pc, #44]	@ (8008a40 <xTaskGetSchedulerState+0x34>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d102      	bne.n	8008a20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	607b      	str	r3, [r7, #4]
 8008a1e:	e008      	b.n	8008a32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a20:	4b08      	ldr	r3, [pc, #32]	@ (8008a44 <xTaskGetSchedulerState+0x38>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d102      	bne.n	8008a2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a28:	2302      	movs	r3, #2
 8008a2a:	607b      	str	r3, [r7, #4]
 8008a2c:	e001      	b.n	8008a32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a32:	687b      	ldr	r3, [r7, #4]
	}
 8008a34:	4618      	mov	r0, r3
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr
 8008a40:	2000b124 	.word	0x2000b124
 8008a44:	2000b140 	.word	0x2000b140

08008a48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b086      	sub	sp, #24
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008a54:	2300      	movs	r3, #0
 8008a56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d058      	beq.n	8008b10 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8008b1c <xTaskPriorityDisinherit+0xd4>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	693a      	ldr	r2, [r7, #16]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d00b      	beq.n	8008a80 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a6c:	f383 8811 	msr	BASEPRI, r3
 8008a70:	f3bf 8f6f 	isb	sy
 8008a74:	f3bf 8f4f 	dsb	sy
 8008a78:	60fb      	str	r3, [r7, #12]
}
 8008a7a:	bf00      	nop
 8008a7c:	bf00      	nop
 8008a7e:	e7fd      	b.n	8008a7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d10b      	bne.n	8008aa0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a8c:	f383 8811 	msr	BASEPRI, r3
 8008a90:	f3bf 8f6f 	isb	sy
 8008a94:	f3bf 8f4f 	dsb	sy
 8008a98:	60bb      	str	r3, [r7, #8]
}
 8008a9a:	bf00      	nop
 8008a9c:	bf00      	nop
 8008a9e:	e7fd      	b.n	8008a9c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008aa4:	1e5a      	subs	r2, r3, #1
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d02c      	beq.n	8008b10 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d128      	bne.n	8008b10 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	3304      	adds	r3, #4
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7fe fc54 	bl	8007370 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ad4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8008b20 <xTaskPriorityDisinherit+0xd8>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d903      	bls.n	8008af0 <xTaskPriorityDisinherit+0xa8>
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aec:	4a0c      	ldr	r2, [pc, #48]	@ (8008b20 <xTaskPriorityDisinherit+0xd8>)
 8008aee:	6013      	str	r3, [r2, #0]
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008af4:	4613      	mov	r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	4413      	add	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4a09      	ldr	r2, [pc, #36]	@ (8008b24 <xTaskPriorityDisinherit+0xdc>)
 8008afe:	441a      	add	r2, r3
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	3304      	adds	r3, #4
 8008b04:	4619      	mov	r1, r3
 8008b06:	4610      	mov	r0, r2
 8008b08:	f7fe fbd5 	bl	80072b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b10:	697b      	ldr	r3, [r7, #20]
	}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3718      	adds	r7, #24
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	2000ac44 	.word	0x2000ac44
 8008b20:	2000b120 	.word	0x2000b120
 8008b24:	2000ac48 	.word	0x2000ac48

08008b28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b32:	4b21      	ldr	r3, [pc, #132]	@ (8008bb8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b38:	4b20      	ldr	r3, [pc, #128]	@ (8008bbc <prvAddCurrentTaskToDelayedList+0x94>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	3304      	adds	r3, #4
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7fe fc16 	bl	8007370 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b4a:	d10a      	bne.n	8008b62 <prvAddCurrentTaskToDelayedList+0x3a>
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d007      	beq.n	8008b62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b52:	4b1a      	ldr	r3, [pc, #104]	@ (8008bbc <prvAddCurrentTaskToDelayedList+0x94>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	3304      	adds	r3, #4
 8008b58:	4619      	mov	r1, r3
 8008b5a:	4819      	ldr	r0, [pc, #100]	@ (8008bc0 <prvAddCurrentTaskToDelayedList+0x98>)
 8008b5c:	f7fe fbab 	bl	80072b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b60:	e026      	b.n	8008bb0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4413      	add	r3, r2
 8008b68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b6a:	4b14      	ldr	r3, [pc, #80]	@ (8008bbc <prvAddCurrentTaskToDelayedList+0x94>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008b72:	68ba      	ldr	r2, [r7, #8]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d209      	bcs.n	8008b8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b7a:	4b12      	ldr	r3, [pc, #72]	@ (8008bc4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8008bbc <prvAddCurrentTaskToDelayedList+0x94>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	3304      	adds	r3, #4
 8008b84:	4619      	mov	r1, r3
 8008b86:	4610      	mov	r0, r2
 8008b88:	f7fe fbb9 	bl	80072fe <vListInsert>
}
 8008b8c:	e010      	b.n	8008bb0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8008bc8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	4b0a      	ldr	r3, [pc, #40]	@ (8008bbc <prvAddCurrentTaskToDelayedList+0x94>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	3304      	adds	r3, #4
 8008b98:	4619      	mov	r1, r3
 8008b9a:	4610      	mov	r0, r2
 8008b9c:	f7fe fbaf 	bl	80072fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8008bcc <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68ba      	ldr	r2, [r7, #8]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d202      	bcs.n	8008bb0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008baa:	4a08      	ldr	r2, [pc, #32]	@ (8008bcc <prvAddCurrentTaskToDelayedList+0xa4>)
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	6013      	str	r3, [r2, #0]
}
 8008bb0:	bf00      	nop
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	2000b11c 	.word	0x2000b11c
 8008bbc:	2000ac44 	.word	0x2000ac44
 8008bc0:	2000b104 	.word	0x2000b104
 8008bc4:	2000b0d4 	.word	0x2000b0d4
 8008bc8:	2000b0d0 	.word	0x2000b0d0
 8008bcc:	2000b138 	.word	0x2000b138

08008bd0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b08a      	sub	sp, #40	@ 0x28
 8008bd4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008bda:	f000 fb13 	bl	8009204 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008bde:	4b1d      	ldr	r3, [pc, #116]	@ (8008c54 <xTimerCreateTimerTask+0x84>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d021      	beq.n	8008c2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008be6:	2300      	movs	r3, #0
 8008be8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008bea:	2300      	movs	r3, #0
 8008bec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008bee:	1d3a      	adds	r2, r7, #4
 8008bf0:	f107 0108 	add.w	r1, r7, #8
 8008bf4:	f107 030c 	add.w	r3, r7, #12
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7fe fb15 	bl	8007228 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008bfe:	6879      	ldr	r1, [r7, #4]
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	9202      	str	r2, [sp, #8]
 8008c06:	9301      	str	r3, [sp, #4]
 8008c08:	2302      	movs	r3, #2
 8008c0a:	9300      	str	r3, [sp, #0]
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	460a      	mov	r2, r1
 8008c10:	4911      	ldr	r1, [pc, #68]	@ (8008c58 <xTimerCreateTimerTask+0x88>)
 8008c12:	4812      	ldr	r0, [pc, #72]	@ (8008c5c <xTimerCreateTimerTask+0x8c>)
 8008c14:	f7ff f8d0 	bl	8007db8 <xTaskCreateStatic>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	4a11      	ldr	r2, [pc, #68]	@ (8008c60 <xTimerCreateTimerTask+0x90>)
 8008c1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008c1e:	4b10      	ldr	r3, [pc, #64]	@ (8008c60 <xTimerCreateTimerTask+0x90>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d001      	beq.n	8008c2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c26:	2301      	movs	r3, #1
 8008c28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d10b      	bne.n	8008c48 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c34:	f383 8811 	msr	BASEPRI, r3
 8008c38:	f3bf 8f6f 	isb	sy
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	613b      	str	r3, [r7, #16]
}
 8008c42:	bf00      	nop
 8008c44:	bf00      	nop
 8008c46:	e7fd      	b.n	8008c44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008c48:	697b      	ldr	r3, [r7, #20]
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3718      	adds	r7, #24
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	2000b174 	.word	0x2000b174
 8008c58:	0800d6bc 	.word	0x0800d6bc
 8008c5c:	08008d9d 	.word	0x08008d9d
 8008c60:	2000b178 	.word	0x2000b178

08008c64 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b08a      	sub	sp, #40	@ 0x28
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	607a      	str	r2, [r7, #4]
 8008c70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008c72:	2300      	movs	r3, #0
 8008c74:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10b      	bne.n	8008c94 <xTimerGenericCommand+0x30>
	__asm volatile
 8008c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c80:	f383 8811 	msr	BASEPRI, r3
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	623b      	str	r3, [r7, #32]
}
 8008c8e:	bf00      	nop
 8008c90:	bf00      	nop
 8008c92:	e7fd      	b.n	8008c90 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008c94:	4b19      	ldr	r3, [pc, #100]	@ (8008cfc <xTimerGenericCommand+0x98>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d02a      	beq.n	8008cf2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	2b05      	cmp	r3, #5
 8008cac:	dc18      	bgt.n	8008ce0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008cae:	f7ff fead 	bl	8008a0c <xTaskGetSchedulerState>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d109      	bne.n	8008ccc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008cb8:	4b10      	ldr	r3, [pc, #64]	@ (8008cfc <xTimerGenericCommand+0x98>)
 8008cba:	6818      	ldr	r0, [r3, #0]
 8008cbc:	f107 0110 	add.w	r1, r7, #16
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cc4:	f7fe fc88 	bl	80075d8 <xQueueGenericSend>
 8008cc8:	6278      	str	r0, [r7, #36]	@ 0x24
 8008cca:	e012      	b.n	8008cf2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8008cfc <xTimerGenericCommand+0x98>)
 8008cce:	6818      	ldr	r0, [r3, #0]
 8008cd0:	f107 0110 	add.w	r1, r7, #16
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f7fe fc7e 	bl	80075d8 <xQueueGenericSend>
 8008cdc:	6278      	str	r0, [r7, #36]	@ 0x24
 8008cde:	e008      	b.n	8008cf2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008ce0:	4b06      	ldr	r3, [pc, #24]	@ (8008cfc <xTimerGenericCommand+0x98>)
 8008ce2:	6818      	ldr	r0, [r3, #0]
 8008ce4:	f107 0110 	add.w	r1, r7, #16
 8008ce8:	2300      	movs	r3, #0
 8008cea:	683a      	ldr	r2, [r7, #0]
 8008cec:	f7fe fd76 	bl	80077dc <xQueueGenericSendFromISR>
 8008cf0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3728      	adds	r7, #40	@ 0x28
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	2000b174 	.word	0x2000b174

08008d00 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b088      	sub	sp, #32
 8008d04:	af02      	add	r7, sp, #8
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d0a:	4b23      	ldr	r3, [pc, #140]	@ (8008d98 <prvProcessExpiredTimer+0x98>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	3304      	adds	r3, #4
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7fe fb29 	bl	8007370 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d24:	f003 0304 	and.w	r3, r3, #4
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d023      	beq.n	8008d74 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	699a      	ldr	r2, [r3, #24]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	18d1      	adds	r1, r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	683a      	ldr	r2, [r7, #0]
 8008d38:	6978      	ldr	r0, [r7, #20]
 8008d3a:	f000 f8d5 	bl	8008ee8 <prvInsertTimerInActiveList>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d020      	beq.n	8008d86 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d44:	2300      	movs	r3, #0
 8008d46:	9300      	str	r3, [sp, #0]
 8008d48:	2300      	movs	r3, #0
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	6978      	ldr	r0, [r7, #20]
 8008d50:	f7ff ff88 	bl	8008c64 <xTimerGenericCommand>
 8008d54:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d114      	bne.n	8008d86 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d60:	f383 8811 	msr	BASEPRI, r3
 8008d64:	f3bf 8f6f 	isb	sy
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	60fb      	str	r3, [r7, #12]
}
 8008d6e:	bf00      	nop
 8008d70:	bf00      	nop
 8008d72:	e7fd      	b.n	8008d70 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d7a:	f023 0301 	bic.w	r3, r3, #1
 8008d7e:	b2da      	uxtb	r2, r3
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	6a1b      	ldr	r3, [r3, #32]
 8008d8a:	6978      	ldr	r0, [r7, #20]
 8008d8c:	4798      	blx	r3
}
 8008d8e:	bf00      	nop
 8008d90:	3718      	adds	r7, #24
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	2000b16c 	.word	0x2000b16c

08008d9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008da4:	f107 0308 	add.w	r3, r7, #8
 8008da8:	4618      	mov	r0, r3
 8008daa:	f000 f859 	bl	8008e60 <prvGetNextExpireTime>
 8008dae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	4619      	mov	r1, r3
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	f000 f805 	bl	8008dc4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008dba:	f000 f8d7 	bl	8008f6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008dbe:	bf00      	nop
 8008dc0:	e7f0      	b.n	8008da4 <prvTimerTask+0x8>
	...

08008dc4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008dce:	f7ff fa37 	bl	8008240 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008dd2:	f107 0308 	add.w	r3, r7, #8
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f000 f866 	bl	8008ea8 <prvSampleTimeNow>
 8008ddc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d130      	bne.n	8008e46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d10a      	bne.n	8008e00 <prvProcessTimerOrBlockTask+0x3c>
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d806      	bhi.n	8008e00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008df2:	f7ff fa33 	bl	800825c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008df6:	68f9      	ldr	r1, [r7, #12]
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f7ff ff81 	bl	8008d00 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008dfe:	e024      	b.n	8008e4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d008      	beq.n	8008e18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e06:	4b13      	ldr	r3, [pc, #76]	@ (8008e54 <prvProcessTimerOrBlockTask+0x90>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d101      	bne.n	8008e14 <prvProcessTimerOrBlockTask+0x50>
 8008e10:	2301      	movs	r3, #1
 8008e12:	e000      	b.n	8008e16 <prvProcessTimerOrBlockTask+0x52>
 8008e14:	2300      	movs	r3, #0
 8008e16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008e18:	4b0f      	ldr	r3, [pc, #60]	@ (8008e58 <prvProcessTimerOrBlockTask+0x94>)
 8008e1a:	6818      	ldr	r0, [r3, #0]
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	683a      	ldr	r2, [r7, #0]
 8008e24:	4619      	mov	r1, r3
 8008e26:	f7fe ff93 	bl	8007d50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008e2a:	f7ff fa17 	bl	800825c <xTaskResumeAll>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d10a      	bne.n	8008e4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008e34:	4b09      	ldr	r3, [pc, #36]	@ (8008e5c <prvProcessTimerOrBlockTask+0x98>)
 8008e36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e3a:	601a      	str	r2, [r3, #0]
 8008e3c:	f3bf 8f4f 	dsb	sy
 8008e40:	f3bf 8f6f 	isb	sy
}
 8008e44:	e001      	b.n	8008e4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008e46:	f7ff fa09 	bl	800825c <xTaskResumeAll>
}
 8008e4a:	bf00      	nop
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	2000b170 	.word	0x2000b170
 8008e58:	2000b174 	.word	0x2000b174
 8008e5c:	e000ed04 	.word	0xe000ed04

08008e60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008e68:	4b0e      	ldr	r3, [pc, #56]	@ (8008ea4 <prvGetNextExpireTime+0x44>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d101      	bne.n	8008e76 <prvGetNextExpireTime+0x16>
 8008e72:	2201      	movs	r2, #1
 8008e74:	e000      	b.n	8008e78 <prvGetNextExpireTime+0x18>
 8008e76:	2200      	movs	r2, #0
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d105      	bne.n	8008e90 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e84:	4b07      	ldr	r3, [pc, #28]	@ (8008ea4 <prvGetNextExpireTime+0x44>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	60fb      	str	r3, [r7, #12]
 8008e8e:	e001      	b.n	8008e94 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008e90:	2300      	movs	r3, #0
 8008e92:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008e94:	68fb      	ldr	r3, [r7, #12]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3714      	adds	r7, #20
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	2000b16c 	.word	0x2000b16c

08008ea8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008eb0:	f7ff fa72 	bl	8008398 <xTaskGetTickCount>
 8008eb4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8008ee4 <prvSampleTimeNow+0x3c>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	68fa      	ldr	r2, [r7, #12]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d205      	bcs.n	8008ecc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008ec0:	f000 f93a 	bl	8009138 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	601a      	str	r2, [r3, #0]
 8008eca:	e002      	b.n	8008ed2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008ed2:	4a04      	ldr	r2, [pc, #16]	@ (8008ee4 <prvSampleTimeNow+0x3c>)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	2000b17c 	.word	0x2000b17c

08008ee8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b086      	sub	sp, #24
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	607a      	str	r2, [r7, #4]
 8008ef4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	68ba      	ldr	r2, [r7, #8]
 8008efe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008f06:	68ba      	ldr	r2, [r7, #8]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d812      	bhi.n	8008f34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	1ad2      	subs	r2, r2, r3
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	699b      	ldr	r3, [r3, #24]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d302      	bcc.n	8008f22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	617b      	str	r3, [r7, #20]
 8008f20:	e01b      	b.n	8008f5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008f22:	4b10      	ldr	r3, [pc, #64]	@ (8008f64 <prvInsertTimerInActiveList+0x7c>)
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	3304      	adds	r3, #4
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	f7fe f9e6 	bl	80072fe <vListInsert>
 8008f32:	e012      	b.n	8008f5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d206      	bcs.n	8008f4a <prvInsertTimerInActiveList+0x62>
 8008f3c:	68ba      	ldr	r2, [r7, #8]
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d302      	bcc.n	8008f4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008f44:	2301      	movs	r3, #1
 8008f46:	617b      	str	r3, [r7, #20]
 8008f48:	e007      	b.n	8008f5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f4a:	4b07      	ldr	r3, [pc, #28]	@ (8008f68 <prvInsertTimerInActiveList+0x80>)
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	3304      	adds	r3, #4
 8008f52:	4619      	mov	r1, r3
 8008f54:	4610      	mov	r0, r2
 8008f56:	f7fe f9d2 	bl	80072fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008f5a:	697b      	ldr	r3, [r7, #20]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3718      	adds	r7, #24
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	2000b170 	.word	0x2000b170
 8008f68:	2000b16c 	.word	0x2000b16c

08008f6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b08e      	sub	sp, #56	@ 0x38
 8008f70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f72:	e0ce      	b.n	8009112 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	da19      	bge.n	8008fae <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008f7a:	1d3b      	adds	r3, r7, #4
 8008f7c:	3304      	adds	r3, #4
 8008f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d10b      	bne.n	8008f9e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f8a:	f383 8811 	msr	BASEPRI, r3
 8008f8e:	f3bf 8f6f 	isb	sy
 8008f92:	f3bf 8f4f 	dsb	sy
 8008f96:	61fb      	str	r3, [r7, #28]
}
 8008f98:	bf00      	nop
 8008f9a:	bf00      	nop
 8008f9c:	e7fd      	b.n	8008f9a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fa4:	6850      	ldr	r0, [r2, #4]
 8008fa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fa8:	6892      	ldr	r2, [r2, #8]
 8008faa:	4611      	mov	r1, r2
 8008fac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f2c0 80ae 	blt.w	8009112 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fbc:	695b      	ldr	r3, [r3, #20]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d004      	beq.n	8008fcc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc4:	3304      	adds	r3, #4
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7fe f9d2 	bl	8007370 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008fcc:	463b      	mov	r3, r7
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7ff ff6a 	bl	8008ea8 <prvSampleTimeNow>
 8008fd4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2b09      	cmp	r3, #9
 8008fda:	f200 8097 	bhi.w	800910c <prvProcessReceivedCommands+0x1a0>
 8008fde:	a201      	add	r2, pc, #4	@ (adr r2, 8008fe4 <prvProcessReceivedCommands+0x78>)
 8008fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe4:	0800900d 	.word	0x0800900d
 8008fe8:	0800900d 	.word	0x0800900d
 8008fec:	0800900d 	.word	0x0800900d
 8008ff0:	08009083 	.word	0x08009083
 8008ff4:	08009097 	.word	0x08009097
 8008ff8:	080090e3 	.word	0x080090e3
 8008ffc:	0800900d 	.word	0x0800900d
 8009000:	0800900d 	.word	0x0800900d
 8009004:	08009083 	.word	0x08009083
 8009008:	08009097 	.word	0x08009097
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800900c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800900e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009012:	f043 0301 	orr.w	r3, r3, #1
 8009016:	b2da      	uxtb	r2, r3
 8009018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800901a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009022:	699b      	ldr	r3, [r3, #24]
 8009024:	18d1      	adds	r1, r2, r3
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800902a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800902c:	f7ff ff5c 	bl	8008ee8 <prvInsertTimerInActiveList>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d06c      	beq.n	8009110 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009038:	6a1b      	ldr	r3, [r3, #32]
 800903a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800903c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800903e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009040:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009044:	f003 0304 	and.w	r3, r3, #4
 8009048:	2b00      	cmp	r3, #0
 800904a:	d061      	beq.n	8009110 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800904c:	68ba      	ldr	r2, [r7, #8]
 800904e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009050:	699b      	ldr	r3, [r3, #24]
 8009052:	441a      	add	r2, r3
 8009054:	2300      	movs	r3, #0
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	2300      	movs	r3, #0
 800905a:	2100      	movs	r1, #0
 800905c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800905e:	f7ff fe01 	bl	8008c64 <xTimerGenericCommand>
 8009062:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009064:	6a3b      	ldr	r3, [r7, #32]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d152      	bne.n	8009110 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800906a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800906e:	f383 8811 	msr	BASEPRI, r3
 8009072:	f3bf 8f6f 	isb	sy
 8009076:	f3bf 8f4f 	dsb	sy
 800907a:	61bb      	str	r3, [r7, #24]
}
 800907c:	bf00      	nop
 800907e:	bf00      	nop
 8009080:	e7fd      	b.n	800907e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009084:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009088:	f023 0301 	bic.w	r3, r3, #1
 800908c:	b2da      	uxtb	r2, r3
 800908e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009090:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009094:	e03d      	b.n	8009112 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009098:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800909c:	f043 0301 	orr.w	r3, r3, #1
 80090a0:	b2da      	uxtb	r2, r3
 80090a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80090a8:	68ba      	ldr	r2, [r7, #8]
 80090aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80090ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090b0:	699b      	ldr	r3, [r3, #24]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d10b      	bne.n	80090ce <prvProcessReceivedCommands+0x162>
	__asm volatile
 80090b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ba:	f383 8811 	msr	BASEPRI, r3
 80090be:	f3bf 8f6f 	isb	sy
 80090c2:	f3bf 8f4f 	dsb	sy
 80090c6:	617b      	str	r3, [r7, #20]
}
 80090c8:	bf00      	nop
 80090ca:	bf00      	nop
 80090cc:	e7fd      	b.n	80090ca <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80090ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090d0:	699a      	ldr	r2, [r3, #24]
 80090d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d4:	18d1      	adds	r1, r2, r3
 80090d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090dc:	f7ff ff04 	bl	8008ee8 <prvInsertTimerInActiveList>
					break;
 80090e0:	e017      	b.n	8009112 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80090e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090e8:	f003 0302 	and.w	r3, r3, #2
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d103      	bne.n	80090f8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80090f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090f2:	f000 fbe9 	bl	80098c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80090f6:	e00c      	b.n	8009112 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090fe:	f023 0301 	bic.w	r3, r3, #1
 8009102:	b2da      	uxtb	r2, r3
 8009104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009106:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800910a:	e002      	b.n	8009112 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800910c:	bf00      	nop
 800910e:	e000      	b.n	8009112 <prvProcessReceivedCommands+0x1a6>
					break;
 8009110:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009112:	4b08      	ldr	r3, [pc, #32]	@ (8009134 <prvProcessReceivedCommands+0x1c8>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	1d39      	adds	r1, r7, #4
 8009118:	2200      	movs	r2, #0
 800911a:	4618      	mov	r0, r3
 800911c:	f7fe fbfc 	bl	8007918 <xQueueReceive>
 8009120:	4603      	mov	r3, r0
 8009122:	2b00      	cmp	r3, #0
 8009124:	f47f af26 	bne.w	8008f74 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009128:	bf00      	nop
 800912a:	bf00      	nop
 800912c:	3730      	adds	r7, #48	@ 0x30
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	2000b174 	.word	0x2000b174

08009138 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b088      	sub	sp, #32
 800913c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800913e:	e049      	b.n	80091d4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009140:	4b2e      	ldr	r3, [pc, #184]	@ (80091fc <prvSwitchTimerLists+0xc4>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800914a:	4b2c      	ldr	r3, [pc, #176]	@ (80091fc <prvSwitchTimerLists+0xc4>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	3304      	adds	r3, #4
 8009158:	4618      	mov	r0, r3
 800915a:	f7fe f909 	bl	8007370 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6a1b      	ldr	r3, [r3, #32]
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800916c:	f003 0304 	and.w	r3, r3, #4
 8009170:	2b00      	cmp	r3, #0
 8009172:	d02f      	beq.n	80091d4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	699b      	ldr	r3, [r3, #24]
 8009178:	693a      	ldr	r2, [r7, #16]
 800917a:	4413      	add	r3, r2
 800917c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800917e:	68ba      	ldr	r2, [r7, #8]
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	429a      	cmp	r2, r3
 8009184:	d90e      	bls.n	80091a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	68ba      	ldr	r2, [r7, #8]
 800918a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009192:	4b1a      	ldr	r3, [pc, #104]	@ (80091fc <prvSwitchTimerLists+0xc4>)
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	3304      	adds	r3, #4
 800919a:	4619      	mov	r1, r3
 800919c:	4610      	mov	r0, r2
 800919e:	f7fe f8ae 	bl	80072fe <vListInsert>
 80091a2:	e017      	b.n	80091d4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091a4:	2300      	movs	r3, #0
 80091a6:	9300      	str	r3, [sp, #0]
 80091a8:	2300      	movs	r3, #0
 80091aa:	693a      	ldr	r2, [r7, #16]
 80091ac:	2100      	movs	r1, #0
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	f7ff fd58 	bl	8008c64 <xTimerGenericCommand>
 80091b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d10b      	bne.n	80091d4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80091bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c0:	f383 8811 	msr	BASEPRI, r3
 80091c4:	f3bf 8f6f 	isb	sy
 80091c8:	f3bf 8f4f 	dsb	sy
 80091cc:	603b      	str	r3, [r7, #0]
}
 80091ce:	bf00      	nop
 80091d0:	bf00      	nop
 80091d2:	e7fd      	b.n	80091d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80091d4:	4b09      	ldr	r3, [pc, #36]	@ (80091fc <prvSwitchTimerLists+0xc4>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d1b0      	bne.n	8009140 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80091de:	4b07      	ldr	r3, [pc, #28]	@ (80091fc <prvSwitchTimerLists+0xc4>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80091e4:	4b06      	ldr	r3, [pc, #24]	@ (8009200 <prvSwitchTimerLists+0xc8>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a04      	ldr	r2, [pc, #16]	@ (80091fc <prvSwitchTimerLists+0xc4>)
 80091ea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80091ec:	4a04      	ldr	r2, [pc, #16]	@ (8009200 <prvSwitchTimerLists+0xc8>)
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	6013      	str	r3, [r2, #0]
}
 80091f2:	bf00      	nop
 80091f4:	3718      	adds	r7, #24
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	2000b16c 	.word	0x2000b16c
 8009200:	2000b170 	.word	0x2000b170

08009204 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800920a:	f000 f96d 	bl	80094e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800920e:	4b15      	ldr	r3, [pc, #84]	@ (8009264 <prvCheckForValidListAndQueue+0x60>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d120      	bne.n	8009258 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009216:	4814      	ldr	r0, [pc, #80]	@ (8009268 <prvCheckForValidListAndQueue+0x64>)
 8009218:	f7fe f820 	bl	800725c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800921c:	4813      	ldr	r0, [pc, #76]	@ (800926c <prvCheckForValidListAndQueue+0x68>)
 800921e:	f7fe f81d 	bl	800725c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009222:	4b13      	ldr	r3, [pc, #76]	@ (8009270 <prvCheckForValidListAndQueue+0x6c>)
 8009224:	4a10      	ldr	r2, [pc, #64]	@ (8009268 <prvCheckForValidListAndQueue+0x64>)
 8009226:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009228:	4b12      	ldr	r3, [pc, #72]	@ (8009274 <prvCheckForValidListAndQueue+0x70>)
 800922a:	4a10      	ldr	r2, [pc, #64]	@ (800926c <prvCheckForValidListAndQueue+0x68>)
 800922c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800922e:	2300      	movs	r3, #0
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	4b11      	ldr	r3, [pc, #68]	@ (8009278 <prvCheckForValidListAndQueue+0x74>)
 8009234:	4a11      	ldr	r2, [pc, #68]	@ (800927c <prvCheckForValidListAndQueue+0x78>)
 8009236:	2110      	movs	r1, #16
 8009238:	200a      	movs	r0, #10
 800923a:	f7fe f92d 	bl	8007498 <xQueueGenericCreateStatic>
 800923e:	4603      	mov	r3, r0
 8009240:	4a08      	ldr	r2, [pc, #32]	@ (8009264 <prvCheckForValidListAndQueue+0x60>)
 8009242:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009244:	4b07      	ldr	r3, [pc, #28]	@ (8009264 <prvCheckForValidListAndQueue+0x60>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d005      	beq.n	8009258 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800924c:	4b05      	ldr	r3, [pc, #20]	@ (8009264 <prvCheckForValidListAndQueue+0x60>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	490b      	ldr	r1, [pc, #44]	@ (8009280 <prvCheckForValidListAndQueue+0x7c>)
 8009252:	4618      	mov	r0, r3
 8009254:	f7fe fd52 	bl	8007cfc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009258:	f000 f978 	bl	800954c <vPortExitCritical>
}
 800925c:	bf00      	nop
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	2000b174 	.word	0x2000b174
 8009268:	2000b144 	.word	0x2000b144
 800926c:	2000b158 	.word	0x2000b158
 8009270:	2000b16c 	.word	0x2000b16c
 8009274:	2000b170 	.word	0x2000b170
 8009278:	2000b220 	.word	0x2000b220
 800927c:	2000b180 	.word	0x2000b180
 8009280:	0800d6c4 	.word	0x0800d6c4

08009284 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	3b04      	subs	r3, #4
 8009294:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800929c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	3b04      	subs	r3, #4
 80092a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	f023 0201 	bic.w	r2, r3, #1
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	3b04      	subs	r3, #4
 80092b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80092b4:	4a0c      	ldr	r2, [pc, #48]	@ (80092e8 <pxPortInitialiseStack+0x64>)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	3b14      	subs	r3, #20
 80092be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	3b04      	subs	r3, #4
 80092ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f06f 0202 	mvn.w	r2, #2
 80092d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	3b20      	subs	r3, #32
 80092d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80092da:	68fb      	ldr	r3, [r7, #12]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3714      	adds	r7, #20
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr
 80092e8:	080092ed 	.word	0x080092ed

080092ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80092ec:	b480      	push	{r7}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80092f2:	2300      	movs	r3, #0
 80092f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80092f6:	4b13      	ldr	r3, [pc, #76]	@ (8009344 <prvTaskExitError+0x58>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092fe:	d00b      	beq.n	8009318 <prvTaskExitError+0x2c>
	__asm volatile
 8009300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009304:	f383 8811 	msr	BASEPRI, r3
 8009308:	f3bf 8f6f 	isb	sy
 800930c:	f3bf 8f4f 	dsb	sy
 8009310:	60fb      	str	r3, [r7, #12]
}
 8009312:	bf00      	nop
 8009314:	bf00      	nop
 8009316:	e7fd      	b.n	8009314 <prvTaskExitError+0x28>
	__asm volatile
 8009318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800931c:	f383 8811 	msr	BASEPRI, r3
 8009320:	f3bf 8f6f 	isb	sy
 8009324:	f3bf 8f4f 	dsb	sy
 8009328:	60bb      	str	r3, [r7, #8]
}
 800932a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800932c:	bf00      	nop
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d0fc      	beq.n	800932e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009334:	bf00      	nop
 8009336:	bf00      	nop
 8009338:	3714      	adds	r7, #20
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	20000020 	.word	0x20000020
	...

08009350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009350:	4b07      	ldr	r3, [pc, #28]	@ (8009370 <pxCurrentTCBConst2>)
 8009352:	6819      	ldr	r1, [r3, #0]
 8009354:	6808      	ldr	r0, [r1, #0]
 8009356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935a:	f380 8809 	msr	PSP, r0
 800935e:	f3bf 8f6f 	isb	sy
 8009362:	f04f 0000 	mov.w	r0, #0
 8009366:	f380 8811 	msr	BASEPRI, r0
 800936a:	4770      	bx	lr
 800936c:	f3af 8000 	nop.w

08009370 <pxCurrentTCBConst2>:
 8009370:	2000ac44 	.word	0x2000ac44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009374:	bf00      	nop
 8009376:	bf00      	nop

08009378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009378:	4808      	ldr	r0, [pc, #32]	@ (800939c <prvPortStartFirstTask+0x24>)
 800937a:	6800      	ldr	r0, [r0, #0]
 800937c:	6800      	ldr	r0, [r0, #0]
 800937e:	f380 8808 	msr	MSP, r0
 8009382:	f04f 0000 	mov.w	r0, #0
 8009386:	f380 8814 	msr	CONTROL, r0
 800938a:	b662      	cpsie	i
 800938c:	b661      	cpsie	f
 800938e:	f3bf 8f4f 	dsb	sy
 8009392:	f3bf 8f6f 	isb	sy
 8009396:	df00      	svc	0
 8009398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800939a:	bf00      	nop
 800939c:	e000ed08 	.word	0xe000ed08

080093a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b086      	sub	sp, #24
 80093a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80093a6:	4b47      	ldr	r3, [pc, #284]	@ (80094c4 <xPortStartScheduler+0x124>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a47      	ldr	r2, [pc, #284]	@ (80094c8 <xPortStartScheduler+0x128>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d10b      	bne.n	80093c8 <xPortStartScheduler+0x28>
	__asm volatile
 80093b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093b4:	f383 8811 	msr	BASEPRI, r3
 80093b8:	f3bf 8f6f 	isb	sy
 80093bc:	f3bf 8f4f 	dsb	sy
 80093c0:	613b      	str	r3, [r7, #16]
}
 80093c2:	bf00      	nop
 80093c4:	bf00      	nop
 80093c6:	e7fd      	b.n	80093c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80093c8:	4b3e      	ldr	r3, [pc, #248]	@ (80094c4 <xPortStartScheduler+0x124>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a3f      	ldr	r2, [pc, #252]	@ (80094cc <xPortStartScheduler+0x12c>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d10b      	bne.n	80093ea <xPortStartScheduler+0x4a>
	__asm volatile
 80093d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093d6:	f383 8811 	msr	BASEPRI, r3
 80093da:	f3bf 8f6f 	isb	sy
 80093de:	f3bf 8f4f 	dsb	sy
 80093e2:	60fb      	str	r3, [r7, #12]
}
 80093e4:	bf00      	nop
 80093e6:	bf00      	nop
 80093e8:	e7fd      	b.n	80093e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80093ea:	4b39      	ldr	r3, [pc, #228]	@ (80094d0 <xPortStartScheduler+0x130>)
 80093ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	22ff      	movs	r2, #255	@ 0xff
 80093fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	b2db      	uxtb	r3, r3
 8009402:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009404:	78fb      	ldrb	r3, [r7, #3]
 8009406:	b2db      	uxtb	r3, r3
 8009408:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800940c:	b2da      	uxtb	r2, r3
 800940e:	4b31      	ldr	r3, [pc, #196]	@ (80094d4 <xPortStartScheduler+0x134>)
 8009410:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009412:	4b31      	ldr	r3, [pc, #196]	@ (80094d8 <xPortStartScheduler+0x138>)
 8009414:	2207      	movs	r2, #7
 8009416:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009418:	e009      	b.n	800942e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800941a:	4b2f      	ldr	r3, [pc, #188]	@ (80094d8 <xPortStartScheduler+0x138>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	3b01      	subs	r3, #1
 8009420:	4a2d      	ldr	r2, [pc, #180]	@ (80094d8 <xPortStartScheduler+0x138>)
 8009422:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009424:	78fb      	ldrb	r3, [r7, #3]
 8009426:	b2db      	uxtb	r3, r3
 8009428:	005b      	lsls	r3, r3, #1
 800942a:	b2db      	uxtb	r3, r3
 800942c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800942e:	78fb      	ldrb	r3, [r7, #3]
 8009430:	b2db      	uxtb	r3, r3
 8009432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009436:	2b80      	cmp	r3, #128	@ 0x80
 8009438:	d0ef      	beq.n	800941a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800943a:	4b27      	ldr	r3, [pc, #156]	@ (80094d8 <xPortStartScheduler+0x138>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f1c3 0307 	rsb	r3, r3, #7
 8009442:	2b04      	cmp	r3, #4
 8009444:	d00b      	beq.n	800945e <xPortStartScheduler+0xbe>
	__asm volatile
 8009446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800944a:	f383 8811 	msr	BASEPRI, r3
 800944e:	f3bf 8f6f 	isb	sy
 8009452:	f3bf 8f4f 	dsb	sy
 8009456:	60bb      	str	r3, [r7, #8]
}
 8009458:	bf00      	nop
 800945a:	bf00      	nop
 800945c:	e7fd      	b.n	800945a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800945e:	4b1e      	ldr	r3, [pc, #120]	@ (80094d8 <xPortStartScheduler+0x138>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	021b      	lsls	r3, r3, #8
 8009464:	4a1c      	ldr	r2, [pc, #112]	@ (80094d8 <xPortStartScheduler+0x138>)
 8009466:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009468:	4b1b      	ldr	r3, [pc, #108]	@ (80094d8 <xPortStartScheduler+0x138>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009470:	4a19      	ldr	r2, [pc, #100]	@ (80094d8 <xPortStartScheduler+0x138>)
 8009472:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	b2da      	uxtb	r2, r3
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800947c:	4b17      	ldr	r3, [pc, #92]	@ (80094dc <xPortStartScheduler+0x13c>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a16      	ldr	r2, [pc, #88]	@ (80094dc <xPortStartScheduler+0x13c>)
 8009482:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009486:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009488:	4b14      	ldr	r3, [pc, #80]	@ (80094dc <xPortStartScheduler+0x13c>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a13      	ldr	r2, [pc, #76]	@ (80094dc <xPortStartScheduler+0x13c>)
 800948e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009492:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009494:	f000 f8da 	bl	800964c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009498:	4b11      	ldr	r3, [pc, #68]	@ (80094e0 <xPortStartScheduler+0x140>)
 800949a:	2200      	movs	r2, #0
 800949c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800949e:	f000 f8f9 	bl	8009694 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80094a2:	4b10      	ldr	r3, [pc, #64]	@ (80094e4 <xPortStartScheduler+0x144>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a0f      	ldr	r2, [pc, #60]	@ (80094e4 <xPortStartScheduler+0x144>)
 80094a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80094ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80094ae:	f7ff ff63 	bl	8009378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80094b2:	f7ff f83b 	bl	800852c <vTaskSwitchContext>
	prvTaskExitError();
 80094b6:	f7ff ff19 	bl	80092ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3718      	adds	r7, #24
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	e000ed00 	.word	0xe000ed00
 80094c8:	410fc271 	.word	0x410fc271
 80094cc:	410fc270 	.word	0x410fc270
 80094d0:	e000e400 	.word	0xe000e400
 80094d4:	2000b270 	.word	0x2000b270
 80094d8:	2000b274 	.word	0x2000b274
 80094dc:	e000ed20 	.word	0xe000ed20
 80094e0:	20000020 	.word	0x20000020
 80094e4:	e000ef34 	.word	0xe000ef34

080094e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
	__asm volatile
 80094ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	607b      	str	r3, [r7, #4]
}
 8009500:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009502:	4b10      	ldr	r3, [pc, #64]	@ (8009544 <vPortEnterCritical+0x5c>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	3301      	adds	r3, #1
 8009508:	4a0e      	ldr	r2, [pc, #56]	@ (8009544 <vPortEnterCritical+0x5c>)
 800950a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800950c:	4b0d      	ldr	r3, [pc, #52]	@ (8009544 <vPortEnterCritical+0x5c>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2b01      	cmp	r3, #1
 8009512:	d110      	bne.n	8009536 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009514:	4b0c      	ldr	r3, [pc, #48]	@ (8009548 <vPortEnterCritical+0x60>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	b2db      	uxtb	r3, r3
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00b      	beq.n	8009536 <vPortEnterCritical+0x4e>
	__asm volatile
 800951e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009522:	f383 8811 	msr	BASEPRI, r3
 8009526:	f3bf 8f6f 	isb	sy
 800952a:	f3bf 8f4f 	dsb	sy
 800952e:	603b      	str	r3, [r7, #0]
}
 8009530:	bf00      	nop
 8009532:	bf00      	nop
 8009534:	e7fd      	b.n	8009532 <vPortEnterCritical+0x4a>
	}
}
 8009536:	bf00      	nop
 8009538:	370c      	adds	r7, #12
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop
 8009544:	20000020 	.word	0x20000020
 8009548:	e000ed04 	.word	0xe000ed04

0800954c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009552:	4b12      	ldr	r3, [pc, #72]	@ (800959c <vPortExitCritical+0x50>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d10b      	bne.n	8009572 <vPortExitCritical+0x26>
	__asm volatile
 800955a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800955e:	f383 8811 	msr	BASEPRI, r3
 8009562:	f3bf 8f6f 	isb	sy
 8009566:	f3bf 8f4f 	dsb	sy
 800956a:	607b      	str	r3, [r7, #4]
}
 800956c:	bf00      	nop
 800956e:	bf00      	nop
 8009570:	e7fd      	b.n	800956e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009572:	4b0a      	ldr	r3, [pc, #40]	@ (800959c <vPortExitCritical+0x50>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	3b01      	subs	r3, #1
 8009578:	4a08      	ldr	r2, [pc, #32]	@ (800959c <vPortExitCritical+0x50>)
 800957a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800957c:	4b07      	ldr	r3, [pc, #28]	@ (800959c <vPortExitCritical+0x50>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d105      	bne.n	8009590 <vPortExitCritical+0x44>
 8009584:	2300      	movs	r3, #0
 8009586:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	f383 8811 	msr	BASEPRI, r3
}
 800958e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009590:	bf00      	nop
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr
 800959c:	20000020 	.word	0x20000020

080095a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80095a0:	f3ef 8009 	mrs	r0, PSP
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	4b15      	ldr	r3, [pc, #84]	@ (8009600 <pxCurrentTCBConst>)
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	f01e 0f10 	tst.w	lr, #16
 80095b0:	bf08      	it	eq
 80095b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80095b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ba:	6010      	str	r0, [r2, #0]
 80095bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80095c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80095c4:	f380 8811 	msr	BASEPRI, r0
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	f3bf 8f6f 	isb	sy
 80095d0:	f7fe ffac 	bl	800852c <vTaskSwitchContext>
 80095d4:	f04f 0000 	mov.w	r0, #0
 80095d8:	f380 8811 	msr	BASEPRI, r0
 80095dc:	bc09      	pop	{r0, r3}
 80095de:	6819      	ldr	r1, [r3, #0]
 80095e0:	6808      	ldr	r0, [r1, #0]
 80095e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e6:	f01e 0f10 	tst.w	lr, #16
 80095ea:	bf08      	it	eq
 80095ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80095f0:	f380 8809 	msr	PSP, r0
 80095f4:	f3bf 8f6f 	isb	sy
 80095f8:	4770      	bx	lr
 80095fa:	bf00      	nop
 80095fc:	f3af 8000 	nop.w

08009600 <pxCurrentTCBConst>:
 8009600:	2000ac44 	.word	0x2000ac44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009604:	bf00      	nop
 8009606:	bf00      	nop

08009608 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b082      	sub	sp, #8
 800960c:	af00      	add	r7, sp, #0
	__asm volatile
 800960e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009612:	f383 8811 	msr	BASEPRI, r3
 8009616:	f3bf 8f6f 	isb	sy
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	607b      	str	r3, [r7, #4]
}
 8009620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009622:	f7fe fec9 	bl	80083b8 <xTaskIncrementTick>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d003      	beq.n	8009634 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800962c:	4b06      	ldr	r3, [pc, #24]	@ (8009648 <xPortSysTickHandler+0x40>)
 800962e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009632:	601a      	str	r2, [r3, #0]
 8009634:	2300      	movs	r3, #0
 8009636:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	f383 8811 	msr	BASEPRI, r3
}
 800963e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009640:	bf00      	nop
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	e000ed04 	.word	0xe000ed04

0800964c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800964c:	b480      	push	{r7}
 800964e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009650:	4b0b      	ldr	r3, [pc, #44]	@ (8009680 <vPortSetupTimerInterrupt+0x34>)
 8009652:	2200      	movs	r2, #0
 8009654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009656:	4b0b      	ldr	r3, [pc, #44]	@ (8009684 <vPortSetupTimerInterrupt+0x38>)
 8009658:	2200      	movs	r2, #0
 800965a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800965c:	4b0a      	ldr	r3, [pc, #40]	@ (8009688 <vPortSetupTimerInterrupt+0x3c>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a0a      	ldr	r2, [pc, #40]	@ (800968c <vPortSetupTimerInterrupt+0x40>)
 8009662:	fba2 2303 	umull	r2, r3, r2, r3
 8009666:	099b      	lsrs	r3, r3, #6
 8009668:	4a09      	ldr	r2, [pc, #36]	@ (8009690 <vPortSetupTimerInterrupt+0x44>)
 800966a:	3b01      	subs	r3, #1
 800966c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800966e:	4b04      	ldr	r3, [pc, #16]	@ (8009680 <vPortSetupTimerInterrupt+0x34>)
 8009670:	2207      	movs	r2, #7
 8009672:	601a      	str	r2, [r3, #0]
}
 8009674:	bf00      	nop
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr
 800967e:	bf00      	nop
 8009680:	e000e010 	.word	0xe000e010
 8009684:	e000e018 	.word	0xe000e018
 8009688:	20000014 	.word	0x20000014
 800968c:	10624dd3 	.word	0x10624dd3
 8009690:	e000e014 	.word	0xe000e014

08009694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009694:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80096a4 <vPortEnableVFP+0x10>
 8009698:	6801      	ldr	r1, [r0, #0]
 800969a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800969e:	6001      	str	r1, [r0, #0]
 80096a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80096a2:	bf00      	nop
 80096a4:	e000ed88 	.word	0xe000ed88

080096a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80096a8:	b480      	push	{r7}
 80096aa:	b085      	sub	sp, #20
 80096ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80096ae:	f3ef 8305 	mrs	r3, IPSR
 80096b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2b0f      	cmp	r3, #15
 80096b8:	d915      	bls.n	80096e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80096ba:	4a18      	ldr	r2, [pc, #96]	@ (800971c <vPortValidateInterruptPriority+0x74>)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	4413      	add	r3, r2
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80096c4:	4b16      	ldr	r3, [pc, #88]	@ (8009720 <vPortValidateInterruptPriority+0x78>)
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	7afa      	ldrb	r2, [r7, #11]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d20b      	bcs.n	80096e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80096ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d2:	f383 8811 	msr	BASEPRI, r3
 80096d6:	f3bf 8f6f 	isb	sy
 80096da:	f3bf 8f4f 	dsb	sy
 80096de:	607b      	str	r3, [r7, #4]
}
 80096e0:	bf00      	nop
 80096e2:	bf00      	nop
 80096e4:	e7fd      	b.n	80096e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80096e6:	4b0f      	ldr	r3, [pc, #60]	@ (8009724 <vPortValidateInterruptPriority+0x7c>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80096ee:	4b0e      	ldr	r3, [pc, #56]	@ (8009728 <vPortValidateInterruptPriority+0x80>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d90b      	bls.n	800970e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80096f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096fa:	f383 8811 	msr	BASEPRI, r3
 80096fe:	f3bf 8f6f 	isb	sy
 8009702:	f3bf 8f4f 	dsb	sy
 8009706:	603b      	str	r3, [r7, #0]
}
 8009708:	bf00      	nop
 800970a:	bf00      	nop
 800970c:	e7fd      	b.n	800970a <vPortValidateInterruptPriority+0x62>
	}
 800970e:	bf00      	nop
 8009710:	3714      	adds	r7, #20
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop
 800971c:	e000e3f0 	.word	0xe000e3f0
 8009720:	2000b270 	.word	0x2000b270
 8009724:	e000ed0c 	.word	0xe000ed0c
 8009728:	2000b274 	.word	0x2000b274

0800972c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b08a      	sub	sp, #40	@ 0x28
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009734:	2300      	movs	r3, #0
 8009736:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009738:	f7fe fd82 	bl	8008240 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800973c:	4b5c      	ldr	r3, [pc, #368]	@ (80098b0 <pvPortMalloc+0x184>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d101      	bne.n	8009748 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009744:	f000 f924 	bl	8009990 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009748:	4b5a      	ldr	r3, [pc, #360]	@ (80098b4 <pvPortMalloc+0x188>)
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4013      	ands	r3, r2
 8009750:	2b00      	cmp	r3, #0
 8009752:	f040 8095 	bne.w	8009880 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d01e      	beq.n	800979a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800975c:	2208      	movs	r2, #8
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4413      	add	r3, r2
 8009762:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f003 0307 	and.w	r3, r3, #7
 800976a:	2b00      	cmp	r3, #0
 800976c:	d015      	beq.n	800979a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f023 0307 	bic.w	r3, r3, #7
 8009774:	3308      	adds	r3, #8
 8009776:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f003 0307 	and.w	r3, r3, #7
 800977e:	2b00      	cmp	r3, #0
 8009780:	d00b      	beq.n	800979a <pvPortMalloc+0x6e>
	__asm volatile
 8009782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009786:	f383 8811 	msr	BASEPRI, r3
 800978a:	f3bf 8f6f 	isb	sy
 800978e:	f3bf 8f4f 	dsb	sy
 8009792:	617b      	str	r3, [r7, #20]
}
 8009794:	bf00      	nop
 8009796:	bf00      	nop
 8009798:	e7fd      	b.n	8009796 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d06f      	beq.n	8009880 <pvPortMalloc+0x154>
 80097a0:	4b45      	ldr	r3, [pc, #276]	@ (80098b8 <pvPortMalloc+0x18c>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d86a      	bhi.n	8009880 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80097aa:	4b44      	ldr	r3, [pc, #272]	@ (80098bc <pvPortMalloc+0x190>)
 80097ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80097ae:	4b43      	ldr	r3, [pc, #268]	@ (80098bc <pvPortMalloc+0x190>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097b4:	e004      	b.n	80097c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80097b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80097ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d903      	bls.n	80097d2 <pvPortMalloc+0xa6>
 80097ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d1f1      	bne.n	80097b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80097d2:	4b37      	ldr	r3, [pc, #220]	@ (80098b0 <pvPortMalloc+0x184>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097d8:	429a      	cmp	r2, r3
 80097da:	d051      	beq.n	8009880 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80097dc:	6a3b      	ldr	r3, [r7, #32]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2208      	movs	r2, #8
 80097e2:	4413      	add	r3, r2
 80097e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80097e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	6a3b      	ldr	r3, [r7, #32]
 80097ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80097ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f0:	685a      	ldr	r2, [r3, #4]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	1ad2      	subs	r2, r2, r3
 80097f6:	2308      	movs	r3, #8
 80097f8:	005b      	lsls	r3, r3, #1
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d920      	bls.n	8009840 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80097fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	4413      	add	r3, r2
 8009804:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009806:	69bb      	ldr	r3, [r7, #24]
 8009808:	f003 0307 	and.w	r3, r3, #7
 800980c:	2b00      	cmp	r3, #0
 800980e:	d00b      	beq.n	8009828 <pvPortMalloc+0xfc>
	__asm volatile
 8009810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009814:	f383 8811 	msr	BASEPRI, r3
 8009818:	f3bf 8f6f 	isb	sy
 800981c:	f3bf 8f4f 	dsb	sy
 8009820:	613b      	str	r3, [r7, #16]
}
 8009822:	bf00      	nop
 8009824:	bf00      	nop
 8009826:	e7fd      	b.n	8009824 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800982a:	685a      	ldr	r2, [r3, #4]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	1ad2      	subs	r2, r2, r3
 8009830:	69bb      	ldr	r3, [r7, #24]
 8009832:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800983a:	69b8      	ldr	r0, [r7, #24]
 800983c:	f000 f90a 	bl	8009a54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009840:	4b1d      	ldr	r3, [pc, #116]	@ (80098b8 <pvPortMalloc+0x18c>)
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	1ad3      	subs	r3, r2, r3
 800984a:	4a1b      	ldr	r2, [pc, #108]	@ (80098b8 <pvPortMalloc+0x18c>)
 800984c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800984e:	4b1a      	ldr	r3, [pc, #104]	@ (80098b8 <pvPortMalloc+0x18c>)
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	4b1b      	ldr	r3, [pc, #108]	@ (80098c0 <pvPortMalloc+0x194>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	429a      	cmp	r2, r3
 8009858:	d203      	bcs.n	8009862 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800985a:	4b17      	ldr	r3, [pc, #92]	@ (80098b8 <pvPortMalloc+0x18c>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a18      	ldr	r2, [pc, #96]	@ (80098c0 <pvPortMalloc+0x194>)
 8009860:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009864:	685a      	ldr	r2, [r3, #4]
 8009866:	4b13      	ldr	r3, [pc, #76]	@ (80098b4 <pvPortMalloc+0x188>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	431a      	orrs	r2, r3
 800986c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800986e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009872:	2200      	movs	r2, #0
 8009874:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009876:	4b13      	ldr	r3, [pc, #76]	@ (80098c4 <pvPortMalloc+0x198>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	3301      	adds	r3, #1
 800987c:	4a11      	ldr	r2, [pc, #68]	@ (80098c4 <pvPortMalloc+0x198>)
 800987e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009880:	f7fe fcec 	bl	800825c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	f003 0307 	and.w	r3, r3, #7
 800988a:	2b00      	cmp	r3, #0
 800988c:	d00b      	beq.n	80098a6 <pvPortMalloc+0x17a>
	__asm volatile
 800988e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009892:	f383 8811 	msr	BASEPRI, r3
 8009896:	f3bf 8f6f 	isb	sy
 800989a:	f3bf 8f4f 	dsb	sy
 800989e:	60fb      	str	r3, [r7, #12]
}
 80098a0:	bf00      	nop
 80098a2:	bf00      	nop
 80098a4:	e7fd      	b.n	80098a2 <pvPortMalloc+0x176>
	return pvReturn;
 80098a6:	69fb      	ldr	r3, [r7, #28]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3728      	adds	r7, #40	@ 0x28
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	2000be38 	.word	0x2000be38
 80098b4:	2000be4c 	.word	0x2000be4c
 80098b8:	2000be3c 	.word	0x2000be3c
 80098bc:	2000be30 	.word	0x2000be30
 80098c0:	2000be40 	.word	0x2000be40
 80098c4:	2000be44 	.word	0x2000be44

080098c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b086      	sub	sp, #24
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d04f      	beq.n	800997a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80098da:	2308      	movs	r3, #8
 80098dc:	425b      	negs	r3, r3
 80098de:	697a      	ldr	r2, [r7, #20]
 80098e0:	4413      	add	r3, r2
 80098e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	685a      	ldr	r2, [r3, #4]
 80098ec:	4b25      	ldr	r3, [pc, #148]	@ (8009984 <vPortFree+0xbc>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4013      	ands	r3, r2
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d10b      	bne.n	800990e <vPortFree+0x46>
	__asm volatile
 80098f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098fa:	f383 8811 	msr	BASEPRI, r3
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	60fb      	str	r3, [r7, #12]
}
 8009908:	bf00      	nop
 800990a:	bf00      	nop
 800990c:	e7fd      	b.n	800990a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00b      	beq.n	800992e <vPortFree+0x66>
	__asm volatile
 8009916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800991a:	f383 8811 	msr	BASEPRI, r3
 800991e:	f3bf 8f6f 	isb	sy
 8009922:	f3bf 8f4f 	dsb	sy
 8009926:	60bb      	str	r3, [r7, #8]
}
 8009928:	bf00      	nop
 800992a:	bf00      	nop
 800992c:	e7fd      	b.n	800992a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	685a      	ldr	r2, [r3, #4]
 8009932:	4b14      	ldr	r3, [pc, #80]	@ (8009984 <vPortFree+0xbc>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4013      	ands	r3, r2
 8009938:	2b00      	cmp	r3, #0
 800993a:	d01e      	beq.n	800997a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d11a      	bne.n	800997a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	685a      	ldr	r2, [r3, #4]
 8009948:	4b0e      	ldr	r3, [pc, #56]	@ (8009984 <vPortFree+0xbc>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	43db      	mvns	r3, r3
 800994e:	401a      	ands	r2, r3
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009954:	f7fe fc74 	bl	8008240 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	685a      	ldr	r2, [r3, #4]
 800995c:	4b0a      	ldr	r3, [pc, #40]	@ (8009988 <vPortFree+0xc0>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4413      	add	r3, r2
 8009962:	4a09      	ldr	r2, [pc, #36]	@ (8009988 <vPortFree+0xc0>)
 8009964:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009966:	6938      	ldr	r0, [r7, #16]
 8009968:	f000 f874 	bl	8009a54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800996c:	4b07      	ldr	r3, [pc, #28]	@ (800998c <vPortFree+0xc4>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	3301      	adds	r3, #1
 8009972:	4a06      	ldr	r2, [pc, #24]	@ (800998c <vPortFree+0xc4>)
 8009974:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009976:	f7fe fc71 	bl	800825c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800997a:	bf00      	nop
 800997c:	3718      	adds	r7, #24
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	2000be4c 	.word	0x2000be4c
 8009988:	2000be3c 	.word	0x2000be3c
 800998c:	2000be48 	.word	0x2000be48

08009990 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009990:	b480      	push	{r7}
 8009992:	b085      	sub	sp, #20
 8009994:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009996:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800999a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800999c:	4b27      	ldr	r3, [pc, #156]	@ (8009a3c <prvHeapInit+0xac>)
 800999e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f003 0307 	and.w	r3, r3, #7
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00c      	beq.n	80099c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	3307      	adds	r3, #7
 80099ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f023 0307 	bic.w	r3, r3, #7
 80099b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80099b8:	68ba      	ldr	r2, [r7, #8]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	1ad3      	subs	r3, r2, r3
 80099be:	4a1f      	ldr	r2, [pc, #124]	@ (8009a3c <prvHeapInit+0xac>)
 80099c0:	4413      	add	r3, r2
 80099c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80099c8:	4a1d      	ldr	r2, [pc, #116]	@ (8009a40 <prvHeapInit+0xb0>)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80099ce:	4b1c      	ldr	r3, [pc, #112]	@ (8009a40 <prvHeapInit+0xb0>)
 80099d0:	2200      	movs	r2, #0
 80099d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	68ba      	ldr	r2, [r7, #8]
 80099d8:	4413      	add	r3, r2
 80099da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80099dc:	2208      	movs	r2, #8
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	1a9b      	subs	r3, r3, r2
 80099e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f023 0307 	bic.w	r3, r3, #7
 80099ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	4a15      	ldr	r2, [pc, #84]	@ (8009a44 <prvHeapInit+0xb4>)
 80099f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80099f2:	4b14      	ldr	r3, [pc, #80]	@ (8009a44 <prvHeapInit+0xb4>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2200      	movs	r2, #0
 80099f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80099fa:	4b12      	ldr	r3, [pc, #72]	@ (8009a44 <prvHeapInit+0xb4>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2200      	movs	r2, #0
 8009a00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	68fa      	ldr	r2, [r7, #12]
 8009a0a:	1ad2      	subs	r2, r2, r3
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a10:	4b0c      	ldr	r3, [pc, #48]	@ (8009a44 <prvHeapInit+0xb4>)
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	4a0a      	ldr	r2, [pc, #40]	@ (8009a48 <prvHeapInit+0xb8>)
 8009a1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	4a09      	ldr	r2, [pc, #36]	@ (8009a4c <prvHeapInit+0xbc>)
 8009a26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a28:	4b09      	ldr	r3, [pc, #36]	@ (8009a50 <prvHeapInit+0xc0>)
 8009a2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009a2e:	601a      	str	r2, [r3, #0]
}
 8009a30:	bf00      	nop
 8009a32:	3714      	adds	r7, #20
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	2000b278 	.word	0x2000b278
 8009a40:	2000be30 	.word	0x2000be30
 8009a44:	2000be38 	.word	0x2000be38
 8009a48:	2000be40 	.word	0x2000be40
 8009a4c:	2000be3c 	.word	0x2000be3c
 8009a50:	2000be4c 	.word	0x2000be4c

08009a54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009a54:	b480      	push	{r7}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a5c:	4b28      	ldr	r3, [pc, #160]	@ (8009b00 <prvInsertBlockIntoFreeList+0xac>)
 8009a5e:	60fb      	str	r3, [r7, #12]
 8009a60:	e002      	b.n	8009a68 <prvInsertBlockIntoFreeList+0x14>
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	60fb      	str	r3, [r7, #12]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d8f7      	bhi.n	8009a62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	68ba      	ldr	r2, [r7, #8]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d108      	bne.n	8009a96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	685a      	ldr	r2, [r3, #4]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	441a      	add	r2, r3
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	68ba      	ldr	r2, [r7, #8]
 8009aa0:	441a      	add	r2, r3
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d118      	bne.n	8009adc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	4b15      	ldr	r3, [pc, #84]	@ (8009b04 <prvInsertBlockIntoFreeList+0xb0>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d00d      	beq.n	8009ad2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	685a      	ldr	r2, [r3, #4]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	441a      	add	r2, r3
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	601a      	str	r2, [r3, #0]
 8009ad0:	e008      	b.n	8009ae4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8009b04 <prvInsertBlockIntoFreeList+0xb0>)
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	601a      	str	r2, [r3, #0]
 8009ada:	e003      	b.n	8009ae4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d002      	beq.n	8009af2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009af2:	bf00      	nop
 8009af4:	3714      	adds	r7, #20
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop
 8009b00:	2000be30 	.word	0x2000be30
 8009b04:	2000be38 	.word	0x2000be38

08009b08 <__cvt>:
 8009b08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b0c:	ec57 6b10 	vmov	r6, r7, d0
 8009b10:	2f00      	cmp	r7, #0
 8009b12:	460c      	mov	r4, r1
 8009b14:	4619      	mov	r1, r3
 8009b16:	463b      	mov	r3, r7
 8009b18:	bfbb      	ittet	lt
 8009b1a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009b1e:	461f      	movlt	r7, r3
 8009b20:	2300      	movge	r3, #0
 8009b22:	232d      	movlt	r3, #45	@ 0x2d
 8009b24:	700b      	strb	r3, [r1, #0]
 8009b26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b28:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009b2c:	4691      	mov	r9, r2
 8009b2e:	f023 0820 	bic.w	r8, r3, #32
 8009b32:	bfbc      	itt	lt
 8009b34:	4632      	movlt	r2, r6
 8009b36:	4616      	movlt	r6, r2
 8009b38:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009b3c:	d005      	beq.n	8009b4a <__cvt+0x42>
 8009b3e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009b42:	d100      	bne.n	8009b46 <__cvt+0x3e>
 8009b44:	3401      	adds	r4, #1
 8009b46:	2102      	movs	r1, #2
 8009b48:	e000      	b.n	8009b4c <__cvt+0x44>
 8009b4a:	2103      	movs	r1, #3
 8009b4c:	ab03      	add	r3, sp, #12
 8009b4e:	9301      	str	r3, [sp, #4]
 8009b50:	ab02      	add	r3, sp, #8
 8009b52:	9300      	str	r3, [sp, #0]
 8009b54:	ec47 6b10 	vmov	d0, r6, r7
 8009b58:	4653      	mov	r3, sl
 8009b5a:	4622      	mov	r2, r4
 8009b5c:	f000 fe80 	bl	800a860 <_dtoa_r>
 8009b60:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009b64:	4605      	mov	r5, r0
 8009b66:	d119      	bne.n	8009b9c <__cvt+0x94>
 8009b68:	f019 0f01 	tst.w	r9, #1
 8009b6c:	d00e      	beq.n	8009b8c <__cvt+0x84>
 8009b6e:	eb00 0904 	add.w	r9, r0, r4
 8009b72:	2200      	movs	r2, #0
 8009b74:	2300      	movs	r3, #0
 8009b76:	4630      	mov	r0, r6
 8009b78:	4639      	mov	r1, r7
 8009b7a:	f7f6 ffa5 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b7e:	b108      	cbz	r0, 8009b84 <__cvt+0x7c>
 8009b80:	f8cd 900c 	str.w	r9, [sp, #12]
 8009b84:	2230      	movs	r2, #48	@ 0x30
 8009b86:	9b03      	ldr	r3, [sp, #12]
 8009b88:	454b      	cmp	r3, r9
 8009b8a:	d31e      	bcc.n	8009bca <__cvt+0xc2>
 8009b8c:	9b03      	ldr	r3, [sp, #12]
 8009b8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b90:	1b5b      	subs	r3, r3, r5
 8009b92:	4628      	mov	r0, r5
 8009b94:	6013      	str	r3, [r2, #0]
 8009b96:	b004      	add	sp, #16
 8009b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009ba0:	eb00 0904 	add.w	r9, r0, r4
 8009ba4:	d1e5      	bne.n	8009b72 <__cvt+0x6a>
 8009ba6:	7803      	ldrb	r3, [r0, #0]
 8009ba8:	2b30      	cmp	r3, #48	@ 0x30
 8009baa:	d10a      	bne.n	8009bc2 <__cvt+0xba>
 8009bac:	2200      	movs	r2, #0
 8009bae:	2300      	movs	r3, #0
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	4639      	mov	r1, r7
 8009bb4:	f7f6 ff88 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bb8:	b918      	cbnz	r0, 8009bc2 <__cvt+0xba>
 8009bba:	f1c4 0401 	rsb	r4, r4, #1
 8009bbe:	f8ca 4000 	str.w	r4, [sl]
 8009bc2:	f8da 3000 	ldr.w	r3, [sl]
 8009bc6:	4499      	add	r9, r3
 8009bc8:	e7d3      	b.n	8009b72 <__cvt+0x6a>
 8009bca:	1c59      	adds	r1, r3, #1
 8009bcc:	9103      	str	r1, [sp, #12]
 8009bce:	701a      	strb	r2, [r3, #0]
 8009bd0:	e7d9      	b.n	8009b86 <__cvt+0x7e>

08009bd2 <__exponent>:
 8009bd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bd4:	2900      	cmp	r1, #0
 8009bd6:	bfba      	itte	lt
 8009bd8:	4249      	neglt	r1, r1
 8009bda:	232d      	movlt	r3, #45	@ 0x2d
 8009bdc:	232b      	movge	r3, #43	@ 0x2b
 8009bde:	2909      	cmp	r1, #9
 8009be0:	7002      	strb	r2, [r0, #0]
 8009be2:	7043      	strb	r3, [r0, #1]
 8009be4:	dd29      	ble.n	8009c3a <__exponent+0x68>
 8009be6:	f10d 0307 	add.w	r3, sp, #7
 8009bea:	461d      	mov	r5, r3
 8009bec:	270a      	movs	r7, #10
 8009bee:	461a      	mov	r2, r3
 8009bf0:	fbb1 f6f7 	udiv	r6, r1, r7
 8009bf4:	fb07 1416 	mls	r4, r7, r6, r1
 8009bf8:	3430      	adds	r4, #48	@ 0x30
 8009bfa:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009bfe:	460c      	mov	r4, r1
 8009c00:	2c63      	cmp	r4, #99	@ 0x63
 8009c02:	f103 33ff 	add.w	r3, r3, #4294967295
 8009c06:	4631      	mov	r1, r6
 8009c08:	dcf1      	bgt.n	8009bee <__exponent+0x1c>
 8009c0a:	3130      	adds	r1, #48	@ 0x30
 8009c0c:	1e94      	subs	r4, r2, #2
 8009c0e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009c12:	1c41      	adds	r1, r0, #1
 8009c14:	4623      	mov	r3, r4
 8009c16:	42ab      	cmp	r3, r5
 8009c18:	d30a      	bcc.n	8009c30 <__exponent+0x5e>
 8009c1a:	f10d 0309 	add.w	r3, sp, #9
 8009c1e:	1a9b      	subs	r3, r3, r2
 8009c20:	42ac      	cmp	r4, r5
 8009c22:	bf88      	it	hi
 8009c24:	2300      	movhi	r3, #0
 8009c26:	3302      	adds	r3, #2
 8009c28:	4403      	add	r3, r0
 8009c2a:	1a18      	subs	r0, r3, r0
 8009c2c:	b003      	add	sp, #12
 8009c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c30:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009c34:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009c38:	e7ed      	b.n	8009c16 <__exponent+0x44>
 8009c3a:	2330      	movs	r3, #48	@ 0x30
 8009c3c:	3130      	adds	r1, #48	@ 0x30
 8009c3e:	7083      	strb	r3, [r0, #2]
 8009c40:	70c1      	strb	r1, [r0, #3]
 8009c42:	1d03      	adds	r3, r0, #4
 8009c44:	e7f1      	b.n	8009c2a <__exponent+0x58>
	...

08009c48 <_printf_float>:
 8009c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c4c:	b08d      	sub	sp, #52	@ 0x34
 8009c4e:	460c      	mov	r4, r1
 8009c50:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009c54:	4616      	mov	r6, r2
 8009c56:	461f      	mov	r7, r3
 8009c58:	4605      	mov	r5, r0
 8009c5a:	f000 fcf3 	bl	800a644 <_localeconv_r>
 8009c5e:	6803      	ldr	r3, [r0, #0]
 8009c60:	9304      	str	r3, [sp, #16]
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7f6 fb04 	bl	8000270 <strlen>
 8009c68:	2300      	movs	r3, #0
 8009c6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c6c:	f8d8 3000 	ldr.w	r3, [r8]
 8009c70:	9005      	str	r0, [sp, #20]
 8009c72:	3307      	adds	r3, #7
 8009c74:	f023 0307 	bic.w	r3, r3, #7
 8009c78:	f103 0208 	add.w	r2, r3, #8
 8009c7c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009c80:	f8d4 b000 	ldr.w	fp, [r4]
 8009c84:	f8c8 2000 	str.w	r2, [r8]
 8009c88:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c8c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009c90:	9307      	str	r3, [sp, #28]
 8009c92:	f8cd 8018 	str.w	r8, [sp, #24]
 8009c96:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009c9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c9e:	4b9c      	ldr	r3, [pc, #624]	@ (8009f10 <_printf_float+0x2c8>)
 8009ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ca4:	f7f6 ff42 	bl	8000b2c <__aeabi_dcmpun>
 8009ca8:	bb70      	cbnz	r0, 8009d08 <_printf_float+0xc0>
 8009caa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cae:	4b98      	ldr	r3, [pc, #608]	@ (8009f10 <_printf_float+0x2c8>)
 8009cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8009cb4:	f7f6 ff1c 	bl	8000af0 <__aeabi_dcmple>
 8009cb8:	bb30      	cbnz	r0, 8009d08 <_printf_float+0xc0>
 8009cba:	2200      	movs	r2, #0
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	4640      	mov	r0, r8
 8009cc0:	4649      	mov	r1, r9
 8009cc2:	f7f6 ff0b 	bl	8000adc <__aeabi_dcmplt>
 8009cc6:	b110      	cbz	r0, 8009cce <_printf_float+0x86>
 8009cc8:	232d      	movs	r3, #45	@ 0x2d
 8009cca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cce:	4a91      	ldr	r2, [pc, #580]	@ (8009f14 <_printf_float+0x2cc>)
 8009cd0:	4b91      	ldr	r3, [pc, #580]	@ (8009f18 <_printf_float+0x2d0>)
 8009cd2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009cd6:	bf94      	ite	ls
 8009cd8:	4690      	movls	r8, r2
 8009cda:	4698      	movhi	r8, r3
 8009cdc:	2303      	movs	r3, #3
 8009cde:	6123      	str	r3, [r4, #16]
 8009ce0:	f02b 0304 	bic.w	r3, fp, #4
 8009ce4:	6023      	str	r3, [r4, #0]
 8009ce6:	f04f 0900 	mov.w	r9, #0
 8009cea:	9700      	str	r7, [sp, #0]
 8009cec:	4633      	mov	r3, r6
 8009cee:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009cf0:	4621      	mov	r1, r4
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	f000 f9d2 	bl	800a09c <_printf_common>
 8009cf8:	3001      	adds	r0, #1
 8009cfa:	f040 808d 	bne.w	8009e18 <_printf_float+0x1d0>
 8009cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8009d02:	b00d      	add	sp, #52	@ 0x34
 8009d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d08:	4642      	mov	r2, r8
 8009d0a:	464b      	mov	r3, r9
 8009d0c:	4640      	mov	r0, r8
 8009d0e:	4649      	mov	r1, r9
 8009d10:	f7f6 ff0c 	bl	8000b2c <__aeabi_dcmpun>
 8009d14:	b140      	cbz	r0, 8009d28 <_printf_float+0xe0>
 8009d16:	464b      	mov	r3, r9
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	bfbc      	itt	lt
 8009d1c:	232d      	movlt	r3, #45	@ 0x2d
 8009d1e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009d22:	4a7e      	ldr	r2, [pc, #504]	@ (8009f1c <_printf_float+0x2d4>)
 8009d24:	4b7e      	ldr	r3, [pc, #504]	@ (8009f20 <_printf_float+0x2d8>)
 8009d26:	e7d4      	b.n	8009cd2 <_printf_float+0x8a>
 8009d28:	6863      	ldr	r3, [r4, #4]
 8009d2a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009d2e:	9206      	str	r2, [sp, #24]
 8009d30:	1c5a      	adds	r2, r3, #1
 8009d32:	d13b      	bne.n	8009dac <_printf_float+0x164>
 8009d34:	2306      	movs	r3, #6
 8009d36:	6063      	str	r3, [r4, #4]
 8009d38:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	6022      	str	r2, [r4, #0]
 8009d40:	9303      	str	r3, [sp, #12]
 8009d42:	ab0a      	add	r3, sp, #40	@ 0x28
 8009d44:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009d48:	ab09      	add	r3, sp, #36	@ 0x24
 8009d4a:	9300      	str	r3, [sp, #0]
 8009d4c:	6861      	ldr	r1, [r4, #4]
 8009d4e:	ec49 8b10 	vmov	d0, r8, r9
 8009d52:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009d56:	4628      	mov	r0, r5
 8009d58:	f7ff fed6 	bl	8009b08 <__cvt>
 8009d5c:	9b06      	ldr	r3, [sp, #24]
 8009d5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009d60:	2b47      	cmp	r3, #71	@ 0x47
 8009d62:	4680      	mov	r8, r0
 8009d64:	d129      	bne.n	8009dba <_printf_float+0x172>
 8009d66:	1cc8      	adds	r0, r1, #3
 8009d68:	db02      	blt.n	8009d70 <_printf_float+0x128>
 8009d6a:	6863      	ldr	r3, [r4, #4]
 8009d6c:	4299      	cmp	r1, r3
 8009d6e:	dd41      	ble.n	8009df4 <_printf_float+0x1ac>
 8009d70:	f1aa 0a02 	sub.w	sl, sl, #2
 8009d74:	fa5f fa8a 	uxtb.w	sl, sl
 8009d78:	3901      	subs	r1, #1
 8009d7a:	4652      	mov	r2, sl
 8009d7c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009d80:	9109      	str	r1, [sp, #36]	@ 0x24
 8009d82:	f7ff ff26 	bl	8009bd2 <__exponent>
 8009d86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d88:	1813      	adds	r3, r2, r0
 8009d8a:	2a01      	cmp	r2, #1
 8009d8c:	4681      	mov	r9, r0
 8009d8e:	6123      	str	r3, [r4, #16]
 8009d90:	dc02      	bgt.n	8009d98 <_printf_float+0x150>
 8009d92:	6822      	ldr	r2, [r4, #0]
 8009d94:	07d2      	lsls	r2, r2, #31
 8009d96:	d501      	bpl.n	8009d9c <_printf_float+0x154>
 8009d98:	3301      	adds	r3, #1
 8009d9a:	6123      	str	r3, [r4, #16]
 8009d9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d0a2      	beq.n	8009cea <_printf_float+0xa2>
 8009da4:	232d      	movs	r3, #45	@ 0x2d
 8009da6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009daa:	e79e      	b.n	8009cea <_printf_float+0xa2>
 8009dac:	9a06      	ldr	r2, [sp, #24]
 8009dae:	2a47      	cmp	r2, #71	@ 0x47
 8009db0:	d1c2      	bne.n	8009d38 <_printf_float+0xf0>
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d1c0      	bne.n	8009d38 <_printf_float+0xf0>
 8009db6:	2301      	movs	r3, #1
 8009db8:	e7bd      	b.n	8009d36 <_printf_float+0xee>
 8009dba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009dbe:	d9db      	bls.n	8009d78 <_printf_float+0x130>
 8009dc0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009dc4:	d118      	bne.n	8009df8 <_printf_float+0x1b0>
 8009dc6:	2900      	cmp	r1, #0
 8009dc8:	6863      	ldr	r3, [r4, #4]
 8009dca:	dd0b      	ble.n	8009de4 <_printf_float+0x19c>
 8009dcc:	6121      	str	r1, [r4, #16]
 8009dce:	b913      	cbnz	r3, 8009dd6 <_printf_float+0x18e>
 8009dd0:	6822      	ldr	r2, [r4, #0]
 8009dd2:	07d0      	lsls	r0, r2, #31
 8009dd4:	d502      	bpl.n	8009ddc <_printf_float+0x194>
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	440b      	add	r3, r1
 8009dda:	6123      	str	r3, [r4, #16]
 8009ddc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009dde:	f04f 0900 	mov.w	r9, #0
 8009de2:	e7db      	b.n	8009d9c <_printf_float+0x154>
 8009de4:	b913      	cbnz	r3, 8009dec <_printf_float+0x1a4>
 8009de6:	6822      	ldr	r2, [r4, #0]
 8009de8:	07d2      	lsls	r2, r2, #31
 8009dea:	d501      	bpl.n	8009df0 <_printf_float+0x1a8>
 8009dec:	3302      	adds	r3, #2
 8009dee:	e7f4      	b.n	8009dda <_printf_float+0x192>
 8009df0:	2301      	movs	r3, #1
 8009df2:	e7f2      	b.n	8009dda <_printf_float+0x192>
 8009df4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009df8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dfa:	4299      	cmp	r1, r3
 8009dfc:	db05      	blt.n	8009e0a <_printf_float+0x1c2>
 8009dfe:	6823      	ldr	r3, [r4, #0]
 8009e00:	6121      	str	r1, [r4, #16]
 8009e02:	07d8      	lsls	r0, r3, #31
 8009e04:	d5ea      	bpl.n	8009ddc <_printf_float+0x194>
 8009e06:	1c4b      	adds	r3, r1, #1
 8009e08:	e7e7      	b.n	8009dda <_printf_float+0x192>
 8009e0a:	2900      	cmp	r1, #0
 8009e0c:	bfd4      	ite	le
 8009e0e:	f1c1 0202 	rsble	r2, r1, #2
 8009e12:	2201      	movgt	r2, #1
 8009e14:	4413      	add	r3, r2
 8009e16:	e7e0      	b.n	8009dda <_printf_float+0x192>
 8009e18:	6823      	ldr	r3, [r4, #0]
 8009e1a:	055a      	lsls	r2, r3, #21
 8009e1c:	d407      	bmi.n	8009e2e <_printf_float+0x1e6>
 8009e1e:	6923      	ldr	r3, [r4, #16]
 8009e20:	4642      	mov	r2, r8
 8009e22:	4631      	mov	r1, r6
 8009e24:	4628      	mov	r0, r5
 8009e26:	47b8      	blx	r7
 8009e28:	3001      	adds	r0, #1
 8009e2a:	d12b      	bne.n	8009e84 <_printf_float+0x23c>
 8009e2c:	e767      	b.n	8009cfe <_printf_float+0xb6>
 8009e2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009e32:	f240 80dd 	bls.w	8009ff0 <_printf_float+0x3a8>
 8009e36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	f7f6 fe43 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e42:	2800      	cmp	r0, #0
 8009e44:	d033      	beq.n	8009eae <_printf_float+0x266>
 8009e46:	4a37      	ldr	r2, [pc, #220]	@ (8009f24 <_printf_float+0x2dc>)
 8009e48:	2301      	movs	r3, #1
 8009e4a:	4631      	mov	r1, r6
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	47b8      	blx	r7
 8009e50:	3001      	adds	r0, #1
 8009e52:	f43f af54 	beq.w	8009cfe <_printf_float+0xb6>
 8009e56:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009e5a:	4543      	cmp	r3, r8
 8009e5c:	db02      	blt.n	8009e64 <_printf_float+0x21c>
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	07d8      	lsls	r0, r3, #31
 8009e62:	d50f      	bpl.n	8009e84 <_printf_float+0x23c>
 8009e64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e68:	4631      	mov	r1, r6
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	47b8      	blx	r7
 8009e6e:	3001      	adds	r0, #1
 8009e70:	f43f af45 	beq.w	8009cfe <_printf_float+0xb6>
 8009e74:	f04f 0900 	mov.w	r9, #0
 8009e78:	f108 38ff 	add.w	r8, r8, #4294967295
 8009e7c:	f104 0a1a 	add.w	sl, r4, #26
 8009e80:	45c8      	cmp	r8, r9
 8009e82:	dc09      	bgt.n	8009e98 <_printf_float+0x250>
 8009e84:	6823      	ldr	r3, [r4, #0]
 8009e86:	079b      	lsls	r3, r3, #30
 8009e88:	f100 8103 	bmi.w	800a092 <_printf_float+0x44a>
 8009e8c:	68e0      	ldr	r0, [r4, #12]
 8009e8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e90:	4298      	cmp	r0, r3
 8009e92:	bfb8      	it	lt
 8009e94:	4618      	movlt	r0, r3
 8009e96:	e734      	b.n	8009d02 <_printf_float+0xba>
 8009e98:	2301      	movs	r3, #1
 8009e9a:	4652      	mov	r2, sl
 8009e9c:	4631      	mov	r1, r6
 8009e9e:	4628      	mov	r0, r5
 8009ea0:	47b8      	blx	r7
 8009ea2:	3001      	adds	r0, #1
 8009ea4:	f43f af2b 	beq.w	8009cfe <_printf_float+0xb6>
 8009ea8:	f109 0901 	add.w	r9, r9, #1
 8009eac:	e7e8      	b.n	8009e80 <_printf_float+0x238>
 8009eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	dc39      	bgt.n	8009f28 <_printf_float+0x2e0>
 8009eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8009f24 <_printf_float+0x2dc>)
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	4631      	mov	r1, r6
 8009eba:	4628      	mov	r0, r5
 8009ebc:	47b8      	blx	r7
 8009ebe:	3001      	adds	r0, #1
 8009ec0:	f43f af1d 	beq.w	8009cfe <_printf_float+0xb6>
 8009ec4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009ec8:	ea59 0303 	orrs.w	r3, r9, r3
 8009ecc:	d102      	bne.n	8009ed4 <_printf_float+0x28c>
 8009ece:	6823      	ldr	r3, [r4, #0]
 8009ed0:	07d9      	lsls	r1, r3, #31
 8009ed2:	d5d7      	bpl.n	8009e84 <_printf_float+0x23c>
 8009ed4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ed8:	4631      	mov	r1, r6
 8009eda:	4628      	mov	r0, r5
 8009edc:	47b8      	blx	r7
 8009ede:	3001      	adds	r0, #1
 8009ee0:	f43f af0d 	beq.w	8009cfe <_printf_float+0xb6>
 8009ee4:	f04f 0a00 	mov.w	sl, #0
 8009ee8:	f104 0b1a 	add.w	fp, r4, #26
 8009eec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eee:	425b      	negs	r3, r3
 8009ef0:	4553      	cmp	r3, sl
 8009ef2:	dc01      	bgt.n	8009ef8 <_printf_float+0x2b0>
 8009ef4:	464b      	mov	r3, r9
 8009ef6:	e793      	b.n	8009e20 <_printf_float+0x1d8>
 8009ef8:	2301      	movs	r3, #1
 8009efa:	465a      	mov	r2, fp
 8009efc:	4631      	mov	r1, r6
 8009efe:	4628      	mov	r0, r5
 8009f00:	47b8      	blx	r7
 8009f02:	3001      	adds	r0, #1
 8009f04:	f43f aefb 	beq.w	8009cfe <_printf_float+0xb6>
 8009f08:	f10a 0a01 	add.w	sl, sl, #1
 8009f0c:	e7ee      	b.n	8009eec <_printf_float+0x2a4>
 8009f0e:	bf00      	nop
 8009f10:	7fefffff 	.word	0x7fefffff
 8009f14:	0800d748 	.word	0x0800d748
 8009f18:	0800d74c 	.word	0x0800d74c
 8009f1c:	0800d750 	.word	0x0800d750
 8009f20:	0800d754 	.word	0x0800d754
 8009f24:	0800d758 	.word	0x0800d758
 8009f28:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009f2a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009f2e:	4553      	cmp	r3, sl
 8009f30:	bfa8      	it	ge
 8009f32:	4653      	movge	r3, sl
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	4699      	mov	r9, r3
 8009f38:	dc36      	bgt.n	8009fa8 <_printf_float+0x360>
 8009f3a:	f04f 0b00 	mov.w	fp, #0
 8009f3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f42:	f104 021a 	add.w	r2, r4, #26
 8009f46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009f48:	9306      	str	r3, [sp, #24]
 8009f4a:	eba3 0309 	sub.w	r3, r3, r9
 8009f4e:	455b      	cmp	r3, fp
 8009f50:	dc31      	bgt.n	8009fb6 <_printf_float+0x36e>
 8009f52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f54:	459a      	cmp	sl, r3
 8009f56:	dc3a      	bgt.n	8009fce <_printf_float+0x386>
 8009f58:	6823      	ldr	r3, [r4, #0]
 8009f5a:	07da      	lsls	r2, r3, #31
 8009f5c:	d437      	bmi.n	8009fce <_printf_float+0x386>
 8009f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f60:	ebaa 0903 	sub.w	r9, sl, r3
 8009f64:	9b06      	ldr	r3, [sp, #24]
 8009f66:	ebaa 0303 	sub.w	r3, sl, r3
 8009f6a:	4599      	cmp	r9, r3
 8009f6c:	bfa8      	it	ge
 8009f6e:	4699      	movge	r9, r3
 8009f70:	f1b9 0f00 	cmp.w	r9, #0
 8009f74:	dc33      	bgt.n	8009fde <_printf_float+0x396>
 8009f76:	f04f 0800 	mov.w	r8, #0
 8009f7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f7e:	f104 0b1a 	add.w	fp, r4, #26
 8009f82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f84:	ebaa 0303 	sub.w	r3, sl, r3
 8009f88:	eba3 0309 	sub.w	r3, r3, r9
 8009f8c:	4543      	cmp	r3, r8
 8009f8e:	f77f af79 	ble.w	8009e84 <_printf_float+0x23c>
 8009f92:	2301      	movs	r3, #1
 8009f94:	465a      	mov	r2, fp
 8009f96:	4631      	mov	r1, r6
 8009f98:	4628      	mov	r0, r5
 8009f9a:	47b8      	blx	r7
 8009f9c:	3001      	adds	r0, #1
 8009f9e:	f43f aeae 	beq.w	8009cfe <_printf_float+0xb6>
 8009fa2:	f108 0801 	add.w	r8, r8, #1
 8009fa6:	e7ec      	b.n	8009f82 <_printf_float+0x33a>
 8009fa8:	4642      	mov	r2, r8
 8009faa:	4631      	mov	r1, r6
 8009fac:	4628      	mov	r0, r5
 8009fae:	47b8      	blx	r7
 8009fb0:	3001      	adds	r0, #1
 8009fb2:	d1c2      	bne.n	8009f3a <_printf_float+0x2f2>
 8009fb4:	e6a3      	b.n	8009cfe <_printf_float+0xb6>
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	4631      	mov	r1, r6
 8009fba:	4628      	mov	r0, r5
 8009fbc:	9206      	str	r2, [sp, #24]
 8009fbe:	47b8      	blx	r7
 8009fc0:	3001      	adds	r0, #1
 8009fc2:	f43f ae9c 	beq.w	8009cfe <_printf_float+0xb6>
 8009fc6:	9a06      	ldr	r2, [sp, #24]
 8009fc8:	f10b 0b01 	add.w	fp, fp, #1
 8009fcc:	e7bb      	b.n	8009f46 <_printf_float+0x2fe>
 8009fce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fd2:	4631      	mov	r1, r6
 8009fd4:	4628      	mov	r0, r5
 8009fd6:	47b8      	blx	r7
 8009fd8:	3001      	adds	r0, #1
 8009fda:	d1c0      	bne.n	8009f5e <_printf_float+0x316>
 8009fdc:	e68f      	b.n	8009cfe <_printf_float+0xb6>
 8009fde:	9a06      	ldr	r2, [sp, #24]
 8009fe0:	464b      	mov	r3, r9
 8009fe2:	4442      	add	r2, r8
 8009fe4:	4631      	mov	r1, r6
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	47b8      	blx	r7
 8009fea:	3001      	adds	r0, #1
 8009fec:	d1c3      	bne.n	8009f76 <_printf_float+0x32e>
 8009fee:	e686      	b.n	8009cfe <_printf_float+0xb6>
 8009ff0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009ff4:	f1ba 0f01 	cmp.w	sl, #1
 8009ff8:	dc01      	bgt.n	8009ffe <_printf_float+0x3b6>
 8009ffa:	07db      	lsls	r3, r3, #31
 8009ffc:	d536      	bpl.n	800a06c <_printf_float+0x424>
 8009ffe:	2301      	movs	r3, #1
 800a000:	4642      	mov	r2, r8
 800a002:	4631      	mov	r1, r6
 800a004:	4628      	mov	r0, r5
 800a006:	47b8      	blx	r7
 800a008:	3001      	adds	r0, #1
 800a00a:	f43f ae78 	beq.w	8009cfe <_printf_float+0xb6>
 800a00e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a012:	4631      	mov	r1, r6
 800a014:	4628      	mov	r0, r5
 800a016:	47b8      	blx	r7
 800a018:	3001      	adds	r0, #1
 800a01a:	f43f ae70 	beq.w	8009cfe <_printf_float+0xb6>
 800a01e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a022:	2200      	movs	r2, #0
 800a024:	2300      	movs	r3, #0
 800a026:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a02a:	f7f6 fd4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a02e:	b9c0      	cbnz	r0, 800a062 <_printf_float+0x41a>
 800a030:	4653      	mov	r3, sl
 800a032:	f108 0201 	add.w	r2, r8, #1
 800a036:	4631      	mov	r1, r6
 800a038:	4628      	mov	r0, r5
 800a03a:	47b8      	blx	r7
 800a03c:	3001      	adds	r0, #1
 800a03e:	d10c      	bne.n	800a05a <_printf_float+0x412>
 800a040:	e65d      	b.n	8009cfe <_printf_float+0xb6>
 800a042:	2301      	movs	r3, #1
 800a044:	465a      	mov	r2, fp
 800a046:	4631      	mov	r1, r6
 800a048:	4628      	mov	r0, r5
 800a04a:	47b8      	blx	r7
 800a04c:	3001      	adds	r0, #1
 800a04e:	f43f ae56 	beq.w	8009cfe <_printf_float+0xb6>
 800a052:	f108 0801 	add.w	r8, r8, #1
 800a056:	45d0      	cmp	r8, sl
 800a058:	dbf3      	blt.n	800a042 <_printf_float+0x3fa>
 800a05a:	464b      	mov	r3, r9
 800a05c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a060:	e6df      	b.n	8009e22 <_printf_float+0x1da>
 800a062:	f04f 0800 	mov.w	r8, #0
 800a066:	f104 0b1a 	add.w	fp, r4, #26
 800a06a:	e7f4      	b.n	800a056 <_printf_float+0x40e>
 800a06c:	2301      	movs	r3, #1
 800a06e:	4642      	mov	r2, r8
 800a070:	e7e1      	b.n	800a036 <_printf_float+0x3ee>
 800a072:	2301      	movs	r3, #1
 800a074:	464a      	mov	r2, r9
 800a076:	4631      	mov	r1, r6
 800a078:	4628      	mov	r0, r5
 800a07a:	47b8      	blx	r7
 800a07c:	3001      	adds	r0, #1
 800a07e:	f43f ae3e 	beq.w	8009cfe <_printf_float+0xb6>
 800a082:	f108 0801 	add.w	r8, r8, #1
 800a086:	68e3      	ldr	r3, [r4, #12]
 800a088:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a08a:	1a5b      	subs	r3, r3, r1
 800a08c:	4543      	cmp	r3, r8
 800a08e:	dcf0      	bgt.n	800a072 <_printf_float+0x42a>
 800a090:	e6fc      	b.n	8009e8c <_printf_float+0x244>
 800a092:	f04f 0800 	mov.w	r8, #0
 800a096:	f104 0919 	add.w	r9, r4, #25
 800a09a:	e7f4      	b.n	800a086 <_printf_float+0x43e>

0800a09c <_printf_common>:
 800a09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0a0:	4616      	mov	r6, r2
 800a0a2:	4698      	mov	r8, r3
 800a0a4:	688a      	ldr	r2, [r1, #8]
 800a0a6:	690b      	ldr	r3, [r1, #16]
 800a0a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	bfb8      	it	lt
 800a0b0:	4613      	movlt	r3, r2
 800a0b2:	6033      	str	r3, [r6, #0]
 800a0b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a0b8:	4607      	mov	r7, r0
 800a0ba:	460c      	mov	r4, r1
 800a0bc:	b10a      	cbz	r2, 800a0c2 <_printf_common+0x26>
 800a0be:	3301      	adds	r3, #1
 800a0c0:	6033      	str	r3, [r6, #0]
 800a0c2:	6823      	ldr	r3, [r4, #0]
 800a0c4:	0699      	lsls	r1, r3, #26
 800a0c6:	bf42      	ittt	mi
 800a0c8:	6833      	ldrmi	r3, [r6, #0]
 800a0ca:	3302      	addmi	r3, #2
 800a0cc:	6033      	strmi	r3, [r6, #0]
 800a0ce:	6825      	ldr	r5, [r4, #0]
 800a0d0:	f015 0506 	ands.w	r5, r5, #6
 800a0d4:	d106      	bne.n	800a0e4 <_printf_common+0x48>
 800a0d6:	f104 0a19 	add.w	sl, r4, #25
 800a0da:	68e3      	ldr	r3, [r4, #12]
 800a0dc:	6832      	ldr	r2, [r6, #0]
 800a0de:	1a9b      	subs	r3, r3, r2
 800a0e0:	42ab      	cmp	r3, r5
 800a0e2:	dc26      	bgt.n	800a132 <_printf_common+0x96>
 800a0e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a0e8:	6822      	ldr	r2, [r4, #0]
 800a0ea:	3b00      	subs	r3, #0
 800a0ec:	bf18      	it	ne
 800a0ee:	2301      	movne	r3, #1
 800a0f0:	0692      	lsls	r2, r2, #26
 800a0f2:	d42b      	bmi.n	800a14c <_printf_common+0xb0>
 800a0f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a0f8:	4641      	mov	r1, r8
 800a0fa:	4638      	mov	r0, r7
 800a0fc:	47c8      	blx	r9
 800a0fe:	3001      	adds	r0, #1
 800a100:	d01e      	beq.n	800a140 <_printf_common+0xa4>
 800a102:	6823      	ldr	r3, [r4, #0]
 800a104:	6922      	ldr	r2, [r4, #16]
 800a106:	f003 0306 	and.w	r3, r3, #6
 800a10a:	2b04      	cmp	r3, #4
 800a10c:	bf02      	ittt	eq
 800a10e:	68e5      	ldreq	r5, [r4, #12]
 800a110:	6833      	ldreq	r3, [r6, #0]
 800a112:	1aed      	subeq	r5, r5, r3
 800a114:	68a3      	ldr	r3, [r4, #8]
 800a116:	bf0c      	ite	eq
 800a118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a11c:	2500      	movne	r5, #0
 800a11e:	4293      	cmp	r3, r2
 800a120:	bfc4      	itt	gt
 800a122:	1a9b      	subgt	r3, r3, r2
 800a124:	18ed      	addgt	r5, r5, r3
 800a126:	2600      	movs	r6, #0
 800a128:	341a      	adds	r4, #26
 800a12a:	42b5      	cmp	r5, r6
 800a12c:	d11a      	bne.n	800a164 <_printf_common+0xc8>
 800a12e:	2000      	movs	r0, #0
 800a130:	e008      	b.n	800a144 <_printf_common+0xa8>
 800a132:	2301      	movs	r3, #1
 800a134:	4652      	mov	r2, sl
 800a136:	4641      	mov	r1, r8
 800a138:	4638      	mov	r0, r7
 800a13a:	47c8      	blx	r9
 800a13c:	3001      	adds	r0, #1
 800a13e:	d103      	bne.n	800a148 <_printf_common+0xac>
 800a140:	f04f 30ff 	mov.w	r0, #4294967295
 800a144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a148:	3501      	adds	r5, #1
 800a14a:	e7c6      	b.n	800a0da <_printf_common+0x3e>
 800a14c:	18e1      	adds	r1, r4, r3
 800a14e:	1c5a      	adds	r2, r3, #1
 800a150:	2030      	movs	r0, #48	@ 0x30
 800a152:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a156:	4422      	add	r2, r4
 800a158:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a15c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a160:	3302      	adds	r3, #2
 800a162:	e7c7      	b.n	800a0f4 <_printf_common+0x58>
 800a164:	2301      	movs	r3, #1
 800a166:	4622      	mov	r2, r4
 800a168:	4641      	mov	r1, r8
 800a16a:	4638      	mov	r0, r7
 800a16c:	47c8      	blx	r9
 800a16e:	3001      	adds	r0, #1
 800a170:	d0e6      	beq.n	800a140 <_printf_common+0xa4>
 800a172:	3601      	adds	r6, #1
 800a174:	e7d9      	b.n	800a12a <_printf_common+0x8e>
	...

0800a178 <_printf_i>:
 800a178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a17c:	7e0f      	ldrb	r7, [r1, #24]
 800a17e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a180:	2f78      	cmp	r7, #120	@ 0x78
 800a182:	4691      	mov	r9, r2
 800a184:	4680      	mov	r8, r0
 800a186:	460c      	mov	r4, r1
 800a188:	469a      	mov	sl, r3
 800a18a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a18e:	d807      	bhi.n	800a1a0 <_printf_i+0x28>
 800a190:	2f62      	cmp	r7, #98	@ 0x62
 800a192:	d80a      	bhi.n	800a1aa <_printf_i+0x32>
 800a194:	2f00      	cmp	r7, #0
 800a196:	f000 80d2 	beq.w	800a33e <_printf_i+0x1c6>
 800a19a:	2f58      	cmp	r7, #88	@ 0x58
 800a19c:	f000 80b9 	beq.w	800a312 <_printf_i+0x19a>
 800a1a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a1a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a1a8:	e03a      	b.n	800a220 <_printf_i+0xa8>
 800a1aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a1ae:	2b15      	cmp	r3, #21
 800a1b0:	d8f6      	bhi.n	800a1a0 <_printf_i+0x28>
 800a1b2:	a101      	add	r1, pc, #4	@ (adr r1, 800a1b8 <_printf_i+0x40>)
 800a1b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a1b8:	0800a211 	.word	0x0800a211
 800a1bc:	0800a225 	.word	0x0800a225
 800a1c0:	0800a1a1 	.word	0x0800a1a1
 800a1c4:	0800a1a1 	.word	0x0800a1a1
 800a1c8:	0800a1a1 	.word	0x0800a1a1
 800a1cc:	0800a1a1 	.word	0x0800a1a1
 800a1d0:	0800a225 	.word	0x0800a225
 800a1d4:	0800a1a1 	.word	0x0800a1a1
 800a1d8:	0800a1a1 	.word	0x0800a1a1
 800a1dc:	0800a1a1 	.word	0x0800a1a1
 800a1e0:	0800a1a1 	.word	0x0800a1a1
 800a1e4:	0800a325 	.word	0x0800a325
 800a1e8:	0800a24f 	.word	0x0800a24f
 800a1ec:	0800a2df 	.word	0x0800a2df
 800a1f0:	0800a1a1 	.word	0x0800a1a1
 800a1f4:	0800a1a1 	.word	0x0800a1a1
 800a1f8:	0800a347 	.word	0x0800a347
 800a1fc:	0800a1a1 	.word	0x0800a1a1
 800a200:	0800a24f 	.word	0x0800a24f
 800a204:	0800a1a1 	.word	0x0800a1a1
 800a208:	0800a1a1 	.word	0x0800a1a1
 800a20c:	0800a2e7 	.word	0x0800a2e7
 800a210:	6833      	ldr	r3, [r6, #0]
 800a212:	1d1a      	adds	r2, r3, #4
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	6032      	str	r2, [r6, #0]
 800a218:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a21c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a220:	2301      	movs	r3, #1
 800a222:	e09d      	b.n	800a360 <_printf_i+0x1e8>
 800a224:	6833      	ldr	r3, [r6, #0]
 800a226:	6820      	ldr	r0, [r4, #0]
 800a228:	1d19      	adds	r1, r3, #4
 800a22a:	6031      	str	r1, [r6, #0]
 800a22c:	0606      	lsls	r6, r0, #24
 800a22e:	d501      	bpl.n	800a234 <_printf_i+0xbc>
 800a230:	681d      	ldr	r5, [r3, #0]
 800a232:	e003      	b.n	800a23c <_printf_i+0xc4>
 800a234:	0645      	lsls	r5, r0, #25
 800a236:	d5fb      	bpl.n	800a230 <_printf_i+0xb8>
 800a238:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a23c:	2d00      	cmp	r5, #0
 800a23e:	da03      	bge.n	800a248 <_printf_i+0xd0>
 800a240:	232d      	movs	r3, #45	@ 0x2d
 800a242:	426d      	negs	r5, r5
 800a244:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a248:	4859      	ldr	r0, [pc, #356]	@ (800a3b0 <_printf_i+0x238>)
 800a24a:	230a      	movs	r3, #10
 800a24c:	e011      	b.n	800a272 <_printf_i+0xfa>
 800a24e:	6821      	ldr	r1, [r4, #0]
 800a250:	6833      	ldr	r3, [r6, #0]
 800a252:	0608      	lsls	r0, r1, #24
 800a254:	f853 5b04 	ldr.w	r5, [r3], #4
 800a258:	d402      	bmi.n	800a260 <_printf_i+0xe8>
 800a25a:	0649      	lsls	r1, r1, #25
 800a25c:	bf48      	it	mi
 800a25e:	b2ad      	uxthmi	r5, r5
 800a260:	2f6f      	cmp	r7, #111	@ 0x6f
 800a262:	4853      	ldr	r0, [pc, #332]	@ (800a3b0 <_printf_i+0x238>)
 800a264:	6033      	str	r3, [r6, #0]
 800a266:	bf14      	ite	ne
 800a268:	230a      	movne	r3, #10
 800a26a:	2308      	moveq	r3, #8
 800a26c:	2100      	movs	r1, #0
 800a26e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a272:	6866      	ldr	r6, [r4, #4]
 800a274:	60a6      	str	r6, [r4, #8]
 800a276:	2e00      	cmp	r6, #0
 800a278:	bfa2      	ittt	ge
 800a27a:	6821      	ldrge	r1, [r4, #0]
 800a27c:	f021 0104 	bicge.w	r1, r1, #4
 800a280:	6021      	strge	r1, [r4, #0]
 800a282:	b90d      	cbnz	r5, 800a288 <_printf_i+0x110>
 800a284:	2e00      	cmp	r6, #0
 800a286:	d04b      	beq.n	800a320 <_printf_i+0x1a8>
 800a288:	4616      	mov	r6, r2
 800a28a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a28e:	fb03 5711 	mls	r7, r3, r1, r5
 800a292:	5dc7      	ldrb	r7, [r0, r7]
 800a294:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a298:	462f      	mov	r7, r5
 800a29a:	42bb      	cmp	r3, r7
 800a29c:	460d      	mov	r5, r1
 800a29e:	d9f4      	bls.n	800a28a <_printf_i+0x112>
 800a2a0:	2b08      	cmp	r3, #8
 800a2a2:	d10b      	bne.n	800a2bc <_printf_i+0x144>
 800a2a4:	6823      	ldr	r3, [r4, #0]
 800a2a6:	07df      	lsls	r7, r3, #31
 800a2a8:	d508      	bpl.n	800a2bc <_printf_i+0x144>
 800a2aa:	6923      	ldr	r3, [r4, #16]
 800a2ac:	6861      	ldr	r1, [r4, #4]
 800a2ae:	4299      	cmp	r1, r3
 800a2b0:	bfde      	ittt	le
 800a2b2:	2330      	movle	r3, #48	@ 0x30
 800a2b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a2b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a2bc:	1b92      	subs	r2, r2, r6
 800a2be:	6122      	str	r2, [r4, #16]
 800a2c0:	f8cd a000 	str.w	sl, [sp]
 800a2c4:	464b      	mov	r3, r9
 800a2c6:	aa03      	add	r2, sp, #12
 800a2c8:	4621      	mov	r1, r4
 800a2ca:	4640      	mov	r0, r8
 800a2cc:	f7ff fee6 	bl	800a09c <_printf_common>
 800a2d0:	3001      	adds	r0, #1
 800a2d2:	d14a      	bne.n	800a36a <_printf_i+0x1f2>
 800a2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d8:	b004      	add	sp, #16
 800a2da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2de:	6823      	ldr	r3, [r4, #0]
 800a2e0:	f043 0320 	orr.w	r3, r3, #32
 800a2e4:	6023      	str	r3, [r4, #0]
 800a2e6:	4833      	ldr	r0, [pc, #204]	@ (800a3b4 <_printf_i+0x23c>)
 800a2e8:	2778      	movs	r7, #120	@ 0x78
 800a2ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a2ee:	6823      	ldr	r3, [r4, #0]
 800a2f0:	6831      	ldr	r1, [r6, #0]
 800a2f2:	061f      	lsls	r7, r3, #24
 800a2f4:	f851 5b04 	ldr.w	r5, [r1], #4
 800a2f8:	d402      	bmi.n	800a300 <_printf_i+0x188>
 800a2fa:	065f      	lsls	r7, r3, #25
 800a2fc:	bf48      	it	mi
 800a2fe:	b2ad      	uxthmi	r5, r5
 800a300:	6031      	str	r1, [r6, #0]
 800a302:	07d9      	lsls	r1, r3, #31
 800a304:	bf44      	itt	mi
 800a306:	f043 0320 	orrmi.w	r3, r3, #32
 800a30a:	6023      	strmi	r3, [r4, #0]
 800a30c:	b11d      	cbz	r5, 800a316 <_printf_i+0x19e>
 800a30e:	2310      	movs	r3, #16
 800a310:	e7ac      	b.n	800a26c <_printf_i+0xf4>
 800a312:	4827      	ldr	r0, [pc, #156]	@ (800a3b0 <_printf_i+0x238>)
 800a314:	e7e9      	b.n	800a2ea <_printf_i+0x172>
 800a316:	6823      	ldr	r3, [r4, #0]
 800a318:	f023 0320 	bic.w	r3, r3, #32
 800a31c:	6023      	str	r3, [r4, #0]
 800a31e:	e7f6      	b.n	800a30e <_printf_i+0x196>
 800a320:	4616      	mov	r6, r2
 800a322:	e7bd      	b.n	800a2a0 <_printf_i+0x128>
 800a324:	6833      	ldr	r3, [r6, #0]
 800a326:	6825      	ldr	r5, [r4, #0]
 800a328:	6961      	ldr	r1, [r4, #20]
 800a32a:	1d18      	adds	r0, r3, #4
 800a32c:	6030      	str	r0, [r6, #0]
 800a32e:	062e      	lsls	r6, r5, #24
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	d501      	bpl.n	800a338 <_printf_i+0x1c0>
 800a334:	6019      	str	r1, [r3, #0]
 800a336:	e002      	b.n	800a33e <_printf_i+0x1c6>
 800a338:	0668      	lsls	r0, r5, #25
 800a33a:	d5fb      	bpl.n	800a334 <_printf_i+0x1bc>
 800a33c:	8019      	strh	r1, [r3, #0]
 800a33e:	2300      	movs	r3, #0
 800a340:	6123      	str	r3, [r4, #16]
 800a342:	4616      	mov	r6, r2
 800a344:	e7bc      	b.n	800a2c0 <_printf_i+0x148>
 800a346:	6833      	ldr	r3, [r6, #0]
 800a348:	1d1a      	adds	r2, r3, #4
 800a34a:	6032      	str	r2, [r6, #0]
 800a34c:	681e      	ldr	r6, [r3, #0]
 800a34e:	6862      	ldr	r2, [r4, #4]
 800a350:	2100      	movs	r1, #0
 800a352:	4630      	mov	r0, r6
 800a354:	f7f5 ff3c 	bl	80001d0 <memchr>
 800a358:	b108      	cbz	r0, 800a35e <_printf_i+0x1e6>
 800a35a:	1b80      	subs	r0, r0, r6
 800a35c:	6060      	str	r0, [r4, #4]
 800a35e:	6863      	ldr	r3, [r4, #4]
 800a360:	6123      	str	r3, [r4, #16]
 800a362:	2300      	movs	r3, #0
 800a364:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a368:	e7aa      	b.n	800a2c0 <_printf_i+0x148>
 800a36a:	6923      	ldr	r3, [r4, #16]
 800a36c:	4632      	mov	r2, r6
 800a36e:	4649      	mov	r1, r9
 800a370:	4640      	mov	r0, r8
 800a372:	47d0      	blx	sl
 800a374:	3001      	adds	r0, #1
 800a376:	d0ad      	beq.n	800a2d4 <_printf_i+0x15c>
 800a378:	6823      	ldr	r3, [r4, #0]
 800a37a:	079b      	lsls	r3, r3, #30
 800a37c:	d413      	bmi.n	800a3a6 <_printf_i+0x22e>
 800a37e:	68e0      	ldr	r0, [r4, #12]
 800a380:	9b03      	ldr	r3, [sp, #12]
 800a382:	4298      	cmp	r0, r3
 800a384:	bfb8      	it	lt
 800a386:	4618      	movlt	r0, r3
 800a388:	e7a6      	b.n	800a2d8 <_printf_i+0x160>
 800a38a:	2301      	movs	r3, #1
 800a38c:	4632      	mov	r2, r6
 800a38e:	4649      	mov	r1, r9
 800a390:	4640      	mov	r0, r8
 800a392:	47d0      	blx	sl
 800a394:	3001      	adds	r0, #1
 800a396:	d09d      	beq.n	800a2d4 <_printf_i+0x15c>
 800a398:	3501      	adds	r5, #1
 800a39a:	68e3      	ldr	r3, [r4, #12]
 800a39c:	9903      	ldr	r1, [sp, #12]
 800a39e:	1a5b      	subs	r3, r3, r1
 800a3a0:	42ab      	cmp	r3, r5
 800a3a2:	dcf2      	bgt.n	800a38a <_printf_i+0x212>
 800a3a4:	e7eb      	b.n	800a37e <_printf_i+0x206>
 800a3a6:	2500      	movs	r5, #0
 800a3a8:	f104 0619 	add.w	r6, r4, #25
 800a3ac:	e7f5      	b.n	800a39a <_printf_i+0x222>
 800a3ae:	bf00      	nop
 800a3b0:	0800d75a 	.word	0x0800d75a
 800a3b4:	0800d76b 	.word	0x0800d76b

0800a3b8 <std>:
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	b510      	push	{r4, lr}
 800a3bc:	4604      	mov	r4, r0
 800a3be:	e9c0 3300 	strd	r3, r3, [r0]
 800a3c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a3c6:	6083      	str	r3, [r0, #8]
 800a3c8:	8181      	strh	r1, [r0, #12]
 800a3ca:	6643      	str	r3, [r0, #100]	@ 0x64
 800a3cc:	81c2      	strh	r2, [r0, #14]
 800a3ce:	6183      	str	r3, [r0, #24]
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	2208      	movs	r2, #8
 800a3d4:	305c      	adds	r0, #92	@ 0x5c
 800a3d6:	f000 f92d 	bl	800a634 <memset>
 800a3da:	4b0d      	ldr	r3, [pc, #52]	@ (800a410 <std+0x58>)
 800a3dc:	6263      	str	r3, [r4, #36]	@ 0x24
 800a3de:	4b0d      	ldr	r3, [pc, #52]	@ (800a414 <std+0x5c>)
 800a3e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a3e2:	4b0d      	ldr	r3, [pc, #52]	@ (800a418 <std+0x60>)
 800a3e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a3e6:	4b0d      	ldr	r3, [pc, #52]	@ (800a41c <std+0x64>)
 800a3e8:	6323      	str	r3, [r4, #48]	@ 0x30
 800a3ea:	4b0d      	ldr	r3, [pc, #52]	@ (800a420 <std+0x68>)
 800a3ec:	6224      	str	r4, [r4, #32]
 800a3ee:	429c      	cmp	r4, r3
 800a3f0:	d006      	beq.n	800a400 <std+0x48>
 800a3f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a3f6:	4294      	cmp	r4, r2
 800a3f8:	d002      	beq.n	800a400 <std+0x48>
 800a3fa:	33d0      	adds	r3, #208	@ 0xd0
 800a3fc:	429c      	cmp	r4, r3
 800a3fe:	d105      	bne.n	800a40c <std+0x54>
 800a400:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a408:	f000 b990 	b.w	800a72c <__retarget_lock_init_recursive>
 800a40c:	bd10      	pop	{r4, pc}
 800a40e:	bf00      	nop
 800a410:	0800a53d 	.word	0x0800a53d
 800a414:	0800a55f 	.word	0x0800a55f
 800a418:	0800a597 	.word	0x0800a597
 800a41c:	0800a5bb 	.word	0x0800a5bb
 800a420:	2000be50 	.word	0x2000be50

0800a424 <stdio_exit_handler>:
 800a424:	4a02      	ldr	r2, [pc, #8]	@ (800a430 <stdio_exit_handler+0xc>)
 800a426:	4903      	ldr	r1, [pc, #12]	@ (800a434 <stdio_exit_handler+0x10>)
 800a428:	4803      	ldr	r0, [pc, #12]	@ (800a438 <stdio_exit_handler+0x14>)
 800a42a:	f000 b869 	b.w	800a500 <_fwalk_sglue>
 800a42e:	bf00      	nop
 800a430:	20000024 	.word	0x20000024
 800a434:	0800c0a5 	.word	0x0800c0a5
 800a438:	20000034 	.word	0x20000034

0800a43c <cleanup_stdio>:
 800a43c:	6841      	ldr	r1, [r0, #4]
 800a43e:	4b0c      	ldr	r3, [pc, #48]	@ (800a470 <cleanup_stdio+0x34>)
 800a440:	4299      	cmp	r1, r3
 800a442:	b510      	push	{r4, lr}
 800a444:	4604      	mov	r4, r0
 800a446:	d001      	beq.n	800a44c <cleanup_stdio+0x10>
 800a448:	f001 fe2c 	bl	800c0a4 <_fflush_r>
 800a44c:	68a1      	ldr	r1, [r4, #8]
 800a44e:	4b09      	ldr	r3, [pc, #36]	@ (800a474 <cleanup_stdio+0x38>)
 800a450:	4299      	cmp	r1, r3
 800a452:	d002      	beq.n	800a45a <cleanup_stdio+0x1e>
 800a454:	4620      	mov	r0, r4
 800a456:	f001 fe25 	bl	800c0a4 <_fflush_r>
 800a45a:	68e1      	ldr	r1, [r4, #12]
 800a45c:	4b06      	ldr	r3, [pc, #24]	@ (800a478 <cleanup_stdio+0x3c>)
 800a45e:	4299      	cmp	r1, r3
 800a460:	d004      	beq.n	800a46c <cleanup_stdio+0x30>
 800a462:	4620      	mov	r0, r4
 800a464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a468:	f001 be1c 	b.w	800c0a4 <_fflush_r>
 800a46c:	bd10      	pop	{r4, pc}
 800a46e:	bf00      	nop
 800a470:	2000be50 	.word	0x2000be50
 800a474:	2000beb8 	.word	0x2000beb8
 800a478:	2000bf20 	.word	0x2000bf20

0800a47c <global_stdio_init.part.0>:
 800a47c:	b510      	push	{r4, lr}
 800a47e:	4b0b      	ldr	r3, [pc, #44]	@ (800a4ac <global_stdio_init.part.0+0x30>)
 800a480:	4c0b      	ldr	r4, [pc, #44]	@ (800a4b0 <global_stdio_init.part.0+0x34>)
 800a482:	4a0c      	ldr	r2, [pc, #48]	@ (800a4b4 <global_stdio_init.part.0+0x38>)
 800a484:	601a      	str	r2, [r3, #0]
 800a486:	4620      	mov	r0, r4
 800a488:	2200      	movs	r2, #0
 800a48a:	2104      	movs	r1, #4
 800a48c:	f7ff ff94 	bl	800a3b8 <std>
 800a490:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a494:	2201      	movs	r2, #1
 800a496:	2109      	movs	r1, #9
 800a498:	f7ff ff8e 	bl	800a3b8 <std>
 800a49c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a4a0:	2202      	movs	r2, #2
 800a4a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4a6:	2112      	movs	r1, #18
 800a4a8:	f7ff bf86 	b.w	800a3b8 <std>
 800a4ac:	2000bf88 	.word	0x2000bf88
 800a4b0:	2000be50 	.word	0x2000be50
 800a4b4:	0800a425 	.word	0x0800a425

0800a4b8 <__sfp_lock_acquire>:
 800a4b8:	4801      	ldr	r0, [pc, #4]	@ (800a4c0 <__sfp_lock_acquire+0x8>)
 800a4ba:	f000 b938 	b.w	800a72e <__retarget_lock_acquire_recursive>
 800a4be:	bf00      	nop
 800a4c0:	2000bf91 	.word	0x2000bf91

0800a4c4 <__sfp_lock_release>:
 800a4c4:	4801      	ldr	r0, [pc, #4]	@ (800a4cc <__sfp_lock_release+0x8>)
 800a4c6:	f000 b933 	b.w	800a730 <__retarget_lock_release_recursive>
 800a4ca:	bf00      	nop
 800a4cc:	2000bf91 	.word	0x2000bf91

0800a4d0 <__sinit>:
 800a4d0:	b510      	push	{r4, lr}
 800a4d2:	4604      	mov	r4, r0
 800a4d4:	f7ff fff0 	bl	800a4b8 <__sfp_lock_acquire>
 800a4d8:	6a23      	ldr	r3, [r4, #32]
 800a4da:	b11b      	cbz	r3, 800a4e4 <__sinit+0x14>
 800a4dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4e0:	f7ff bff0 	b.w	800a4c4 <__sfp_lock_release>
 800a4e4:	4b04      	ldr	r3, [pc, #16]	@ (800a4f8 <__sinit+0x28>)
 800a4e6:	6223      	str	r3, [r4, #32]
 800a4e8:	4b04      	ldr	r3, [pc, #16]	@ (800a4fc <__sinit+0x2c>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d1f5      	bne.n	800a4dc <__sinit+0xc>
 800a4f0:	f7ff ffc4 	bl	800a47c <global_stdio_init.part.0>
 800a4f4:	e7f2      	b.n	800a4dc <__sinit+0xc>
 800a4f6:	bf00      	nop
 800a4f8:	0800a43d 	.word	0x0800a43d
 800a4fc:	2000bf88 	.word	0x2000bf88

0800a500 <_fwalk_sglue>:
 800a500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a504:	4607      	mov	r7, r0
 800a506:	4688      	mov	r8, r1
 800a508:	4614      	mov	r4, r2
 800a50a:	2600      	movs	r6, #0
 800a50c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a510:	f1b9 0901 	subs.w	r9, r9, #1
 800a514:	d505      	bpl.n	800a522 <_fwalk_sglue+0x22>
 800a516:	6824      	ldr	r4, [r4, #0]
 800a518:	2c00      	cmp	r4, #0
 800a51a:	d1f7      	bne.n	800a50c <_fwalk_sglue+0xc>
 800a51c:	4630      	mov	r0, r6
 800a51e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a522:	89ab      	ldrh	r3, [r5, #12]
 800a524:	2b01      	cmp	r3, #1
 800a526:	d907      	bls.n	800a538 <_fwalk_sglue+0x38>
 800a528:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a52c:	3301      	adds	r3, #1
 800a52e:	d003      	beq.n	800a538 <_fwalk_sglue+0x38>
 800a530:	4629      	mov	r1, r5
 800a532:	4638      	mov	r0, r7
 800a534:	47c0      	blx	r8
 800a536:	4306      	orrs	r6, r0
 800a538:	3568      	adds	r5, #104	@ 0x68
 800a53a:	e7e9      	b.n	800a510 <_fwalk_sglue+0x10>

0800a53c <__sread>:
 800a53c:	b510      	push	{r4, lr}
 800a53e:	460c      	mov	r4, r1
 800a540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a544:	f000 f8a4 	bl	800a690 <_read_r>
 800a548:	2800      	cmp	r0, #0
 800a54a:	bfab      	itete	ge
 800a54c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a54e:	89a3      	ldrhlt	r3, [r4, #12]
 800a550:	181b      	addge	r3, r3, r0
 800a552:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a556:	bfac      	ite	ge
 800a558:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a55a:	81a3      	strhlt	r3, [r4, #12]
 800a55c:	bd10      	pop	{r4, pc}

0800a55e <__swrite>:
 800a55e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a562:	461f      	mov	r7, r3
 800a564:	898b      	ldrh	r3, [r1, #12]
 800a566:	05db      	lsls	r3, r3, #23
 800a568:	4605      	mov	r5, r0
 800a56a:	460c      	mov	r4, r1
 800a56c:	4616      	mov	r6, r2
 800a56e:	d505      	bpl.n	800a57c <__swrite+0x1e>
 800a570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a574:	2302      	movs	r3, #2
 800a576:	2200      	movs	r2, #0
 800a578:	f000 f878 	bl	800a66c <_lseek_r>
 800a57c:	89a3      	ldrh	r3, [r4, #12]
 800a57e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a582:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a586:	81a3      	strh	r3, [r4, #12]
 800a588:	4632      	mov	r2, r6
 800a58a:	463b      	mov	r3, r7
 800a58c:	4628      	mov	r0, r5
 800a58e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a592:	f000 b88f 	b.w	800a6b4 <_write_r>

0800a596 <__sseek>:
 800a596:	b510      	push	{r4, lr}
 800a598:	460c      	mov	r4, r1
 800a59a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a59e:	f000 f865 	bl	800a66c <_lseek_r>
 800a5a2:	1c43      	adds	r3, r0, #1
 800a5a4:	89a3      	ldrh	r3, [r4, #12]
 800a5a6:	bf15      	itete	ne
 800a5a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a5aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a5ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a5b2:	81a3      	strheq	r3, [r4, #12]
 800a5b4:	bf18      	it	ne
 800a5b6:	81a3      	strhne	r3, [r4, #12]
 800a5b8:	bd10      	pop	{r4, pc}

0800a5ba <__sclose>:
 800a5ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5be:	f000 b845 	b.w	800a64c <_close_r>

0800a5c2 <_vsniprintf_r>:
 800a5c2:	b530      	push	{r4, r5, lr}
 800a5c4:	4614      	mov	r4, r2
 800a5c6:	2c00      	cmp	r4, #0
 800a5c8:	b09b      	sub	sp, #108	@ 0x6c
 800a5ca:	4605      	mov	r5, r0
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	da05      	bge.n	800a5dc <_vsniprintf_r+0x1a>
 800a5d0:	238b      	movs	r3, #139	@ 0x8b
 800a5d2:	6003      	str	r3, [r0, #0]
 800a5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5d8:	b01b      	add	sp, #108	@ 0x6c
 800a5da:	bd30      	pop	{r4, r5, pc}
 800a5dc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a5e0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a5e4:	bf14      	ite	ne
 800a5e6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a5ea:	4623      	moveq	r3, r4
 800a5ec:	9302      	str	r3, [sp, #8]
 800a5ee:	9305      	str	r3, [sp, #20]
 800a5f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a5f4:	9100      	str	r1, [sp, #0]
 800a5f6:	9104      	str	r1, [sp, #16]
 800a5f8:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a5fc:	4669      	mov	r1, sp
 800a5fe:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a600:	f001 fbd0 	bl	800bda4 <_svfiprintf_r>
 800a604:	1c43      	adds	r3, r0, #1
 800a606:	bfbc      	itt	lt
 800a608:	238b      	movlt	r3, #139	@ 0x8b
 800a60a:	602b      	strlt	r3, [r5, #0]
 800a60c:	2c00      	cmp	r4, #0
 800a60e:	d0e3      	beq.n	800a5d8 <_vsniprintf_r+0x16>
 800a610:	9b00      	ldr	r3, [sp, #0]
 800a612:	2200      	movs	r2, #0
 800a614:	701a      	strb	r2, [r3, #0]
 800a616:	e7df      	b.n	800a5d8 <_vsniprintf_r+0x16>

0800a618 <vsniprintf>:
 800a618:	b507      	push	{r0, r1, r2, lr}
 800a61a:	9300      	str	r3, [sp, #0]
 800a61c:	4613      	mov	r3, r2
 800a61e:	460a      	mov	r2, r1
 800a620:	4601      	mov	r1, r0
 800a622:	4803      	ldr	r0, [pc, #12]	@ (800a630 <vsniprintf+0x18>)
 800a624:	6800      	ldr	r0, [r0, #0]
 800a626:	f7ff ffcc 	bl	800a5c2 <_vsniprintf_r>
 800a62a:	b003      	add	sp, #12
 800a62c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a630:	20000030 	.word	0x20000030

0800a634 <memset>:
 800a634:	4402      	add	r2, r0
 800a636:	4603      	mov	r3, r0
 800a638:	4293      	cmp	r3, r2
 800a63a:	d100      	bne.n	800a63e <memset+0xa>
 800a63c:	4770      	bx	lr
 800a63e:	f803 1b01 	strb.w	r1, [r3], #1
 800a642:	e7f9      	b.n	800a638 <memset+0x4>

0800a644 <_localeconv_r>:
 800a644:	4800      	ldr	r0, [pc, #0]	@ (800a648 <_localeconv_r+0x4>)
 800a646:	4770      	bx	lr
 800a648:	20000170 	.word	0x20000170

0800a64c <_close_r>:
 800a64c:	b538      	push	{r3, r4, r5, lr}
 800a64e:	4d06      	ldr	r5, [pc, #24]	@ (800a668 <_close_r+0x1c>)
 800a650:	2300      	movs	r3, #0
 800a652:	4604      	mov	r4, r0
 800a654:	4608      	mov	r0, r1
 800a656:	602b      	str	r3, [r5, #0]
 800a658:	f7f8 fb8e 	bl	8002d78 <_close>
 800a65c:	1c43      	adds	r3, r0, #1
 800a65e:	d102      	bne.n	800a666 <_close_r+0x1a>
 800a660:	682b      	ldr	r3, [r5, #0]
 800a662:	b103      	cbz	r3, 800a666 <_close_r+0x1a>
 800a664:	6023      	str	r3, [r4, #0]
 800a666:	bd38      	pop	{r3, r4, r5, pc}
 800a668:	2000bf8c 	.word	0x2000bf8c

0800a66c <_lseek_r>:
 800a66c:	b538      	push	{r3, r4, r5, lr}
 800a66e:	4d07      	ldr	r5, [pc, #28]	@ (800a68c <_lseek_r+0x20>)
 800a670:	4604      	mov	r4, r0
 800a672:	4608      	mov	r0, r1
 800a674:	4611      	mov	r1, r2
 800a676:	2200      	movs	r2, #0
 800a678:	602a      	str	r2, [r5, #0]
 800a67a:	461a      	mov	r2, r3
 800a67c:	f7f8 fba3 	bl	8002dc6 <_lseek>
 800a680:	1c43      	adds	r3, r0, #1
 800a682:	d102      	bne.n	800a68a <_lseek_r+0x1e>
 800a684:	682b      	ldr	r3, [r5, #0]
 800a686:	b103      	cbz	r3, 800a68a <_lseek_r+0x1e>
 800a688:	6023      	str	r3, [r4, #0]
 800a68a:	bd38      	pop	{r3, r4, r5, pc}
 800a68c:	2000bf8c 	.word	0x2000bf8c

0800a690 <_read_r>:
 800a690:	b538      	push	{r3, r4, r5, lr}
 800a692:	4d07      	ldr	r5, [pc, #28]	@ (800a6b0 <_read_r+0x20>)
 800a694:	4604      	mov	r4, r0
 800a696:	4608      	mov	r0, r1
 800a698:	4611      	mov	r1, r2
 800a69a:	2200      	movs	r2, #0
 800a69c:	602a      	str	r2, [r5, #0]
 800a69e:	461a      	mov	r2, r3
 800a6a0:	f7f8 fb31 	bl	8002d06 <_read>
 800a6a4:	1c43      	adds	r3, r0, #1
 800a6a6:	d102      	bne.n	800a6ae <_read_r+0x1e>
 800a6a8:	682b      	ldr	r3, [r5, #0]
 800a6aa:	b103      	cbz	r3, 800a6ae <_read_r+0x1e>
 800a6ac:	6023      	str	r3, [r4, #0]
 800a6ae:	bd38      	pop	{r3, r4, r5, pc}
 800a6b0:	2000bf8c 	.word	0x2000bf8c

0800a6b4 <_write_r>:
 800a6b4:	b538      	push	{r3, r4, r5, lr}
 800a6b6:	4d07      	ldr	r5, [pc, #28]	@ (800a6d4 <_write_r+0x20>)
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	4608      	mov	r0, r1
 800a6bc:	4611      	mov	r1, r2
 800a6be:	2200      	movs	r2, #0
 800a6c0:	602a      	str	r2, [r5, #0]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	f7f8 fb3c 	bl	8002d40 <_write>
 800a6c8:	1c43      	adds	r3, r0, #1
 800a6ca:	d102      	bne.n	800a6d2 <_write_r+0x1e>
 800a6cc:	682b      	ldr	r3, [r5, #0]
 800a6ce:	b103      	cbz	r3, 800a6d2 <_write_r+0x1e>
 800a6d0:	6023      	str	r3, [r4, #0]
 800a6d2:	bd38      	pop	{r3, r4, r5, pc}
 800a6d4:	2000bf8c 	.word	0x2000bf8c

0800a6d8 <__errno>:
 800a6d8:	4b01      	ldr	r3, [pc, #4]	@ (800a6e0 <__errno+0x8>)
 800a6da:	6818      	ldr	r0, [r3, #0]
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	20000030 	.word	0x20000030

0800a6e4 <__libc_init_array>:
 800a6e4:	b570      	push	{r4, r5, r6, lr}
 800a6e6:	4d0d      	ldr	r5, [pc, #52]	@ (800a71c <__libc_init_array+0x38>)
 800a6e8:	4c0d      	ldr	r4, [pc, #52]	@ (800a720 <__libc_init_array+0x3c>)
 800a6ea:	1b64      	subs	r4, r4, r5
 800a6ec:	10a4      	asrs	r4, r4, #2
 800a6ee:	2600      	movs	r6, #0
 800a6f0:	42a6      	cmp	r6, r4
 800a6f2:	d109      	bne.n	800a708 <__libc_init_array+0x24>
 800a6f4:	4d0b      	ldr	r5, [pc, #44]	@ (800a724 <__libc_init_array+0x40>)
 800a6f6:	4c0c      	ldr	r4, [pc, #48]	@ (800a728 <__libc_init_array+0x44>)
 800a6f8:	f002 ffc4 	bl	800d684 <_init>
 800a6fc:	1b64      	subs	r4, r4, r5
 800a6fe:	10a4      	asrs	r4, r4, #2
 800a700:	2600      	movs	r6, #0
 800a702:	42a6      	cmp	r6, r4
 800a704:	d105      	bne.n	800a712 <__libc_init_array+0x2e>
 800a706:	bd70      	pop	{r4, r5, r6, pc}
 800a708:	f855 3b04 	ldr.w	r3, [r5], #4
 800a70c:	4798      	blx	r3
 800a70e:	3601      	adds	r6, #1
 800a710:	e7ee      	b.n	800a6f0 <__libc_init_array+0xc>
 800a712:	f855 3b04 	ldr.w	r3, [r5], #4
 800a716:	4798      	blx	r3
 800a718:	3601      	adds	r6, #1
 800a71a:	e7f2      	b.n	800a702 <__libc_init_array+0x1e>
 800a71c:	0800daf0 	.word	0x0800daf0
 800a720:	0800daf0 	.word	0x0800daf0
 800a724:	0800daf0 	.word	0x0800daf0
 800a728:	0800daf4 	.word	0x0800daf4

0800a72c <__retarget_lock_init_recursive>:
 800a72c:	4770      	bx	lr

0800a72e <__retarget_lock_acquire_recursive>:
 800a72e:	4770      	bx	lr

0800a730 <__retarget_lock_release_recursive>:
 800a730:	4770      	bx	lr

0800a732 <memcpy>:
 800a732:	440a      	add	r2, r1
 800a734:	4291      	cmp	r1, r2
 800a736:	f100 33ff 	add.w	r3, r0, #4294967295
 800a73a:	d100      	bne.n	800a73e <memcpy+0xc>
 800a73c:	4770      	bx	lr
 800a73e:	b510      	push	{r4, lr}
 800a740:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a744:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a748:	4291      	cmp	r1, r2
 800a74a:	d1f9      	bne.n	800a740 <memcpy+0xe>
 800a74c:	bd10      	pop	{r4, pc}

0800a74e <quorem>:
 800a74e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a752:	6903      	ldr	r3, [r0, #16]
 800a754:	690c      	ldr	r4, [r1, #16]
 800a756:	42a3      	cmp	r3, r4
 800a758:	4607      	mov	r7, r0
 800a75a:	db7e      	blt.n	800a85a <quorem+0x10c>
 800a75c:	3c01      	subs	r4, #1
 800a75e:	f101 0814 	add.w	r8, r1, #20
 800a762:	00a3      	lsls	r3, r4, #2
 800a764:	f100 0514 	add.w	r5, r0, #20
 800a768:	9300      	str	r3, [sp, #0]
 800a76a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a76e:	9301      	str	r3, [sp, #4]
 800a770:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a774:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a778:	3301      	adds	r3, #1
 800a77a:	429a      	cmp	r2, r3
 800a77c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a780:	fbb2 f6f3 	udiv	r6, r2, r3
 800a784:	d32e      	bcc.n	800a7e4 <quorem+0x96>
 800a786:	f04f 0a00 	mov.w	sl, #0
 800a78a:	46c4      	mov	ip, r8
 800a78c:	46ae      	mov	lr, r5
 800a78e:	46d3      	mov	fp, sl
 800a790:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a794:	b298      	uxth	r0, r3
 800a796:	fb06 a000 	mla	r0, r6, r0, sl
 800a79a:	0c02      	lsrs	r2, r0, #16
 800a79c:	0c1b      	lsrs	r3, r3, #16
 800a79e:	fb06 2303 	mla	r3, r6, r3, r2
 800a7a2:	f8de 2000 	ldr.w	r2, [lr]
 800a7a6:	b280      	uxth	r0, r0
 800a7a8:	b292      	uxth	r2, r2
 800a7aa:	1a12      	subs	r2, r2, r0
 800a7ac:	445a      	add	r2, fp
 800a7ae:	f8de 0000 	ldr.w	r0, [lr]
 800a7b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a7bc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a7c0:	b292      	uxth	r2, r2
 800a7c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a7c6:	45e1      	cmp	r9, ip
 800a7c8:	f84e 2b04 	str.w	r2, [lr], #4
 800a7cc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a7d0:	d2de      	bcs.n	800a790 <quorem+0x42>
 800a7d2:	9b00      	ldr	r3, [sp, #0]
 800a7d4:	58eb      	ldr	r3, [r5, r3]
 800a7d6:	b92b      	cbnz	r3, 800a7e4 <quorem+0x96>
 800a7d8:	9b01      	ldr	r3, [sp, #4]
 800a7da:	3b04      	subs	r3, #4
 800a7dc:	429d      	cmp	r5, r3
 800a7de:	461a      	mov	r2, r3
 800a7e0:	d32f      	bcc.n	800a842 <quorem+0xf4>
 800a7e2:	613c      	str	r4, [r7, #16]
 800a7e4:	4638      	mov	r0, r7
 800a7e6:	f001 f979 	bl	800badc <__mcmp>
 800a7ea:	2800      	cmp	r0, #0
 800a7ec:	db25      	blt.n	800a83a <quorem+0xec>
 800a7ee:	4629      	mov	r1, r5
 800a7f0:	2000      	movs	r0, #0
 800a7f2:	f858 2b04 	ldr.w	r2, [r8], #4
 800a7f6:	f8d1 c000 	ldr.w	ip, [r1]
 800a7fa:	fa1f fe82 	uxth.w	lr, r2
 800a7fe:	fa1f f38c 	uxth.w	r3, ip
 800a802:	eba3 030e 	sub.w	r3, r3, lr
 800a806:	4403      	add	r3, r0
 800a808:	0c12      	lsrs	r2, r2, #16
 800a80a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a80e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a812:	b29b      	uxth	r3, r3
 800a814:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a818:	45c1      	cmp	r9, r8
 800a81a:	f841 3b04 	str.w	r3, [r1], #4
 800a81e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a822:	d2e6      	bcs.n	800a7f2 <quorem+0xa4>
 800a824:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a828:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a82c:	b922      	cbnz	r2, 800a838 <quorem+0xea>
 800a82e:	3b04      	subs	r3, #4
 800a830:	429d      	cmp	r5, r3
 800a832:	461a      	mov	r2, r3
 800a834:	d30b      	bcc.n	800a84e <quorem+0x100>
 800a836:	613c      	str	r4, [r7, #16]
 800a838:	3601      	adds	r6, #1
 800a83a:	4630      	mov	r0, r6
 800a83c:	b003      	add	sp, #12
 800a83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a842:	6812      	ldr	r2, [r2, #0]
 800a844:	3b04      	subs	r3, #4
 800a846:	2a00      	cmp	r2, #0
 800a848:	d1cb      	bne.n	800a7e2 <quorem+0x94>
 800a84a:	3c01      	subs	r4, #1
 800a84c:	e7c6      	b.n	800a7dc <quorem+0x8e>
 800a84e:	6812      	ldr	r2, [r2, #0]
 800a850:	3b04      	subs	r3, #4
 800a852:	2a00      	cmp	r2, #0
 800a854:	d1ef      	bne.n	800a836 <quorem+0xe8>
 800a856:	3c01      	subs	r4, #1
 800a858:	e7ea      	b.n	800a830 <quorem+0xe2>
 800a85a:	2000      	movs	r0, #0
 800a85c:	e7ee      	b.n	800a83c <quorem+0xee>
	...

0800a860 <_dtoa_r>:
 800a860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a864:	69c7      	ldr	r7, [r0, #28]
 800a866:	b099      	sub	sp, #100	@ 0x64
 800a868:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a86c:	ec55 4b10 	vmov	r4, r5, d0
 800a870:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a872:	9109      	str	r1, [sp, #36]	@ 0x24
 800a874:	4683      	mov	fp, r0
 800a876:	920e      	str	r2, [sp, #56]	@ 0x38
 800a878:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a87a:	b97f      	cbnz	r7, 800a89c <_dtoa_r+0x3c>
 800a87c:	2010      	movs	r0, #16
 800a87e:	f000 fdfd 	bl	800b47c <malloc>
 800a882:	4602      	mov	r2, r0
 800a884:	f8cb 001c 	str.w	r0, [fp, #28]
 800a888:	b920      	cbnz	r0, 800a894 <_dtoa_r+0x34>
 800a88a:	4ba7      	ldr	r3, [pc, #668]	@ (800ab28 <_dtoa_r+0x2c8>)
 800a88c:	21ef      	movs	r1, #239	@ 0xef
 800a88e:	48a7      	ldr	r0, [pc, #668]	@ (800ab2c <_dtoa_r+0x2cc>)
 800a890:	f001 fc5a 	bl	800c148 <__assert_func>
 800a894:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a898:	6007      	str	r7, [r0, #0]
 800a89a:	60c7      	str	r7, [r0, #12]
 800a89c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a8a0:	6819      	ldr	r1, [r3, #0]
 800a8a2:	b159      	cbz	r1, 800a8bc <_dtoa_r+0x5c>
 800a8a4:	685a      	ldr	r2, [r3, #4]
 800a8a6:	604a      	str	r2, [r1, #4]
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	4093      	lsls	r3, r2
 800a8ac:	608b      	str	r3, [r1, #8]
 800a8ae:	4658      	mov	r0, fp
 800a8b0:	f000 feda 	bl	800b668 <_Bfree>
 800a8b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	601a      	str	r2, [r3, #0]
 800a8bc:	1e2b      	subs	r3, r5, #0
 800a8be:	bfb9      	ittee	lt
 800a8c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a8c4:	9303      	strlt	r3, [sp, #12]
 800a8c6:	2300      	movge	r3, #0
 800a8c8:	6033      	strge	r3, [r6, #0]
 800a8ca:	9f03      	ldr	r7, [sp, #12]
 800a8cc:	4b98      	ldr	r3, [pc, #608]	@ (800ab30 <_dtoa_r+0x2d0>)
 800a8ce:	bfbc      	itt	lt
 800a8d0:	2201      	movlt	r2, #1
 800a8d2:	6032      	strlt	r2, [r6, #0]
 800a8d4:	43bb      	bics	r3, r7
 800a8d6:	d112      	bne.n	800a8fe <_dtoa_r+0x9e>
 800a8d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a8da:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a8de:	6013      	str	r3, [r2, #0]
 800a8e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a8e4:	4323      	orrs	r3, r4
 800a8e6:	f000 854d 	beq.w	800b384 <_dtoa_r+0xb24>
 800a8ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a8ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ab44 <_dtoa_r+0x2e4>
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	f000 854f 	beq.w	800b394 <_dtoa_r+0xb34>
 800a8f6:	f10a 0303 	add.w	r3, sl, #3
 800a8fa:	f000 bd49 	b.w	800b390 <_dtoa_r+0xb30>
 800a8fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a902:	2200      	movs	r2, #0
 800a904:	ec51 0b17 	vmov	r0, r1, d7
 800a908:	2300      	movs	r3, #0
 800a90a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a90e:	f7f6 f8db 	bl	8000ac8 <__aeabi_dcmpeq>
 800a912:	4680      	mov	r8, r0
 800a914:	b158      	cbz	r0, 800a92e <_dtoa_r+0xce>
 800a916:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a918:	2301      	movs	r3, #1
 800a91a:	6013      	str	r3, [r2, #0]
 800a91c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a91e:	b113      	cbz	r3, 800a926 <_dtoa_r+0xc6>
 800a920:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a922:	4b84      	ldr	r3, [pc, #528]	@ (800ab34 <_dtoa_r+0x2d4>)
 800a924:	6013      	str	r3, [r2, #0]
 800a926:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ab48 <_dtoa_r+0x2e8>
 800a92a:	f000 bd33 	b.w	800b394 <_dtoa_r+0xb34>
 800a92e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a932:	aa16      	add	r2, sp, #88	@ 0x58
 800a934:	a917      	add	r1, sp, #92	@ 0x5c
 800a936:	4658      	mov	r0, fp
 800a938:	f001 f980 	bl	800bc3c <__d2b>
 800a93c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a940:	4681      	mov	r9, r0
 800a942:	2e00      	cmp	r6, #0
 800a944:	d077      	beq.n	800aa36 <_dtoa_r+0x1d6>
 800a946:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a948:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a94c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a950:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a954:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a958:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a95c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a960:	4619      	mov	r1, r3
 800a962:	2200      	movs	r2, #0
 800a964:	4b74      	ldr	r3, [pc, #464]	@ (800ab38 <_dtoa_r+0x2d8>)
 800a966:	f7f5 fc8f 	bl	8000288 <__aeabi_dsub>
 800a96a:	a369      	add	r3, pc, #420	@ (adr r3, 800ab10 <_dtoa_r+0x2b0>)
 800a96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a970:	f7f5 fe42 	bl	80005f8 <__aeabi_dmul>
 800a974:	a368      	add	r3, pc, #416	@ (adr r3, 800ab18 <_dtoa_r+0x2b8>)
 800a976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97a:	f7f5 fc87 	bl	800028c <__adddf3>
 800a97e:	4604      	mov	r4, r0
 800a980:	4630      	mov	r0, r6
 800a982:	460d      	mov	r5, r1
 800a984:	f7f5 fdce 	bl	8000524 <__aeabi_i2d>
 800a988:	a365      	add	r3, pc, #404	@ (adr r3, 800ab20 <_dtoa_r+0x2c0>)
 800a98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98e:	f7f5 fe33 	bl	80005f8 <__aeabi_dmul>
 800a992:	4602      	mov	r2, r0
 800a994:	460b      	mov	r3, r1
 800a996:	4620      	mov	r0, r4
 800a998:	4629      	mov	r1, r5
 800a99a:	f7f5 fc77 	bl	800028c <__adddf3>
 800a99e:	4604      	mov	r4, r0
 800a9a0:	460d      	mov	r5, r1
 800a9a2:	f7f6 f8d9 	bl	8000b58 <__aeabi_d2iz>
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	4607      	mov	r7, r0
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	4629      	mov	r1, r5
 800a9b0:	f7f6 f894 	bl	8000adc <__aeabi_dcmplt>
 800a9b4:	b140      	cbz	r0, 800a9c8 <_dtoa_r+0x168>
 800a9b6:	4638      	mov	r0, r7
 800a9b8:	f7f5 fdb4 	bl	8000524 <__aeabi_i2d>
 800a9bc:	4622      	mov	r2, r4
 800a9be:	462b      	mov	r3, r5
 800a9c0:	f7f6 f882 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9c4:	b900      	cbnz	r0, 800a9c8 <_dtoa_r+0x168>
 800a9c6:	3f01      	subs	r7, #1
 800a9c8:	2f16      	cmp	r7, #22
 800a9ca:	d851      	bhi.n	800aa70 <_dtoa_r+0x210>
 800a9cc:	4b5b      	ldr	r3, [pc, #364]	@ (800ab3c <_dtoa_r+0x2dc>)
 800a9ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9da:	f7f6 f87f 	bl	8000adc <__aeabi_dcmplt>
 800a9de:	2800      	cmp	r0, #0
 800a9e0:	d048      	beq.n	800aa74 <_dtoa_r+0x214>
 800a9e2:	3f01      	subs	r7, #1
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	9312      	str	r3, [sp, #72]	@ 0x48
 800a9e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a9ea:	1b9b      	subs	r3, r3, r6
 800a9ec:	1e5a      	subs	r2, r3, #1
 800a9ee:	bf44      	itt	mi
 800a9f0:	f1c3 0801 	rsbmi	r8, r3, #1
 800a9f4:	2300      	movmi	r3, #0
 800a9f6:	9208      	str	r2, [sp, #32]
 800a9f8:	bf54      	ite	pl
 800a9fa:	f04f 0800 	movpl.w	r8, #0
 800a9fe:	9308      	strmi	r3, [sp, #32]
 800aa00:	2f00      	cmp	r7, #0
 800aa02:	db39      	blt.n	800aa78 <_dtoa_r+0x218>
 800aa04:	9b08      	ldr	r3, [sp, #32]
 800aa06:	970f      	str	r7, [sp, #60]	@ 0x3c
 800aa08:	443b      	add	r3, r7
 800aa0a:	9308      	str	r3, [sp, #32]
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa12:	2b09      	cmp	r3, #9
 800aa14:	d864      	bhi.n	800aae0 <_dtoa_r+0x280>
 800aa16:	2b05      	cmp	r3, #5
 800aa18:	bfc4      	itt	gt
 800aa1a:	3b04      	subgt	r3, #4
 800aa1c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800aa1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa20:	f1a3 0302 	sub.w	r3, r3, #2
 800aa24:	bfcc      	ite	gt
 800aa26:	2400      	movgt	r4, #0
 800aa28:	2401      	movle	r4, #1
 800aa2a:	2b03      	cmp	r3, #3
 800aa2c:	d863      	bhi.n	800aaf6 <_dtoa_r+0x296>
 800aa2e:	e8df f003 	tbb	[pc, r3]
 800aa32:	372a      	.short	0x372a
 800aa34:	5535      	.short	0x5535
 800aa36:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800aa3a:	441e      	add	r6, r3
 800aa3c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800aa40:	2b20      	cmp	r3, #32
 800aa42:	bfc1      	itttt	gt
 800aa44:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800aa48:	409f      	lslgt	r7, r3
 800aa4a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800aa4e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800aa52:	bfd6      	itet	le
 800aa54:	f1c3 0320 	rsble	r3, r3, #32
 800aa58:	ea47 0003 	orrgt.w	r0, r7, r3
 800aa5c:	fa04 f003 	lslle.w	r0, r4, r3
 800aa60:	f7f5 fd50 	bl	8000504 <__aeabi_ui2d>
 800aa64:	2201      	movs	r2, #1
 800aa66:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800aa6a:	3e01      	subs	r6, #1
 800aa6c:	9214      	str	r2, [sp, #80]	@ 0x50
 800aa6e:	e777      	b.n	800a960 <_dtoa_r+0x100>
 800aa70:	2301      	movs	r3, #1
 800aa72:	e7b8      	b.n	800a9e6 <_dtoa_r+0x186>
 800aa74:	9012      	str	r0, [sp, #72]	@ 0x48
 800aa76:	e7b7      	b.n	800a9e8 <_dtoa_r+0x188>
 800aa78:	427b      	negs	r3, r7
 800aa7a:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	eba8 0807 	sub.w	r8, r8, r7
 800aa82:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aa84:	e7c4      	b.n	800aa10 <_dtoa_r+0x1b0>
 800aa86:	2300      	movs	r3, #0
 800aa88:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	dc35      	bgt.n	800aafc <_dtoa_r+0x29c>
 800aa90:	2301      	movs	r3, #1
 800aa92:	9300      	str	r3, [sp, #0]
 800aa94:	9307      	str	r3, [sp, #28]
 800aa96:	461a      	mov	r2, r3
 800aa98:	920e      	str	r2, [sp, #56]	@ 0x38
 800aa9a:	e00b      	b.n	800aab4 <_dtoa_r+0x254>
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	e7f3      	b.n	800aa88 <_dtoa_r+0x228>
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aaa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aaa6:	18fb      	adds	r3, r7, r3
 800aaa8:	9300      	str	r3, [sp, #0]
 800aaaa:	3301      	adds	r3, #1
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	9307      	str	r3, [sp, #28]
 800aab0:	bfb8      	it	lt
 800aab2:	2301      	movlt	r3, #1
 800aab4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800aab8:	2100      	movs	r1, #0
 800aaba:	2204      	movs	r2, #4
 800aabc:	f102 0514 	add.w	r5, r2, #20
 800aac0:	429d      	cmp	r5, r3
 800aac2:	d91f      	bls.n	800ab04 <_dtoa_r+0x2a4>
 800aac4:	6041      	str	r1, [r0, #4]
 800aac6:	4658      	mov	r0, fp
 800aac8:	f000 fd8e 	bl	800b5e8 <_Balloc>
 800aacc:	4682      	mov	sl, r0
 800aace:	2800      	cmp	r0, #0
 800aad0:	d13c      	bne.n	800ab4c <_dtoa_r+0x2ec>
 800aad2:	4b1b      	ldr	r3, [pc, #108]	@ (800ab40 <_dtoa_r+0x2e0>)
 800aad4:	4602      	mov	r2, r0
 800aad6:	f240 11af 	movw	r1, #431	@ 0x1af
 800aada:	e6d8      	b.n	800a88e <_dtoa_r+0x2e>
 800aadc:	2301      	movs	r3, #1
 800aade:	e7e0      	b.n	800aaa2 <_dtoa_r+0x242>
 800aae0:	2401      	movs	r4, #1
 800aae2:	2300      	movs	r3, #0
 800aae4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aae6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aae8:	f04f 33ff 	mov.w	r3, #4294967295
 800aaec:	9300      	str	r3, [sp, #0]
 800aaee:	9307      	str	r3, [sp, #28]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	2312      	movs	r3, #18
 800aaf4:	e7d0      	b.n	800aa98 <_dtoa_r+0x238>
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aafa:	e7f5      	b.n	800aae8 <_dtoa_r+0x288>
 800aafc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aafe:	9300      	str	r3, [sp, #0]
 800ab00:	9307      	str	r3, [sp, #28]
 800ab02:	e7d7      	b.n	800aab4 <_dtoa_r+0x254>
 800ab04:	3101      	adds	r1, #1
 800ab06:	0052      	lsls	r2, r2, #1
 800ab08:	e7d8      	b.n	800aabc <_dtoa_r+0x25c>
 800ab0a:	bf00      	nop
 800ab0c:	f3af 8000 	nop.w
 800ab10:	636f4361 	.word	0x636f4361
 800ab14:	3fd287a7 	.word	0x3fd287a7
 800ab18:	8b60c8b3 	.word	0x8b60c8b3
 800ab1c:	3fc68a28 	.word	0x3fc68a28
 800ab20:	509f79fb 	.word	0x509f79fb
 800ab24:	3fd34413 	.word	0x3fd34413
 800ab28:	0800d789 	.word	0x0800d789
 800ab2c:	0800d7a0 	.word	0x0800d7a0
 800ab30:	7ff00000 	.word	0x7ff00000
 800ab34:	0800d759 	.word	0x0800d759
 800ab38:	3ff80000 	.word	0x3ff80000
 800ab3c:	0800d898 	.word	0x0800d898
 800ab40:	0800d7f8 	.word	0x0800d7f8
 800ab44:	0800d785 	.word	0x0800d785
 800ab48:	0800d758 	.word	0x0800d758
 800ab4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ab50:	6018      	str	r0, [r3, #0]
 800ab52:	9b07      	ldr	r3, [sp, #28]
 800ab54:	2b0e      	cmp	r3, #14
 800ab56:	f200 80a4 	bhi.w	800aca2 <_dtoa_r+0x442>
 800ab5a:	2c00      	cmp	r4, #0
 800ab5c:	f000 80a1 	beq.w	800aca2 <_dtoa_r+0x442>
 800ab60:	2f00      	cmp	r7, #0
 800ab62:	dd33      	ble.n	800abcc <_dtoa_r+0x36c>
 800ab64:	4bad      	ldr	r3, [pc, #692]	@ (800ae1c <_dtoa_r+0x5bc>)
 800ab66:	f007 020f 	and.w	r2, r7, #15
 800ab6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab6e:	ed93 7b00 	vldr	d7, [r3]
 800ab72:	05f8      	lsls	r0, r7, #23
 800ab74:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ab78:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ab7c:	d516      	bpl.n	800abac <_dtoa_r+0x34c>
 800ab7e:	4ba8      	ldr	r3, [pc, #672]	@ (800ae20 <_dtoa_r+0x5c0>)
 800ab80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab88:	f7f5 fe60 	bl	800084c <__aeabi_ddiv>
 800ab8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab90:	f004 040f 	and.w	r4, r4, #15
 800ab94:	2603      	movs	r6, #3
 800ab96:	4da2      	ldr	r5, [pc, #648]	@ (800ae20 <_dtoa_r+0x5c0>)
 800ab98:	b954      	cbnz	r4, 800abb0 <_dtoa_r+0x350>
 800ab9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aba2:	f7f5 fe53 	bl	800084c <__aeabi_ddiv>
 800aba6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abaa:	e028      	b.n	800abfe <_dtoa_r+0x39e>
 800abac:	2602      	movs	r6, #2
 800abae:	e7f2      	b.n	800ab96 <_dtoa_r+0x336>
 800abb0:	07e1      	lsls	r1, r4, #31
 800abb2:	d508      	bpl.n	800abc6 <_dtoa_r+0x366>
 800abb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abb8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800abbc:	f7f5 fd1c 	bl	80005f8 <__aeabi_dmul>
 800abc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800abc4:	3601      	adds	r6, #1
 800abc6:	1064      	asrs	r4, r4, #1
 800abc8:	3508      	adds	r5, #8
 800abca:	e7e5      	b.n	800ab98 <_dtoa_r+0x338>
 800abcc:	f000 80d2 	beq.w	800ad74 <_dtoa_r+0x514>
 800abd0:	427c      	negs	r4, r7
 800abd2:	4b92      	ldr	r3, [pc, #584]	@ (800ae1c <_dtoa_r+0x5bc>)
 800abd4:	4d92      	ldr	r5, [pc, #584]	@ (800ae20 <_dtoa_r+0x5c0>)
 800abd6:	f004 020f 	and.w	r2, r4, #15
 800abda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800abe6:	f7f5 fd07 	bl	80005f8 <__aeabi_dmul>
 800abea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abee:	1124      	asrs	r4, r4, #4
 800abf0:	2300      	movs	r3, #0
 800abf2:	2602      	movs	r6, #2
 800abf4:	2c00      	cmp	r4, #0
 800abf6:	f040 80b2 	bne.w	800ad5e <_dtoa_r+0x4fe>
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d1d3      	bne.n	800aba6 <_dtoa_r+0x346>
 800abfe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ac00:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	f000 80b7 	beq.w	800ad78 <_dtoa_r+0x518>
 800ac0a:	4b86      	ldr	r3, [pc, #536]	@ (800ae24 <_dtoa_r+0x5c4>)
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	4620      	mov	r0, r4
 800ac10:	4629      	mov	r1, r5
 800ac12:	f7f5 ff63 	bl	8000adc <__aeabi_dcmplt>
 800ac16:	2800      	cmp	r0, #0
 800ac18:	f000 80ae 	beq.w	800ad78 <_dtoa_r+0x518>
 800ac1c:	9b07      	ldr	r3, [sp, #28]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	f000 80aa 	beq.w	800ad78 <_dtoa_r+0x518>
 800ac24:	9b00      	ldr	r3, [sp, #0]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	dd37      	ble.n	800ac9a <_dtoa_r+0x43a>
 800ac2a:	1e7b      	subs	r3, r7, #1
 800ac2c:	9304      	str	r3, [sp, #16]
 800ac2e:	4620      	mov	r0, r4
 800ac30:	4b7d      	ldr	r3, [pc, #500]	@ (800ae28 <_dtoa_r+0x5c8>)
 800ac32:	2200      	movs	r2, #0
 800ac34:	4629      	mov	r1, r5
 800ac36:	f7f5 fcdf 	bl	80005f8 <__aeabi_dmul>
 800ac3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac3e:	9c00      	ldr	r4, [sp, #0]
 800ac40:	3601      	adds	r6, #1
 800ac42:	4630      	mov	r0, r6
 800ac44:	f7f5 fc6e 	bl	8000524 <__aeabi_i2d>
 800ac48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac4c:	f7f5 fcd4 	bl	80005f8 <__aeabi_dmul>
 800ac50:	4b76      	ldr	r3, [pc, #472]	@ (800ae2c <_dtoa_r+0x5cc>)
 800ac52:	2200      	movs	r2, #0
 800ac54:	f7f5 fb1a 	bl	800028c <__adddf3>
 800ac58:	4605      	mov	r5, r0
 800ac5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ac5e:	2c00      	cmp	r4, #0
 800ac60:	f040 808d 	bne.w	800ad7e <_dtoa_r+0x51e>
 800ac64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac68:	4b71      	ldr	r3, [pc, #452]	@ (800ae30 <_dtoa_r+0x5d0>)
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f7f5 fb0c 	bl	8000288 <__aeabi_dsub>
 800ac70:	4602      	mov	r2, r0
 800ac72:	460b      	mov	r3, r1
 800ac74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac78:	462a      	mov	r2, r5
 800ac7a:	4633      	mov	r3, r6
 800ac7c:	f7f5 ff4c 	bl	8000b18 <__aeabi_dcmpgt>
 800ac80:	2800      	cmp	r0, #0
 800ac82:	f040 828b 	bne.w	800b19c <_dtoa_r+0x93c>
 800ac86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac8a:	462a      	mov	r2, r5
 800ac8c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ac90:	f7f5 ff24 	bl	8000adc <__aeabi_dcmplt>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	f040 8128 	bne.w	800aeea <_dtoa_r+0x68a>
 800ac9a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ac9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800aca2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	f2c0 815a 	blt.w	800af5e <_dtoa_r+0x6fe>
 800acaa:	2f0e      	cmp	r7, #14
 800acac:	f300 8157 	bgt.w	800af5e <_dtoa_r+0x6fe>
 800acb0:	4b5a      	ldr	r3, [pc, #360]	@ (800ae1c <_dtoa_r+0x5bc>)
 800acb2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800acb6:	ed93 7b00 	vldr	d7, [r3]
 800acba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	ed8d 7b00 	vstr	d7, [sp]
 800acc2:	da03      	bge.n	800accc <_dtoa_r+0x46c>
 800acc4:	9b07      	ldr	r3, [sp, #28]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	f340 8101 	ble.w	800aece <_dtoa_r+0x66e>
 800accc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800acd0:	4656      	mov	r6, sl
 800acd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acd6:	4620      	mov	r0, r4
 800acd8:	4629      	mov	r1, r5
 800acda:	f7f5 fdb7 	bl	800084c <__aeabi_ddiv>
 800acde:	f7f5 ff3b 	bl	8000b58 <__aeabi_d2iz>
 800ace2:	4680      	mov	r8, r0
 800ace4:	f7f5 fc1e 	bl	8000524 <__aeabi_i2d>
 800ace8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acec:	f7f5 fc84 	bl	80005f8 <__aeabi_dmul>
 800acf0:	4602      	mov	r2, r0
 800acf2:	460b      	mov	r3, r1
 800acf4:	4620      	mov	r0, r4
 800acf6:	4629      	mov	r1, r5
 800acf8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800acfc:	f7f5 fac4 	bl	8000288 <__aeabi_dsub>
 800ad00:	f806 4b01 	strb.w	r4, [r6], #1
 800ad04:	9d07      	ldr	r5, [sp, #28]
 800ad06:	eba6 040a 	sub.w	r4, r6, sl
 800ad0a:	42a5      	cmp	r5, r4
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	460b      	mov	r3, r1
 800ad10:	f040 8117 	bne.w	800af42 <_dtoa_r+0x6e2>
 800ad14:	f7f5 faba 	bl	800028c <__adddf3>
 800ad18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad1c:	4604      	mov	r4, r0
 800ad1e:	460d      	mov	r5, r1
 800ad20:	f7f5 fefa 	bl	8000b18 <__aeabi_dcmpgt>
 800ad24:	2800      	cmp	r0, #0
 800ad26:	f040 80f9 	bne.w	800af1c <_dtoa_r+0x6bc>
 800ad2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad2e:	4620      	mov	r0, r4
 800ad30:	4629      	mov	r1, r5
 800ad32:	f7f5 fec9 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad36:	b118      	cbz	r0, 800ad40 <_dtoa_r+0x4e0>
 800ad38:	f018 0f01 	tst.w	r8, #1
 800ad3c:	f040 80ee 	bne.w	800af1c <_dtoa_r+0x6bc>
 800ad40:	4649      	mov	r1, r9
 800ad42:	4658      	mov	r0, fp
 800ad44:	f000 fc90 	bl	800b668 <_Bfree>
 800ad48:	2300      	movs	r3, #0
 800ad4a:	7033      	strb	r3, [r6, #0]
 800ad4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ad4e:	3701      	adds	r7, #1
 800ad50:	601f      	str	r7, [r3, #0]
 800ad52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	f000 831d 	beq.w	800b394 <_dtoa_r+0xb34>
 800ad5a:	601e      	str	r6, [r3, #0]
 800ad5c:	e31a      	b.n	800b394 <_dtoa_r+0xb34>
 800ad5e:	07e2      	lsls	r2, r4, #31
 800ad60:	d505      	bpl.n	800ad6e <_dtoa_r+0x50e>
 800ad62:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad66:	f7f5 fc47 	bl	80005f8 <__aeabi_dmul>
 800ad6a:	3601      	adds	r6, #1
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	1064      	asrs	r4, r4, #1
 800ad70:	3508      	adds	r5, #8
 800ad72:	e73f      	b.n	800abf4 <_dtoa_r+0x394>
 800ad74:	2602      	movs	r6, #2
 800ad76:	e742      	b.n	800abfe <_dtoa_r+0x39e>
 800ad78:	9c07      	ldr	r4, [sp, #28]
 800ad7a:	9704      	str	r7, [sp, #16]
 800ad7c:	e761      	b.n	800ac42 <_dtoa_r+0x3e2>
 800ad7e:	4b27      	ldr	r3, [pc, #156]	@ (800ae1c <_dtoa_r+0x5bc>)
 800ad80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ad82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad86:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ad8a:	4454      	add	r4, sl
 800ad8c:	2900      	cmp	r1, #0
 800ad8e:	d053      	beq.n	800ae38 <_dtoa_r+0x5d8>
 800ad90:	4928      	ldr	r1, [pc, #160]	@ (800ae34 <_dtoa_r+0x5d4>)
 800ad92:	2000      	movs	r0, #0
 800ad94:	f7f5 fd5a 	bl	800084c <__aeabi_ddiv>
 800ad98:	4633      	mov	r3, r6
 800ad9a:	462a      	mov	r2, r5
 800ad9c:	f7f5 fa74 	bl	8000288 <__aeabi_dsub>
 800ada0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ada4:	4656      	mov	r6, sl
 800ada6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adaa:	f7f5 fed5 	bl	8000b58 <__aeabi_d2iz>
 800adae:	4605      	mov	r5, r0
 800adb0:	f7f5 fbb8 	bl	8000524 <__aeabi_i2d>
 800adb4:	4602      	mov	r2, r0
 800adb6:	460b      	mov	r3, r1
 800adb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adbc:	f7f5 fa64 	bl	8000288 <__aeabi_dsub>
 800adc0:	3530      	adds	r5, #48	@ 0x30
 800adc2:	4602      	mov	r2, r0
 800adc4:	460b      	mov	r3, r1
 800adc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800adca:	f806 5b01 	strb.w	r5, [r6], #1
 800adce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800add2:	f7f5 fe83 	bl	8000adc <__aeabi_dcmplt>
 800add6:	2800      	cmp	r0, #0
 800add8:	d171      	bne.n	800aebe <_dtoa_r+0x65e>
 800adda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800adde:	4911      	ldr	r1, [pc, #68]	@ (800ae24 <_dtoa_r+0x5c4>)
 800ade0:	2000      	movs	r0, #0
 800ade2:	f7f5 fa51 	bl	8000288 <__aeabi_dsub>
 800ade6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800adea:	f7f5 fe77 	bl	8000adc <__aeabi_dcmplt>
 800adee:	2800      	cmp	r0, #0
 800adf0:	f040 8095 	bne.w	800af1e <_dtoa_r+0x6be>
 800adf4:	42a6      	cmp	r6, r4
 800adf6:	f43f af50 	beq.w	800ac9a <_dtoa_r+0x43a>
 800adfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800adfe:	4b0a      	ldr	r3, [pc, #40]	@ (800ae28 <_dtoa_r+0x5c8>)
 800ae00:	2200      	movs	r2, #0
 800ae02:	f7f5 fbf9 	bl	80005f8 <__aeabi_dmul>
 800ae06:	4b08      	ldr	r3, [pc, #32]	@ (800ae28 <_dtoa_r+0x5c8>)
 800ae08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae12:	f7f5 fbf1 	bl	80005f8 <__aeabi_dmul>
 800ae16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae1a:	e7c4      	b.n	800ada6 <_dtoa_r+0x546>
 800ae1c:	0800d898 	.word	0x0800d898
 800ae20:	0800d870 	.word	0x0800d870
 800ae24:	3ff00000 	.word	0x3ff00000
 800ae28:	40240000 	.word	0x40240000
 800ae2c:	401c0000 	.word	0x401c0000
 800ae30:	40140000 	.word	0x40140000
 800ae34:	3fe00000 	.word	0x3fe00000
 800ae38:	4631      	mov	r1, r6
 800ae3a:	4628      	mov	r0, r5
 800ae3c:	f7f5 fbdc 	bl	80005f8 <__aeabi_dmul>
 800ae40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ae44:	9415      	str	r4, [sp, #84]	@ 0x54
 800ae46:	4656      	mov	r6, sl
 800ae48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae4c:	f7f5 fe84 	bl	8000b58 <__aeabi_d2iz>
 800ae50:	4605      	mov	r5, r0
 800ae52:	f7f5 fb67 	bl	8000524 <__aeabi_i2d>
 800ae56:	4602      	mov	r2, r0
 800ae58:	460b      	mov	r3, r1
 800ae5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae5e:	f7f5 fa13 	bl	8000288 <__aeabi_dsub>
 800ae62:	3530      	adds	r5, #48	@ 0x30
 800ae64:	f806 5b01 	strb.w	r5, [r6], #1
 800ae68:	4602      	mov	r2, r0
 800ae6a:	460b      	mov	r3, r1
 800ae6c:	42a6      	cmp	r6, r4
 800ae6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae72:	f04f 0200 	mov.w	r2, #0
 800ae76:	d124      	bne.n	800aec2 <_dtoa_r+0x662>
 800ae78:	4bac      	ldr	r3, [pc, #688]	@ (800b12c <_dtoa_r+0x8cc>)
 800ae7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ae7e:	f7f5 fa05 	bl	800028c <__adddf3>
 800ae82:	4602      	mov	r2, r0
 800ae84:	460b      	mov	r3, r1
 800ae86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae8a:	f7f5 fe45 	bl	8000b18 <__aeabi_dcmpgt>
 800ae8e:	2800      	cmp	r0, #0
 800ae90:	d145      	bne.n	800af1e <_dtoa_r+0x6be>
 800ae92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ae96:	49a5      	ldr	r1, [pc, #660]	@ (800b12c <_dtoa_r+0x8cc>)
 800ae98:	2000      	movs	r0, #0
 800ae9a:	f7f5 f9f5 	bl	8000288 <__aeabi_dsub>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	460b      	mov	r3, r1
 800aea2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aea6:	f7f5 fe19 	bl	8000adc <__aeabi_dcmplt>
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	f43f aef5 	beq.w	800ac9a <_dtoa_r+0x43a>
 800aeb0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800aeb2:	1e73      	subs	r3, r6, #1
 800aeb4:	9315      	str	r3, [sp, #84]	@ 0x54
 800aeb6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aeba:	2b30      	cmp	r3, #48	@ 0x30
 800aebc:	d0f8      	beq.n	800aeb0 <_dtoa_r+0x650>
 800aebe:	9f04      	ldr	r7, [sp, #16]
 800aec0:	e73e      	b.n	800ad40 <_dtoa_r+0x4e0>
 800aec2:	4b9b      	ldr	r3, [pc, #620]	@ (800b130 <_dtoa_r+0x8d0>)
 800aec4:	f7f5 fb98 	bl	80005f8 <__aeabi_dmul>
 800aec8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aecc:	e7bc      	b.n	800ae48 <_dtoa_r+0x5e8>
 800aece:	d10c      	bne.n	800aeea <_dtoa_r+0x68a>
 800aed0:	4b98      	ldr	r3, [pc, #608]	@ (800b134 <_dtoa_r+0x8d4>)
 800aed2:	2200      	movs	r2, #0
 800aed4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aed8:	f7f5 fb8e 	bl	80005f8 <__aeabi_dmul>
 800aedc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aee0:	f7f5 fe10 	bl	8000b04 <__aeabi_dcmpge>
 800aee4:	2800      	cmp	r0, #0
 800aee6:	f000 8157 	beq.w	800b198 <_dtoa_r+0x938>
 800aeea:	2400      	movs	r4, #0
 800aeec:	4625      	mov	r5, r4
 800aeee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aef0:	43db      	mvns	r3, r3
 800aef2:	9304      	str	r3, [sp, #16]
 800aef4:	4656      	mov	r6, sl
 800aef6:	2700      	movs	r7, #0
 800aef8:	4621      	mov	r1, r4
 800aefa:	4658      	mov	r0, fp
 800aefc:	f000 fbb4 	bl	800b668 <_Bfree>
 800af00:	2d00      	cmp	r5, #0
 800af02:	d0dc      	beq.n	800aebe <_dtoa_r+0x65e>
 800af04:	b12f      	cbz	r7, 800af12 <_dtoa_r+0x6b2>
 800af06:	42af      	cmp	r7, r5
 800af08:	d003      	beq.n	800af12 <_dtoa_r+0x6b2>
 800af0a:	4639      	mov	r1, r7
 800af0c:	4658      	mov	r0, fp
 800af0e:	f000 fbab 	bl	800b668 <_Bfree>
 800af12:	4629      	mov	r1, r5
 800af14:	4658      	mov	r0, fp
 800af16:	f000 fba7 	bl	800b668 <_Bfree>
 800af1a:	e7d0      	b.n	800aebe <_dtoa_r+0x65e>
 800af1c:	9704      	str	r7, [sp, #16]
 800af1e:	4633      	mov	r3, r6
 800af20:	461e      	mov	r6, r3
 800af22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af26:	2a39      	cmp	r2, #57	@ 0x39
 800af28:	d107      	bne.n	800af3a <_dtoa_r+0x6da>
 800af2a:	459a      	cmp	sl, r3
 800af2c:	d1f8      	bne.n	800af20 <_dtoa_r+0x6c0>
 800af2e:	9a04      	ldr	r2, [sp, #16]
 800af30:	3201      	adds	r2, #1
 800af32:	9204      	str	r2, [sp, #16]
 800af34:	2230      	movs	r2, #48	@ 0x30
 800af36:	f88a 2000 	strb.w	r2, [sl]
 800af3a:	781a      	ldrb	r2, [r3, #0]
 800af3c:	3201      	adds	r2, #1
 800af3e:	701a      	strb	r2, [r3, #0]
 800af40:	e7bd      	b.n	800aebe <_dtoa_r+0x65e>
 800af42:	4b7b      	ldr	r3, [pc, #492]	@ (800b130 <_dtoa_r+0x8d0>)
 800af44:	2200      	movs	r2, #0
 800af46:	f7f5 fb57 	bl	80005f8 <__aeabi_dmul>
 800af4a:	2200      	movs	r2, #0
 800af4c:	2300      	movs	r3, #0
 800af4e:	4604      	mov	r4, r0
 800af50:	460d      	mov	r5, r1
 800af52:	f7f5 fdb9 	bl	8000ac8 <__aeabi_dcmpeq>
 800af56:	2800      	cmp	r0, #0
 800af58:	f43f aebb 	beq.w	800acd2 <_dtoa_r+0x472>
 800af5c:	e6f0      	b.n	800ad40 <_dtoa_r+0x4e0>
 800af5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800af60:	2a00      	cmp	r2, #0
 800af62:	f000 80db 	beq.w	800b11c <_dtoa_r+0x8bc>
 800af66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af68:	2a01      	cmp	r2, #1
 800af6a:	f300 80bf 	bgt.w	800b0ec <_dtoa_r+0x88c>
 800af6e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800af70:	2a00      	cmp	r2, #0
 800af72:	f000 80b7 	beq.w	800b0e4 <_dtoa_r+0x884>
 800af76:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800af7a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800af7c:	4646      	mov	r6, r8
 800af7e:	9a08      	ldr	r2, [sp, #32]
 800af80:	2101      	movs	r1, #1
 800af82:	441a      	add	r2, r3
 800af84:	4658      	mov	r0, fp
 800af86:	4498      	add	r8, r3
 800af88:	9208      	str	r2, [sp, #32]
 800af8a:	f000 fc21 	bl	800b7d0 <__i2b>
 800af8e:	4605      	mov	r5, r0
 800af90:	b15e      	cbz	r6, 800afaa <_dtoa_r+0x74a>
 800af92:	9b08      	ldr	r3, [sp, #32]
 800af94:	2b00      	cmp	r3, #0
 800af96:	dd08      	ble.n	800afaa <_dtoa_r+0x74a>
 800af98:	42b3      	cmp	r3, r6
 800af9a:	9a08      	ldr	r2, [sp, #32]
 800af9c:	bfa8      	it	ge
 800af9e:	4633      	movge	r3, r6
 800afa0:	eba8 0803 	sub.w	r8, r8, r3
 800afa4:	1af6      	subs	r6, r6, r3
 800afa6:	1ad3      	subs	r3, r2, r3
 800afa8:	9308      	str	r3, [sp, #32]
 800afaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afac:	b1f3      	cbz	r3, 800afec <_dtoa_r+0x78c>
 800afae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	f000 80b7 	beq.w	800b124 <_dtoa_r+0x8c4>
 800afb6:	b18c      	cbz	r4, 800afdc <_dtoa_r+0x77c>
 800afb8:	4629      	mov	r1, r5
 800afba:	4622      	mov	r2, r4
 800afbc:	4658      	mov	r0, fp
 800afbe:	f000 fcc7 	bl	800b950 <__pow5mult>
 800afc2:	464a      	mov	r2, r9
 800afc4:	4601      	mov	r1, r0
 800afc6:	4605      	mov	r5, r0
 800afc8:	4658      	mov	r0, fp
 800afca:	f000 fc17 	bl	800b7fc <__multiply>
 800afce:	4649      	mov	r1, r9
 800afd0:	9004      	str	r0, [sp, #16]
 800afd2:	4658      	mov	r0, fp
 800afd4:	f000 fb48 	bl	800b668 <_Bfree>
 800afd8:	9b04      	ldr	r3, [sp, #16]
 800afda:	4699      	mov	r9, r3
 800afdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afde:	1b1a      	subs	r2, r3, r4
 800afe0:	d004      	beq.n	800afec <_dtoa_r+0x78c>
 800afe2:	4649      	mov	r1, r9
 800afe4:	4658      	mov	r0, fp
 800afe6:	f000 fcb3 	bl	800b950 <__pow5mult>
 800afea:	4681      	mov	r9, r0
 800afec:	2101      	movs	r1, #1
 800afee:	4658      	mov	r0, fp
 800aff0:	f000 fbee 	bl	800b7d0 <__i2b>
 800aff4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aff6:	4604      	mov	r4, r0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	f000 81cf 	beq.w	800b39c <_dtoa_r+0xb3c>
 800affe:	461a      	mov	r2, r3
 800b000:	4601      	mov	r1, r0
 800b002:	4658      	mov	r0, fp
 800b004:	f000 fca4 	bl	800b950 <__pow5mult>
 800b008:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	4604      	mov	r4, r0
 800b00e:	f300 8095 	bgt.w	800b13c <_dtoa_r+0x8dc>
 800b012:	9b02      	ldr	r3, [sp, #8]
 800b014:	2b00      	cmp	r3, #0
 800b016:	f040 8087 	bne.w	800b128 <_dtoa_r+0x8c8>
 800b01a:	9b03      	ldr	r3, [sp, #12]
 800b01c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b020:	2b00      	cmp	r3, #0
 800b022:	f040 8089 	bne.w	800b138 <_dtoa_r+0x8d8>
 800b026:	9b03      	ldr	r3, [sp, #12]
 800b028:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b02c:	0d1b      	lsrs	r3, r3, #20
 800b02e:	051b      	lsls	r3, r3, #20
 800b030:	b12b      	cbz	r3, 800b03e <_dtoa_r+0x7de>
 800b032:	9b08      	ldr	r3, [sp, #32]
 800b034:	3301      	adds	r3, #1
 800b036:	9308      	str	r3, [sp, #32]
 800b038:	f108 0801 	add.w	r8, r8, #1
 800b03c:	2301      	movs	r3, #1
 800b03e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b040:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b042:	2b00      	cmp	r3, #0
 800b044:	f000 81b0 	beq.w	800b3a8 <_dtoa_r+0xb48>
 800b048:	6923      	ldr	r3, [r4, #16]
 800b04a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b04e:	6918      	ldr	r0, [r3, #16]
 800b050:	f000 fb72 	bl	800b738 <__hi0bits>
 800b054:	f1c0 0020 	rsb	r0, r0, #32
 800b058:	9b08      	ldr	r3, [sp, #32]
 800b05a:	4418      	add	r0, r3
 800b05c:	f010 001f 	ands.w	r0, r0, #31
 800b060:	d077      	beq.n	800b152 <_dtoa_r+0x8f2>
 800b062:	f1c0 0320 	rsb	r3, r0, #32
 800b066:	2b04      	cmp	r3, #4
 800b068:	dd6b      	ble.n	800b142 <_dtoa_r+0x8e2>
 800b06a:	9b08      	ldr	r3, [sp, #32]
 800b06c:	f1c0 001c 	rsb	r0, r0, #28
 800b070:	4403      	add	r3, r0
 800b072:	4480      	add	r8, r0
 800b074:	4406      	add	r6, r0
 800b076:	9308      	str	r3, [sp, #32]
 800b078:	f1b8 0f00 	cmp.w	r8, #0
 800b07c:	dd05      	ble.n	800b08a <_dtoa_r+0x82a>
 800b07e:	4649      	mov	r1, r9
 800b080:	4642      	mov	r2, r8
 800b082:	4658      	mov	r0, fp
 800b084:	f000 fcbe 	bl	800ba04 <__lshift>
 800b088:	4681      	mov	r9, r0
 800b08a:	9b08      	ldr	r3, [sp, #32]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	dd05      	ble.n	800b09c <_dtoa_r+0x83c>
 800b090:	4621      	mov	r1, r4
 800b092:	461a      	mov	r2, r3
 800b094:	4658      	mov	r0, fp
 800b096:	f000 fcb5 	bl	800ba04 <__lshift>
 800b09a:	4604      	mov	r4, r0
 800b09c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d059      	beq.n	800b156 <_dtoa_r+0x8f6>
 800b0a2:	4621      	mov	r1, r4
 800b0a4:	4648      	mov	r0, r9
 800b0a6:	f000 fd19 	bl	800badc <__mcmp>
 800b0aa:	2800      	cmp	r0, #0
 800b0ac:	da53      	bge.n	800b156 <_dtoa_r+0x8f6>
 800b0ae:	1e7b      	subs	r3, r7, #1
 800b0b0:	9304      	str	r3, [sp, #16]
 800b0b2:	4649      	mov	r1, r9
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	220a      	movs	r2, #10
 800b0b8:	4658      	mov	r0, fp
 800b0ba:	f000 faf7 	bl	800b6ac <__multadd>
 800b0be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0c0:	4681      	mov	r9, r0
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	f000 8172 	beq.w	800b3ac <_dtoa_r+0xb4c>
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	4629      	mov	r1, r5
 800b0cc:	220a      	movs	r2, #10
 800b0ce:	4658      	mov	r0, fp
 800b0d0:	f000 faec 	bl	800b6ac <__multadd>
 800b0d4:	9b00      	ldr	r3, [sp, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	4605      	mov	r5, r0
 800b0da:	dc67      	bgt.n	800b1ac <_dtoa_r+0x94c>
 800b0dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0de:	2b02      	cmp	r3, #2
 800b0e0:	dc41      	bgt.n	800b166 <_dtoa_r+0x906>
 800b0e2:	e063      	b.n	800b1ac <_dtoa_r+0x94c>
 800b0e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b0e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b0ea:	e746      	b.n	800af7a <_dtoa_r+0x71a>
 800b0ec:	9b07      	ldr	r3, [sp, #28]
 800b0ee:	1e5c      	subs	r4, r3, #1
 800b0f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0f2:	42a3      	cmp	r3, r4
 800b0f4:	bfbf      	itttt	lt
 800b0f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b0f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b0fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b0fc:	1ae3      	sublt	r3, r4, r3
 800b0fe:	bfb4      	ite	lt
 800b100:	18d2      	addlt	r2, r2, r3
 800b102:	1b1c      	subge	r4, r3, r4
 800b104:	9b07      	ldr	r3, [sp, #28]
 800b106:	bfbc      	itt	lt
 800b108:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b10a:	2400      	movlt	r4, #0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	bfb5      	itete	lt
 800b110:	eba8 0603 	sublt.w	r6, r8, r3
 800b114:	9b07      	ldrge	r3, [sp, #28]
 800b116:	2300      	movlt	r3, #0
 800b118:	4646      	movge	r6, r8
 800b11a:	e730      	b.n	800af7e <_dtoa_r+0x71e>
 800b11c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b11e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b120:	4646      	mov	r6, r8
 800b122:	e735      	b.n	800af90 <_dtoa_r+0x730>
 800b124:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b126:	e75c      	b.n	800afe2 <_dtoa_r+0x782>
 800b128:	2300      	movs	r3, #0
 800b12a:	e788      	b.n	800b03e <_dtoa_r+0x7de>
 800b12c:	3fe00000 	.word	0x3fe00000
 800b130:	40240000 	.word	0x40240000
 800b134:	40140000 	.word	0x40140000
 800b138:	9b02      	ldr	r3, [sp, #8]
 800b13a:	e780      	b.n	800b03e <_dtoa_r+0x7de>
 800b13c:	2300      	movs	r3, #0
 800b13e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b140:	e782      	b.n	800b048 <_dtoa_r+0x7e8>
 800b142:	d099      	beq.n	800b078 <_dtoa_r+0x818>
 800b144:	9a08      	ldr	r2, [sp, #32]
 800b146:	331c      	adds	r3, #28
 800b148:	441a      	add	r2, r3
 800b14a:	4498      	add	r8, r3
 800b14c:	441e      	add	r6, r3
 800b14e:	9208      	str	r2, [sp, #32]
 800b150:	e792      	b.n	800b078 <_dtoa_r+0x818>
 800b152:	4603      	mov	r3, r0
 800b154:	e7f6      	b.n	800b144 <_dtoa_r+0x8e4>
 800b156:	9b07      	ldr	r3, [sp, #28]
 800b158:	9704      	str	r7, [sp, #16]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	dc20      	bgt.n	800b1a0 <_dtoa_r+0x940>
 800b15e:	9300      	str	r3, [sp, #0]
 800b160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b162:	2b02      	cmp	r3, #2
 800b164:	dd1e      	ble.n	800b1a4 <_dtoa_r+0x944>
 800b166:	9b00      	ldr	r3, [sp, #0]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	f47f aec0 	bne.w	800aeee <_dtoa_r+0x68e>
 800b16e:	4621      	mov	r1, r4
 800b170:	2205      	movs	r2, #5
 800b172:	4658      	mov	r0, fp
 800b174:	f000 fa9a 	bl	800b6ac <__multadd>
 800b178:	4601      	mov	r1, r0
 800b17a:	4604      	mov	r4, r0
 800b17c:	4648      	mov	r0, r9
 800b17e:	f000 fcad 	bl	800badc <__mcmp>
 800b182:	2800      	cmp	r0, #0
 800b184:	f77f aeb3 	ble.w	800aeee <_dtoa_r+0x68e>
 800b188:	4656      	mov	r6, sl
 800b18a:	2331      	movs	r3, #49	@ 0x31
 800b18c:	f806 3b01 	strb.w	r3, [r6], #1
 800b190:	9b04      	ldr	r3, [sp, #16]
 800b192:	3301      	adds	r3, #1
 800b194:	9304      	str	r3, [sp, #16]
 800b196:	e6ae      	b.n	800aef6 <_dtoa_r+0x696>
 800b198:	9c07      	ldr	r4, [sp, #28]
 800b19a:	9704      	str	r7, [sp, #16]
 800b19c:	4625      	mov	r5, r4
 800b19e:	e7f3      	b.n	800b188 <_dtoa_r+0x928>
 800b1a0:	9b07      	ldr	r3, [sp, #28]
 800b1a2:	9300      	str	r3, [sp, #0]
 800b1a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	f000 8104 	beq.w	800b3b4 <_dtoa_r+0xb54>
 800b1ac:	2e00      	cmp	r6, #0
 800b1ae:	dd05      	ble.n	800b1bc <_dtoa_r+0x95c>
 800b1b0:	4629      	mov	r1, r5
 800b1b2:	4632      	mov	r2, r6
 800b1b4:	4658      	mov	r0, fp
 800b1b6:	f000 fc25 	bl	800ba04 <__lshift>
 800b1ba:	4605      	mov	r5, r0
 800b1bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d05a      	beq.n	800b278 <_dtoa_r+0xa18>
 800b1c2:	6869      	ldr	r1, [r5, #4]
 800b1c4:	4658      	mov	r0, fp
 800b1c6:	f000 fa0f 	bl	800b5e8 <_Balloc>
 800b1ca:	4606      	mov	r6, r0
 800b1cc:	b928      	cbnz	r0, 800b1da <_dtoa_r+0x97a>
 800b1ce:	4b84      	ldr	r3, [pc, #528]	@ (800b3e0 <_dtoa_r+0xb80>)
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b1d6:	f7ff bb5a 	b.w	800a88e <_dtoa_r+0x2e>
 800b1da:	692a      	ldr	r2, [r5, #16]
 800b1dc:	3202      	adds	r2, #2
 800b1de:	0092      	lsls	r2, r2, #2
 800b1e0:	f105 010c 	add.w	r1, r5, #12
 800b1e4:	300c      	adds	r0, #12
 800b1e6:	f7ff faa4 	bl	800a732 <memcpy>
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	4631      	mov	r1, r6
 800b1ee:	4658      	mov	r0, fp
 800b1f0:	f000 fc08 	bl	800ba04 <__lshift>
 800b1f4:	f10a 0301 	add.w	r3, sl, #1
 800b1f8:	9307      	str	r3, [sp, #28]
 800b1fa:	9b00      	ldr	r3, [sp, #0]
 800b1fc:	4453      	add	r3, sl
 800b1fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b200:	9b02      	ldr	r3, [sp, #8]
 800b202:	f003 0301 	and.w	r3, r3, #1
 800b206:	462f      	mov	r7, r5
 800b208:	930a      	str	r3, [sp, #40]	@ 0x28
 800b20a:	4605      	mov	r5, r0
 800b20c:	9b07      	ldr	r3, [sp, #28]
 800b20e:	4621      	mov	r1, r4
 800b210:	3b01      	subs	r3, #1
 800b212:	4648      	mov	r0, r9
 800b214:	9300      	str	r3, [sp, #0]
 800b216:	f7ff fa9a 	bl	800a74e <quorem>
 800b21a:	4639      	mov	r1, r7
 800b21c:	9002      	str	r0, [sp, #8]
 800b21e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b222:	4648      	mov	r0, r9
 800b224:	f000 fc5a 	bl	800badc <__mcmp>
 800b228:	462a      	mov	r2, r5
 800b22a:	9008      	str	r0, [sp, #32]
 800b22c:	4621      	mov	r1, r4
 800b22e:	4658      	mov	r0, fp
 800b230:	f000 fc70 	bl	800bb14 <__mdiff>
 800b234:	68c2      	ldr	r2, [r0, #12]
 800b236:	4606      	mov	r6, r0
 800b238:	bb02      	cbnz	r2, 800b27c <_dtoa_r+0xa1c>
 800b23a:	4601      	mov	r1, r0
 800b23c:	4648      	mov	r0, r9
 800b23e:	f000 fc4d 	bl	800badc <__mcmp>
 800b242:	4602      	mov	r2, r0
 800b244:	4631      	mov	r1, r6
 800b246:	4658      	mov	r0, fp
 800b248:	920e      	str	r2, [sp, #56]	@ 0x38
 800b24a:	f000 fa0d 	bl	800b668 <_Bfree>
 800b24e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b250:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b252:	9e07      	ldr	r6, [sp, #28]
 800b254:	ea43 0102 	orr.w	r1, r3, r2
 800b258:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b25a:	4319      	orrs	r1, r3
 800b25c:	d110      	bne.n	800b280 <_dtoa_r+0xa20>
 800b25e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b262:	d029      	beq.n	800b2b8 <_dtoa_r+0xa58>
 800b264:	9b08      	ldr	r3, [sp, #32]
 800b266:	2b00      	cmp	r3, #0
 800b268:	dd02      	ble.n	800b270 <_dtoa_r+0xa10>
 800b26a:	9b02      	ldr	r3, [sp, #8]
 800b26c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b270:	9b00      	ldr	r3, [sp, #0]
 800b272:	f883 8000 	strb.w	r8, [r3]
 800b276:	e63f      	b.n	800aef8 <_dtoa_r+0x698>
 800b278:	4628      	mov	r0, r5
 800b27a:	e7bb      	b.n	800b1f4 <_dtoa_r+0x994>
 800b27c:	2201      	movs	r2, #1
 800b27e:	e7e1      	b.n	800b244 <_dtoa_r+0x9e4>
 800b280:	9b08      	ldr	r3, [sp, #32]
 800b282:	2b00      	cmp	r3, #0
 800b284:	db04      	blt.n	800b290 <_dtoa_r+0xa30>
 800b286:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b288:	430b      	orrs	r3, r1
 800b28a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b28c:	430b      	orrs	r3, r1
 800b28e:	d120      	bne.n	800b2d2 <_dtoa_r+0xa72>
 800b290:	2a00      	cmp	r2, #0
 800b292:	dded      	ble.n	800b270 <_dtoa_r+0xa10>
 800b294:	4649      	mov	r1, r9
 800b296:	2201      	movs	r2, #1
 800b298:	4658      	mov	r0, fp
 800b29a:	f000 fbb3 	bl	800ba04 <__lshift>
 800b29e:	4621      	mov	r1, r4
 800b2a0:	4681      	mov	r9, r0
 800b2a2:	f000 fc1b 	bl	800badc <__mcmp>
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	dc03      	bgt.n	800b2b2 <_dtoa_r+0xa52>
 800b2aa:	d1e1      	bne.n	800b270 <_dtoa_r+0xa10>
 800b2ac:	f018 0f01 	tst.w	r8, #1
 800b2b0:	d0de      	beq.n	800b270 <_dtoa_r+0xa10>
 800b2b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b2b6:	d1d8      	bne.n	800b26a <_dtoa_r+0xa0a>
 800b2b8:	9a00      	ldr	r2, [sp, #0]
 800b2ba:	2339      	movs	r3, #57	@ 0x39
 800b2bc:	7013      	strb	r3, [r2, #0]
 800b2be:	4633      	mov	r3, r6
 800b2c0:	461e      	mov	r6, r3
 800b2c2:	3b01      	subs	r3, #1
 800b2c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b2c8:	2a39      	cmp	r2, #57	@ 0x39
 800b2ca:	d052      	beq.n	800b372 <_dtoa_r+0xb12>
 800b2cc:	3201      	adds	r2, #1
 800b2ce:	701a      	strb	r2, [r3, #0]
 800b2d0:	e612      	b.n	800aef8 <_dtoa_r+0x698>
 800b2d2:	2a00      	cmp	r2, #0
 800b2d4:	dd07      	ble.n	800b2e6 <_dtoa_r+0xa86>
 800b2d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b2da:	d0ed      	beq.n	800b2b8 <_dtoa_r+0xa58>
 800b2dc:	9a00      	ldr	r2, [sp, #0]
 800b2de:	f108 0301 	add.w	r3, r8, #1
 800b2e2:	7013      	strb	r3, [r2, #0]
 800b2e4:	e608      	b.n	800aef8 <_dtoa_r+0x698>
 800b2e6:	9b07      	ldr	r3, [sp, #28]
 800b2e8:	9a07      	ldr	r2, [sp, #28]
 800b2ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b2ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d028      	beq.n	800b346 <_dtoa_r+0xae6>
 800b2f4:	4649      	mov	r1, r9
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	220a      	movs	r2, #10
 800b2fa:	4658      	mov	r0, fp
 800b2fc:	f000 f9d6 	bl	800b6ac <__multadd>
 800b300:	42af      	cmp	r7, r5
 800b302:	4681      	mov	r9, r0
 800b304:	f04f 0300 	mov.w	r3, #0
 800b308:	f04f 020a 	mov.w	r2, #10
 800b30c:	4639      	mov	r1, r7
 800b30e:	4658      	mov	r0, fp
 800b310:	d107      	bne.n	800b322 <_dtoa_r+0xac2>
 800b312:	f000 f9cb 	bl	800b6ac <__multadd>
 800b316:	4607      	mov	r7, r0
 800b318:	4605      	mov	r5, r0
 800b31a:	9b07      	ldr	r3, [sp, #28]
 800b31c:	3301      	adds	r3, #1
 800b31e:	9307      	str	r3, [sp, #28]
 800b320:	e774      	b.n	800b20c <_dtoa_r+0x9ac>
 800b322:	f000 f9c3 	bl	800b6ac <__multadd>
 800b326:	4629      	mov	r1, r5
 800b328:	4607      	mov	r7, r0
 800b32a:	2300      	movs	r3, #0
 800b32c:	220a      	movs	r2, #10
 800b32e:	4658      	mov	r0, fp
 800b330:	f000 f9bc 	bl	800b6ac <__multadd>
 800b334:	4605      	mov	r5, r0
 800b336:	e7f0      	b.n	800b31a <_dtoa_r+0xaba>
 800b338:	9b00      	ldr	r3, [sp, #0]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	bfcc      	ite	gt
 800b33e:	461e      	movgt	r6, r3
 800b340:	2601      	movle	r6, #1
 800b342:	4456      	add	r6, sl
 800b344:	2700      	movs	r7, #0
 800b346:	4649      	mov	r1, r9
 800b348:	2201      	movs	r2, #1
 800b34a:	4658      	mov	r0, fp
 800b34c:	f000 fb5a 	bl	800ba04 <__lshift>
 800b350:	4621      	mov	r1, r4
 800b352:	4681      	mov	r9, r0
 800b354:	f000 fbc2 	bl	800badc <__mcmp>
 800b358:	2800      	cmp	r0, #0
 800b35a:	dcb0      	bgt.n	800b2be <_dtoa_r+0xa5e>
 800b35c:	d102      	bne.n	800b364 <_dtoa_r+0xb04>
 800b35e:	f018 0f01 	tst.w	r8, #1
 800b362:	d1ac      	bne.n	800b2be <_dtoa_r+0xa5e>
 800b364:	4633      	mov	r3, r6
 800b366:	461e      	mov	r6, r3
 800b368:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b36c:	2a30      	cmp	r2, #48	@ 0x30
 800b36e:	d0fa      	beq.n	800b366 <_dtoa_r+0xb06>
 800b370:	e5c2      	b.n	800aef8 <_dtoa_r+0x698>
 800b372:	459a      	cmp	sl, r3
 800b374:	d1a4      	bne.n	800b2c0 <_dtoa_r+0xa60>
 800b376:	9b04      	ldr	r3, [sp, #16]
 800b378:	3301      	adds	r3, #1
 800b37a:	9304      	str	r3, [sp, #16]
 800b37c:	2331      	movs	r3, #49	@ 0x31
 800b37e:	f88a 3000 	strb.w	r3, [sl]
 800b382:	e5b9      	b.n	800aef8 <_dtoa_r+0x698>
 800b384:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b386:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b3e4 <_dtoa_r+0xb84>
 800b38a:	b11b      	cbz	r3, 800b394 <_dtoa_r+0xb34>
 800b38c:	f10a 0308 	add.w	r3, sl, #8
 800b390:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b392:	6013      	str	r3, [r2, #0]
 800b394:	4650      	mov	r0, sl
 800b396:	b019      	add	sp, #100	@ 0x64
 800b398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b39c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b39e:	2b01      	cmp	r3, #1
 800b3a0:	f77f ae37 	ble.w	800b012 <_dtoa_r+0x7b2>
 800b3a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3a8:	2001      	movs	r0, #1
 800b3aa:	e655      	b.n	800b058 <_dtoa_r+0x7f8>
 800b3ac:	9b00      	ldr	r3, [sp, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	f77f aed6 	ble.w	800b160 <_dtoa_r+0x900>
 800b3b4:	4656      	mov	r6, sl
 800b3b6:	4621      	mov	r1, r4
 800b3b8:	4648      	mov	r0, r9
 800b3ba:	f7ff f9c8 	bl	800a74e <quorem>
 800b3be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b3c2:	f806 8b01 	strb.w	r8, [r6], #1
 800b3c6:	9b00      	ldr	r3, [sp, #0]
 800b3c8:	eba6 020a 	sub.w	r2, r6, sl
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	ddb3      	ble.n	800b338 <_dtoa_r+0xad8>
 800b3d0:	4649      	mov	r1, r9
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	220a      	movs	r2, #10
 800b3d6:	4658      	mov	r0, fp
 800b3d8:	f000 f968 	bl	800b6ac <__multadd>
 800b3dc:	4681      	mov	r9, r0
 800b3de:	e7ea      	b.n	800b3b6 <_dtoa_r+0xb56>
 800b3e0:	0800d7f8 	.word	0x0800d7f8
 800b3e4:	0800d77c 	.word	0x0800d77c

0800b3e8 <_free_r>:
 800b3e8:	b538      	push	{r3, r4, r5, lr}
 800b3ea:	4605      	mov	r5, r0
 800b3ec:	2900      	cmp	r1, #0
 800b3ee:	d041      	beq.n	800b474 <_free_r+0x8c>
 800b3f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3f4:	1f0c      	subs	r4, r1, #4
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	bfb8      	it	lt
 800b3fa:	18e4      	addlt	r4, r4, r3
 800b3fc:	f000 f8e8 	bl	800b5d0 <__malloc_lock>
 800b400:	4a1d      	ldr	r2, [pc, #116]	@ (800b478 <_free_r+0x90>)
 800b402:	6813      	ldr	r3, [r2, #0]
 800b404:	b933      	cbnz	r3, 800b414 <_free_r+0x2c>
 800b406:	6063      	str	r3, [r4, #4]
 800b408:	6014      	str	r4, [r2, #0]
 800b40a:	4628      	mov	r0, r5
 800b40c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b410:	f000 b8e4 	b.w	800b5dc <__malloc_unlock>
 800b414:	42a3      	cmp	r3, r4
 800b416:	d908      	bls.n	800b42a <_free_r+0x42>
 800b418:	6820      	ldr	r0, [r4, #0]
 800b41a:	1821      	adds	r1, r4, r0
 800b41c:	428b      	cmp	r3, r1
 800b41e:	bf01      	itttt	eq
 800b420:	6819      	ldreq	r1, [r3, #0]
 800b422:	685b      	ldreq	r3, [r3, #4]
 800b424:	1809      	addeq	r1, r1, r0
 800b426:	6021      	streq	r1, [r4, #0]
 800b428:	e7ed      	b.n	800b406 <_free_r+0x1e>
 800b42a:	461a      	mov	r2, r3
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	b10b      	cbz	r3, 800b434 <_free_r+0x4c>
 800b430:	42a3      	cmp	r3, r4
 800b432:	d9fa      	bls.n	800b42a <_free_r+0x42>
 800b434:	6811      	ldr	r1, [r2, #0]
 800b436:	1850      	adds	r0, r2, r1
 800b438:	42a0      	cmp	r0, r4
 800b43a:	d10b      	bne.n	800b454 <_free_r+0x6c>
 800b43c:	6820      	ldr	r0, [r4, #0]
 800b43e:	4401      	add	r1, r0
 800b440:	1850      	adds	r0, r2, r1
 800b442:	4283      	cmp	r3, r0
 800b444:	6011      	str	r1, [r2, #0]
 800b446:	d1e0      	bne.n	800b40a <_free_r+0x22>
 800b448:	6818      	ldr	r0, [r3, #0]
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	6053      	str	r3, [r2, #4]
 800b44e:	4408      	add	r0, r1
 800b450:	6010      	str	r0, [r2, #0]
 800b452:	e7da      	b.n	800b40a <_free_r+0x22>
 800b454:	d902      	bls.n	800b45c <_free_r+0x74>
 800b456:	230c      	movs	r3, #12
 800b458:	602b      	str	r3, [r5, #0]
 800b45a:	e7d6      	b.n	800b40a <_free_r+0x22>
 800b45c:	6820      	ldr	r0, [r4, #0]
 800b45e:	1821      	adds	r1, r4, r0
 800b460:	428b      	cmp	r3, r1
 800b462:	bf04      	itt	eq
 800b464:	6819      	ldreq	r1, [r3, #0]
 800b466:	685b      	ldreq	r3, [r3, #4]
 800b468:	6063      	str	r3, [r4, #4]
 800b46a:	bf04      	itt	eq
 800b46c:	1809      	addeq	r1, r1, r0
 800b46e:	6021      	streq	r1, [r4, #0]
 800b470:	6054      	str	r4, [r2, #4]
 800b472:	e7ca      	b.n	800b40a <_free_r+0x22>
 800b474:	bd38      	pop	{r3, r4, r5, pc}
 800b476:	bf00      	nop
 800b478:	2000bf98 	.word	0x2000bf98

0800b47c <malloc>:
 800b47c:	4b02      	ldr	r3, [pc, #8]	@ (800b488 <malloc+0xc>)
 800b47e:	4601      	mov	r1, r0
 800b480:	6818      	ldr	r0, [r3, #0]
 800b482:	f000 b825 	b.w	800b4d0 <_malloc_r>
 800b486:	bf00      	nop
 800b488:	20000030 	.word	0x20000030

0800b48c <sbrk_aligned>:
 800b48c:	b570      	push	{r4, r5, r6, lr}
 800b48e:	4e0f      	ldr	r6, [pc, #60]	@ (800b4cc <sbrk_aligned+0x40>)
 800b490:	460c      	mov	r4, r1
 800b492:	6831      	ldr	r1, [r6, #0]
 800b494:	4605      	mov	r5, r0
 800b496:	b911      	cbnz	r1, 800b49e <sbrk_aligned+0x12>
 800b498:	f000 fe46 	bl	800c128 <_sbrk_r>
 800b49c:	6030      	str	r0, [r6, #0]
 800b49e:	4621      	mov	r1, r4
 800b4a0:	4628      	mov	r0, r5
 800b4a2:	f000 fe41 	bl	800c128 <_sbrk_r>
 800b4a6:	1c43      	adds	r3, r0, #1
 800b4a8:	d103      	bne.n	800b4b2 <sbrk_aligned+0x26>
 800b4aa:	f04f 34ff 	mov.w	r4, #4294967295
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	bd70      	pop	{r4, r5, r6, pc}
 800b4b2:	1cc4      	adds	r4, r0, #3
 800b4b4:	f024 0403 	bic.w	r4, r4, #3
 800b4b8:	42a0      	cmp	r0, r4
 800b4ba:	d0f8      	beq.n	800b4ae <sbrk_aligned+0x22>
 800b4bc:	1a21      	subs	r1, r4, r0
 800b4be:	4628      	mov	r0, r5
 800b4c0:	f000 fe32 	bl	800c128 <_sbrk_r>
 800b4c4:	3001      	adds	r0, #1
 800b4c6:	d1f2      	bne.n	800b4ae <sbrk_aligned+0x22>
 800b4c8:	e7ef      	b.n	800b4aa <sbrk_aligned+0x1e>
 800b4ca:	bf00      	nop
 800b4cc:	2000bf94 	.word	0x2000bf94

0800b4d0 <_malloc_r>:
 800b4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4d4:	1ccd      	adds	r5, r1, #3
 800b4d6:	f025 0503 	bic.w	r5, r5, #3
 800b4da:	3508      	adds	r5, #8
 800b4dc:	2d0c      	cmp	r5, #12
 800b4de:	bf38      	it	cc
 800b4e0:	250c      	movcc	r5, #12
 800b4e2:	2d00      	cmp	r5, #0
 800b4e4:	4606      	mov	r6, r0
 800b4e6:	db01      	blt.n	800b4ec <_malloc_r+0x1c>
 800b4e8:	42a9      	cmp	r1, r5
 800b4ea:	d904      	bls.n	800b4f6 <_malloc_r+0x26>
 800b4ec:	230c      	movs	r3, #12
 800b4ee:	6033      	str	r3, [r6, #0]
 800b4f0:	2000      	movs	r0, #0
 800b4f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b5cc <_malloc_r+0xfc>
 800b4fa:	f000 f869 	bl	800b5d0 <__malloc_lock>
 800b4fe:	f8d8 3000 	ldr.w	r3, [r8]
 800b502:	461c      	mov	r4, r3
 800b504:	bb44      	cbnz	r4, 800b558 <_malloc_r+0x88>
 800b506:	4629      	mov	r1, r5
 800b508:	4630      	mov	r0, r6
 800b50a:	f7ff ffbf 	bl	800b48c <sbrk_aligned>
 800b50e:	1c43      	adds	r3, r0, #1
 800b510:	4604      	mov	r4, r0
 800b512:	d158      	bne.n	800b5c6 <_malloc_r+0xf6>
 800b514:	f8d8 4000 	ldr.w	r4, [r8]
 800b518:	4627      	mov	r7, r4
 800b51a:	2f00      	cmp	r7, #0
 800b51c:	d143      	bne.n	800b5a6 <_malloc_r+0xd6>
 800b51e:	2c00      	cmp	r4, #0
 800b520:	d04b      	beq.n	800b5ba <_malloc_r+0xea>
 800b522:	6823      	ldr	r3, [r4, #0]
 800b524:	4639      	mov	r1, r7
 800b526:	4630      	mov	r0, r6
 800b528:	eb04 0903 	add.w	r9, r4, r3
 800b52c:	f000 fdfc 	bl	800c128 <_sbrk_r>
 800b530:	4581      	cmp	r9, r0
 800b532:	d142      	bne.n	800b5ba <_malloc_r+0xea>
 800b534:	6821      	ldr	r1, [r4, #0]
 800b536:	1a6d      	subs	r5, r5, r1
 800b538:	4629      	mov	r1, r5
 800b53a:	4630      	mov	r0, r6
 800b53c:	f7ff ffa6 	bl	800b48c <sbrk_aligned>
 800b540:	3001      	adds	r0, #1
 800b542:	d03a      	beq.n	800b5ba <_malloc_r+0xea>
 800b544:	6823      	ldr	r3, [r4, #0]
 800b546:	442b      	add	r3, r5
 800b548:	6023      	str	r3, [r4, #0]
 800b54a:	f8d8 3000 	ldr.w	r3, [r8]
 800b54e:	685a      	ldr	r2, [r3, #4]
 800b550:	bb62      	cbnz	r2, 800b5ac <_malloc_r+0xdc>
 800b552:	f8c8 7000 	str.w	r7, [r8]
 800b556:	e00f      	b.n	800b578 <_malloc_r+0xa8>
 800b558:	6822      	ldr	r2, [r4, #0]
 800b55a:	1b52      	subs	r2, r2, r5
 800b55c:	d420      	bmi.n	800b5a0 <_malloc_r+0xd0>
 800b55e:	2a0b      	cmp	r2, #11
 800b560:	d917      	bls.n	800b592 <_malloc_r+0xc2>
 800b562:	1961      	adds	r1, r4, r5
 800b564:	42a3      	cmp	r3, r4
 800b566:	6025      	str	r5, [r4, #0]
 800b568:	bf18      	it	ne
 800b56a:	6059      	strne	r1, [r3, #4]
 800b56c:	6863      	ldr	r3, [r4, #4]
 800b56e:	bf08      	it	eq
 800b570:	f8c8 1000 	streq.w	r1, [r8]
 800b574:	5162      	str	r2, [r4, r5]
 800b576:	604b      	str	r3, [r1, #4]
 800b578:	4630      	mov	r0, r6
 800b57a:	f000 f82f 	bl	800b5dc <__malloc_unlock>
 800b57e:	f104 000b 	add.w	r0, r4, #11
 800b582:	1d23      	adds	r3, r4, #4
 800b584:	f020 0007 	bic.w	r0, r0, #7
 800b588:	1ac2      	subs	r2, r0, r3
 800b58a:	bf1c      	itt	ne
 800b58c:	1a1b      	subne	r3, r3, r0
 800b58e:	50a3      	strne	r3, [r4, r2]
 800b590:	e7af      	b.n	800b4f2 <_malloc_r+0x22>
 800b592:	6862      	ldr	r2, [r4, #4]
 800b594:	42a3      	cmp	r3, r4
 800b596:	bf0c      	ite	eq
 800b598:	f8c8 2000 	streq.w	r2, [r8]
 800b59c:	605a      	strne	r2, [r3, #4]
 800b59e:	e7eb      	b.n	800b578 <_malloc_r+0xa8>
 800b5a0:	4623      	mov	r3, r4
 800b5a2:	6864      	ldr	r4, [r4, #4]
 800b5a4:	e7ae      	b.n	800b504 <_malloc_r+0x34>
 800b5a6:	463c      	mov	r4, r7
 800b5a8:	687f      	ldr	r7, [r7, #4]
 800b5aa:	e7b6      	b.n	800b51a <_malloc_r+0x4a>
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	42a3      	cmp	r3, r4
 800b5b2:	d1fb      	bne.n	800b5ac <_malloc_r+0xdc>
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	6053      	str	r3, [r2, #4]
 800b5b8:	e7de      	b.n	800b578 <_malloc_r+0xa8>
 800b5ba:	230c      	movs	r3, #12
 800b5bc:	6033      	str	r3, [r6, #0]
 800b5be:	4630      	mov	r0, r6
 800b5c0:	f000 f80c 	bl	800b5dc <__malloc_unlock>
 800b5c4:	e794      	b.n	800b4f0 <_malloc_r+0x20>
 800b5c6:	6005      	str	r5, [r0, #0]
 800b5c8:	e7d6      	b.n	800b578 <_malloc_r+0xa8>
 800b5ca:	bf00      	nop
 800b5cc:	2000bf98 	.word	0x2000bf98

0800b5d0 <__malloc_lock>:
 800b5d0:	4801      	ldr	r0, [pc, #4]	@ (800b5d8 <__malloc_lock+0x8>)
 800b5d2:	f7ff b8ac 	b.w	800a72e <__retarget_lock_acquire_recursive>
 800b5d6:	bf00      	nop
 800b5d8:	2000bf90 	.word	0x2000bf90

0800b5dc <__malloc_unlock>:
 800b5dc:	4801      	ldr	r0, [pc, #4]	@ (800b5e4 <__malloc_unlock+0x8>)
 800b5de:	f7ff b8a7 	b.w	800a730 <__retarget_lock_release_recursive>
 800b5e2:	bf00      	nop
 800b5e4:	2000bf90 	.word	0x2000bf90

0800b5e8 <_Balloc>:
 800b5e8:	b570      	push	{r4, r5, r6, lr}
 800b5ea:	69c6      	ldr	r6, [r0, #28]
 800b5ec:	4604      	mov	r4, r0
 800b5ee:	460d      	mov	r5, r1
 800b5f0:	b976      	cbnz	r6, 800b610 <_Balloc+0x28>
 800b5f2:	2010      	movs	r0, #16
 800b5f4:	f7ff ff42 	bl	800b47c <malloc>
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	61e0      	str	r0, [r4, #28]
 800b5fc:	b920      	cbnz	r0, 800b608 <_Balloc+0x20>
 800b5fe:	4b18      	ldr	r3, [pc, #96]	@ (800b660 <_Balloc+0x78>)
 800b600:	4818      	ldr	r0, [pc, #96]	@ (800b664 <_Balloc+0x7c>)
 800b602:	216b      	movs	r1, #107	@ 0x6b
 800b604:	f000 fda0 	bl	800c148 <__assert_func>
 800b608:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b60c:	6006      	str	r6, [r0, #0]
 800b60e:	60c6      	str	r6, [r0, #12]
 800b610:	69e6      	ldr	r6, [r4, #28]
 800b612:	68f3      	ldr	r3, [r6, #12]
 800b614:	b183      	cbz	r3, 800b638 <_Balloc+0x50>
 800b616:	69e3      	ldr	r3, [r4, #28]
 800b618:	68db      	ldr	r3, [r3, #12]
 800b61a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b61e:	b9b8      	cbnz	r0, 800b650 <_Balloc+0x68>
 800b620:	2101      	movs	r1, #1
 800b622:	fa01 f605 	lsl.w	r6, r1, r5
 800b626:	1d72      	adds	r2, r6, #5
 800b628:	0092      	lsls	r2, r2, #2
 800b62a:	4620      	mov	r0, r4
 800b62c:	f000 fdaa 	bl	800c184 <_calloc_r>
 800b630:	b160      	cbz	r0, 800b64c <_Balloc+0x64>
 800b632:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b636:	e00e      	b.n	800b656 <_Balloc+0x6e>
 800b638:	2221      	movs	r2, #33	@ 0x21
 800b63a:	2104      	movs	r1, #4
 800b63c:	4620      	mov	r0, r4
 800b63e:	f000 fda1 	bl	800c184 <_calloc_r>
 800b642:	69e3      	ldr	r3, [r4, #28]
 800b644:	60f0      	str	r0, [r6, #12]
 800b646:	68db      	ldr	r3, [r3, #12]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d1e4      	bne.n	800b616 <_Balloc+0x2e>
 800b64c:	2000      	movs	r0, #0
 800b64e:	bd70      	pop	{r4, r5, r6, pc}
 800b650:	6802      	ldr	r2, [r0, #0]
 800b652:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b656:	2300      	movs	r3, #0
 800b658:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b65c:	e7f7      	b.n	800b64e <_Balloc+0x66>
 800b65e:	bf00      	nop
 800b660:	0800d789 	.word	0x0800d789
 800b664:	0800d809 	.word	0x0800d809

0800b668 <_Bfree>:
 800b668:	b570      	push	{r4, r5, r6, lr}
 800b66a:	69c6      	ldr	r6, [r0, #28]
 800b66c:	4605      	mov	r5, r0
 800b66e:	460c      	mov	r4, r1
 800b670:	b976      	cbnz	r6, 800b690 <_Bfree+0x28>
 800b672:	2010      	movs	r0, #16
 800b674:	f7ff ff02 	bl	800b47c <malloc>
 800b678:	4602      	mov	r2, r0
 800b67a:	61e8      	str	r0, [r5, #28]
 800b67c:	b920      	cbnz	r0, 800b688 <_Bfree+0x20>
 800b67e:	4b09      	ldr	r3, [pc, #36]	@ (800b6a4 <_Bfree+0x3c>)
 800b680:	4809      	ldr	r0, [pc, #36]	@ (800b6a8 <_Bfree+0x40>)
 800b682:	218f      	movs	r1, #143	@ 0x8f
 800b684:	f000 fd60 	bl	800c148 <__assert_func>
 800b688:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b68c:	6006      	str	r6, [r0, #0]
 800b68e:	60c6      	str	r6, [r0, #12]
 800b690:	b13c      	cbz	r4, 800b6a2 <_Bfree+0x3a>
 800b692:	69eb      	ldr	r3, [r5, #28]
 800b694:	6862      	ldr	r2, [r4, #4]
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b69c:	6021      	str	r1, [r4, #0]
 800b69e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b6a2:	bd70      	pop	{r4, r5, r6, pc}
 800b6a4:	0800d789 	.word	0x0800d789
 800b6a8:	0800d809 	.word	0x0800d809

0800b6ac <__multadd>:
 800b6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6b0:	690d      	ldr	r5, [r1, #16]
 800b6b2:	4607      	mov	r7, r0
 800b6b4:	460c      	mov	r4, r1
 800b6b6:	461e      	mov	r6, r3
 800b6b8:	f101 0c14 	add.w	ip, r1, #20
 800b6bc:	2000      	movs	r0, #0
 800b6be:	f8dc 3000 	ldr.w	r3, [ip]
 800b6c2:	b299      	uxth	r1, r3
 800b6c4:	fb02 6101 	mla	r1, r2, r1, r6
 800b6c8:	0c1e      	lsrs	r6, r3, #16
 800b6ca:	0c0b      	lsrs	r3, r1, #16
 800b6cc:	fb02 3306 	mla	r3, r2, r6, r3
 800b6d0:	b289      	uxth	r1, r1
 800b6d2:	3001      	adds	r0, #1
 800b6d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b6d8:	4285      	cmp	r5, r0
 800b6da:	f84c 1b04 	str.w	r1, [ip], #4
 800b6de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b6e2:	dcec      	bgt.n	800b6be <__multadd+0x12>
 800b6e4:	b30e      	cbz	r6, 800b72a <__multadd+0x7e>
 800b6e6:	68a3      	ldr	r3, [r4, #8]
 800b6e8:	42ab      	cmp	r3, r5
 800b6ea:	dc19      	bgt.n	800b720 <__multadd+0x74>
 800b6ec:	6861      	ldr	r1, [r4, #4]
 800b6ee:	4638      	mov	r0, r7
 800b6f0:	3101      	adds	r1, #1
 800b6f2:	f7ff ff79 	bl	800b5e8 <_Balloc>
 800b6f6:	4680      	mov	r8, r0
 800b6f8:	b928      	cbnz	r0, 800b706 <__multadd+0x5a>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	4b0c      	ldr	r3, [pc, #48]	@ (800b730 <__multadd+0x84>)
 800b6fe:	480d      	ldr	r0, [pc, #52]	@ (800b734 <__multadd+0x88>)
 800b700:	21ba      	movs	r1, #186	@ 0xba
 800b702:	f000 fd21 	bl	800c148 <__assert_func>
 800b706:	6922      	ldr	r2, [r4, #16]
 800b708:	3202      	adds	r2, #2
 800b70a:	f104 010c 	add.w	r1, r4, #12
 800b70e:	0092      	lsls	r2, r2, #2
 800b710:	300c      	adds	r0, #12
 800b712:	f7ff f80e 	bl	800a732 <memcpy>
 800b716:	4621      	mov	r1, r4
 800b718:	4638      	mov	r0, r7
 800b71a:	f7ff ffa5 	bl	800b668 <_Bfree>
 800b71e:	4644      	mov	r4, r8
 800b720:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b724:	3501      	adds	r5, #1
 800b726:	615e      	str	r6, [r3, #20]
 800b728:	6125      	str	r5, [r4, #16]
 800b72a:	4620      	mov	r0, r4
 800b72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b730:	0800d7f8 	.word	0x0800d7f8
 800b734:	0800d809 	.word	0x0800d809

0800b738 <__hi0bits>:
 800b738:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b73c:	4603      	mov	r3, r0
 800b73e:	bf36      	itet	cc
 800b740:	0403      	lslcc	r3, r0, #16
 800b742:	2000      	movcs	r0, #0
 800b744:	2010      	movcc	r0, #16
 800b746:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b74a:	bf3c      	itt	cc
 800b74c:	021b      	lslcc	r3, r3, #8
 800b74e:	3008      	addcc	r0, #8
 800b750:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b754:	bf3c      	itt	cc
 800b756:	011b      	lslcc	r3, r3, #4
 800b758:	3004      	addcc	r0, #4
 800b75a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b75e:	bf3c      	itt	cc
 800b760:	009b      	lslcc	r3, r3, #2
 800b762:	3002      	addcc	r0, #2
 800b764:	2b00      	cmp	r3, #0
 800b766:	db05      	blt.n	800b774 <__hi0bits+0x3c>
 800b768:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b76c:	f100 0001 	add.w	r0, r0, #1
 800b770:	bf08      	it	eq
 800b772:	2020      	moveq	r0, #32
 800b774:	4770      	bx	lr

0800b776 <__lo0bits>:
 800b776:	6803      	ldr	r3, [r0, #0]
 800b778:	4602      	mov	r2, r0
 800b77a:	f013 0007 	ands.w	r0, r3, #7
 800b77e:	d00b      	beq.n	800b798 <__lo0bits+0x22>
 800b780:	07d9      	lsls	r1, r3, #31
 800b782:	d421      	bmi.n	800b7c8 <__lo0bits+0x52>
 800b784:	0798      	lsls	r0, r3, #30
 800b786:	bf49      	itett	mi
 800b788:	085b      	lsrmi	r3, r3, #1
 800b78a:	089b      	lsrpl	r3, r3, #2
 800b78c:	2001      	movmi	r0, #1
 800b78e:	6013      	strmi	r3, [r2, #0]
 800b790:	bf5c      	itt	pl
 800b792:	6013      	strpl	r3, [r2, #0]
 800b794:	2002      	movpl	r0, #2
 800b796:	4770      	bx	lr
 800b798:	b299      	uxth	r1, r3
 800b79a:	b909      	cbnz	r1, 800b7a0 <__lo0bits+0x2a>
 800b79c:	0c1b      	lsrs	r3, r3, #16
 800b79e:	2010      	movs	r0, #16
 800b7a0:	b2d9      	uxtb	r1, r3
 800b7a2:	b909      	cbnz	r1, 800b7a8 <__lo0bits+0x32>
 800b7a4:	3008      	adds	r0, #8
 800b7a6:	0a1b      	lsrs	r3, r3, #8
 800b7a8:	0719      	lsls	r1, r3, #28
 800b7aa:	bf04      	itt	eq
 800b7ac:	091b      	lsreq	r3, r3, #4
 800b7ae:	3004      	addeq	r0, #4
 800b7b0:	0799      	lsls	r1, r3, #30
 800b7b2:	bf04      	itt	eq
 800b7b4:	089b      	lsreq	r3, r3, #2
 800b7b6:	3002      	addeq	r0, #2
 800b7b8:	07d9      	lsls	r1, r3, #31
 800b7ba:	d403      	bmi.n	800b7c4 <__lo0bits+0x4e>
 800b7bc:	085b      	lsrs	r3, r3, #1
 800b7be:	f100 0001 	add.w	r0, r0, #1
 800b7c2:	d003      	beq.n	800b7cc <__lo0bits+0x56>
 800b7c4:	6013      	str	r3, [r2, #0]
 800b7c6:	4770      	bx	lr
 800b7c8:	2000      	movs	r0, #0
 800b7ca:	4770      	bx	lr
 800b7cc:	2020      	movs	r0, #32
 800b7ce:	4770      	bx	lr

0800b7d0 <__i2b>:
 800b7d0:	b510      	push	{r4, lr}
 800b7d2:	460c      	mov	r4, r1
 800b7d4:	2101      	movs	r1, #1
 800b7d6:	f7ff ff07 	bl	800b5e8 <_Balloc>
 800b7da:	4602      	mov	r2, r0
 800b7dc:	b928      	cbnz	r0, 800b7ea <__i2b+0x1a>
 800b7de:	4b05      	ldr	r3, [pc, #20]	@ (800b7f4 <__i2b+0x24>)
 800b7e0:	4805      	ldr	r0, [pc, #20]	@ (800b7f8 <__i2b+0x28>)
 800b7e2:	f240 1145 	movw	r1, #325	@ 0x145
 800b7e6:	f000 fcaf 	bl	800c148 <__assert_func>
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	6144      	str	r4, [r0, #20]
 800b7ee:	6103      	str	r3, [r0, #16]
 800b7f0:	bd10      	pop	{r4, pc}
 800b7f2:	bf00      	nop
 800b7f4:	0800d7f8 	.word	0x0800d7f8
 800b7f8:	0800d809 	.word	0x0800d809

0800b7fc <__multiply>:
 800b7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b800:	4614      	mov	r4, r2
 800b802:	690a      	ldr	r2, [r1, #16]
 800b804:	6923      	ldr	r3, [r4, #16]
 800b806:	429a      	cmp	r2, r3
 800b808:	bfa8      	it	ge
 800b80a:	4623      	movge	r3, r4
 800b80c:	460f      	mov	r7, r1
 800b80e:	bfa4      	itt	ge
 800b810:	460c      	movge	r4, r1
 800b812:	461f      	movge	r7, r3
 800b814:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b818:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b81c:	68a3      	ldr	r3, [r4, #8]
 800b81e:	6861      	ldr	r1, [r4, #4]
 800b820:	eb0a 0609 	add.w	r6, sl, r9
 800b824:	42b3      	cmp	r3, r6
 800b826:	b085      	sub	sp, #20
 800b828:	bfb8      	it	lt
 800b82a:	3101      	addlt	r1, #1
 800b82c:	f7ff fedc 	bl	800b5e8 <_Balloc>
 800b830:	b930      	cbnz	r0, 800b840 <__multiply+0x44>
 800b832:	4602      	mov	r2, r0
 800b834:	4b44      	ldr	r3, [pc, #272]	@ (800b948 <__multiply+0x14c>)
 800b836:	4845      	ldr	r0, [pc, #276]	@ (800b94c <__multiply+0x150>)
 800b838:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b83c:	f000 fc84 	bl	800c148 <__assert_func>
 800b840:	f100 0514 	add.w	r5, r0, #20
 800b844:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b848:	462b      	mov	r3, r5
 800b84a:	2200      	movs	r2, #0
 800b84c:	4543      	cmp	r3, r8
 800b84e:	d321      	bcc.n	800b894 <__multiply+0x98>
 800b850:	f107 0114 	add.w	r1, r7, #20
 800b854:	f104 0214 	add.w	r2, r4, #20
 800b858:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b85c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b860:	9302      	str	r3, [sp, #8]
 800b862:	1b13      	subs	r3, r2, r4
 800b864:	3b15      	subs	r3, #21
 800b866:	f023 0303 	bic.w	r3, r3, #3
 800b86a:	3304      	adds	r3, #4
 800b86c:	f104 0715 	add.w	r7, r4, #21
 800b870:	42ba      	cmp	r2, r7
 800b872:	bf38      	it	cc
 800b874:	2304      	movcc	r3, #4
 800b876:	9301      	str	r3, [sp, #4]
 800b878:	9b02      	ldr	r3, [sp, #8]
 800b87a:	9103      	str	r1, [sp, #12]
 800b87c:	428b      	cmp	r3, r1
 800b87e:	d80c      	bhi.n	800b89a <__multiply+0x9e>
 800b880:	2e00      	cmp	r6, #0
 800b882:	dd03      	ble.n	800b88c <__multiply+0x90>
 800b884:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d05b      	beq.n	800b944 <__multiply+0x148>
 800b88c:	6106      	str	r6, [r0, #16]
 800b88e:	b005      	add	sp, #20
 800b890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b894:	f843 2b04 	str.w	r2, [r3], #4
 800b898:	e7d8      	b.n	800b84c <__multiply+0x50>
 800b89a:	f8b1 a000 	ldrh.w	sl, [r1]
 800b89e:	f1ba 0f00 	cmp.w	sl, #0
 800b8a2:	d024      	beq.n	800b8ee <__multiply+0xf2>
 800b8a4:	f104 0e14 	add.w	lr, r4, #20
 800b8a8:	46a9      	mov	r9, r5
 800b8aa:	f04f 0c00 	mov.w	ip, #0
 800b8ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b8b2:	f8d9 3000 	ldr.w	r3, [r9]
 800b8b6:	fa1f fb87 	uxth.w	fp, r7
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	fb0a 330b 	mla	r3, sl, fp, r3
 800b8c0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b8c4:	f8d9 7000 	ldr.w	r7, [r9]
 800b8c8:	4463      	add	r3, ip
 800b8ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b8ce:	fb0a c70b 	mla	r7, sl, fp, ip
 800b8d2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b8dc:	4572      	cmp	r2, lr
 800b8de:	f849 3b04 	str.w	r3, [r9], #4
 800b8e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b8e6:	d8e2      	bhi.n	800b8ae <__multiply+0xb2>
 800b8e8:	9b01      	ldr	r3, [sp, #4]
 800b8ea:	f845 c003 	str.w	ip, [r5, r3]
 800b8ee:	9b03      	ldr	r3, [sp, #12]
 800b8f0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b8f4:	3104      	adds	r1, #4
 800b8f6:	f1b9 0f00 	cmp.w	r9, #0
 800b8fa:	d021      	beq.n	800b940 <__multiply+0x144>
 800b8fc:	682b      	ldr	r3, [r5, #0]
 800b8fe:	f104 0c14 	add.w	ip, r4, #20
 800b902:	46ae      	mov	lr, r5
 800b904:	f04f 0a00 	mov.w	sl, #0
 800b908:	f8bc b000 	ldrh.w	fp, [ip]
 800b90c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b910:	fb09 770b 	mla	r7, r9, fp, r7
 800b914:	4457      	add	r7, sl
 800b916:	b29b      	uxth	r3, r3
 800b918:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b91c:	f84e 3b04 	str.w	r3, [lr], #4
 800b920:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b924:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b928:	f8be 3000 	ldrh.w	r3, [lr]
 800b92c:	fb09 330a 	mla	r3, r9, sl, r3
 800b930:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b934:	4562      	cmp	r2, ip
 800b936:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b93a:	d8e5      	bhi.n	800b908 <__multiply+0x10c>
 800b93c:	9f01      	ldr	r7, [sp, #4]
 800b93e:	51eb      	str	r3, [r5, r7]
 800b940:	3504      	adds	r5, #4
 800b942:	e799      	b.n	800b878 <__multiply+0x7c>
 800b944:	3e01      	subs	r6, #1
 800b946:	e79b      	b.n	800b880 <__multiply+0x84>
 800b948:	0800d7f8 	.word	0x0800d7f8
 800b94c:	0800d809 	.word	0x0800d809

0800b950 <__pow5mult>:
 800b950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b954:	4615      	mov	r5, r2
 800b956:	f012 0203 	ands.w	r2, r2, #3
 800b95a:	4607      	mov	r7, r0
 800b95c:	460e      	mov	r6, r1
 800b95e:	d007      	beq.n	800b970 <__pow5mult+0x20>
 800b960:	4c25      	ldr	r4, [pc, #148]	@ (800b9f8 <__pow5mult+0xa8>)
 800b962:	3a01      	subs	r2, #1
 800b964:	2300      	movs	r3, #0
 800b966:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b96a:	f7ff fe9f 	bl	800b6ac <__multadd>
 800b96e:	4606      	mov	r6, r0
 800b970:	10ad      	asrs	r5, r5, #2
 800b972:	d03d      	beq.n	800b9f0 <__pow5mult+0xa0>
 800b974:	69fc      	ldr	r4, [r7, #28]
 800b976:	b97c      	cbnz	r4, 800b998 <__pow5mult+0x48>
 800b978:	2010      	movs	r0, #16
 800b97a:	f7ff fd7f 	bl	800b47c <malloc>
 800b97e:	4602      	mov	r2, r0
 800b980:	61f8      	str	r0, [r7, #28]
 800b982:	b928      	cbnz	r0, 800b990 <__pow5mult+0x40>
 800b984:	4b1d      	ldr	r3, [pc, #116]	@ (800b9fc <__pow5mult+0xac>)
 800b986:	481e      	ldr	r0, [pc, #120]	@ (800ba00 <__pow5mult+0xb0>)
 800b988:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b98c:	f000 fbdc 	bl	800c148 <__assert_func>
 800b990:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b994:	6004      	str	r4, [r0, #0]
 800b996:	60c4      	str	r4, [r0, #12]
 800b998:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b99c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b9a0:	b94c      	cbnz	r4, 800b9b6 <__pow5mult+0x66>
 800b9a2:	f240 2171 	movw	r1, #625	@ 0x271
 800b9a6:	4638      	mov	r0, r7
 800b9a8:	f7ff ff12 	bl	800b7d0 <__i2b>
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800b9b2:	4604      	mov	r4, r0
 800b9b4:	6003      	str	r3, [r0, #0]
 800b9b6:	f04f 0900 	mov.w	r9, #0
 800b9ba:	07eb      	lsls	r3, r5, #31
 800b9bc:	d50a      	bpl.n	800b9d4 <__pow5mult+0x84>
 800b9be:	4631      	mov	r1, r6
 800b9c0:	4622      	mov	r2, r4
 800b9c2:	4638      	mov	r0, r7
 800b9c4:	f7ff ff1a 	bl	800b7fc <__multiply>
 800b9c8:	4631      	mov	r1, r6
 800b9ca:	4680      	mov	r8, r0
 800b9cc:	4638      	mov	r0, r7
 800b9ce:	f7ff fe4b 	bl	800b668 <_Bfree>
 800b9d2:	4646      	mov	r6, r8
 800b9d4:	106d      	asrs	r5, r5, #1
 800b9d6:	d00b      	beq.n	800b9f0 <__pow5mult+0xa0>
 800b9d8:	6820      	ldr	r0, [r4, #0]
 800b9da:	b938      	cbnz	r0, 800b9ec <__pow5mult+0x9c>
 800b9dc:	4622      	mov	r2, r4
 800b9de:	4621      	mov	r1, r4
 800b9e0:	4638      	mov	r0, r7
 800b9e2:	f7ff ff0b 	bl	800b7fc <__multiply>
 800b9e6:	6020      	str	r0, [r4, #0]
 800b9e8:	f8c0 9000 	str.w	r9, [r0]
 800b9ec:	4604      	mov	r4, r0
 800b9ee:	e7e4      	b.n	800b9ba <__pow5mult+0x6a>
 800b9f0:	4630      	mov	r0, r6
 800b9f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9f6:	bf00      	nop
 800b9f8:	0800d864 	.word	0x0800d864
 800b9fc:	0800d789 	.word	0x0800d789
 800ba00:	0800d809 	.word	0x0800d809

0800ba04 <__lshift>:
 800ba04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba08:	460c      	mov	r4, r1
 800ba0a:	6849      	ldr	r1, [r1, #4]
 800ba0c:	6923      	ldr	r3, [r4, #16]
 800ba0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba12:	68a3      	ldr	r3, [r4, #8]
 800ba14:	4607      	mov	r7, r0
 800ba16:	4691      	mov	r9, r2
 800ba18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba1c:	f108 0601 	add.w	r6, r8, #1
 800ba20:	42b3      	cmp	r3, r6
 800ba22:	db0b      	blt.n	800ba3c <__lshift+0x38>
 800ba24:	4638      	mov	r0, r7
 800ba26:	f7ff fddf 	bl	800b5e8 <_Balloc>
 800ba2a:	4605      	mov	r5, r0
 800ba2c:	b948      	cbnz	r0, 800ba42 <__lshift+0x3e>
 800ba2e:	4602      	mov	r2, r0
 800ba30:	4b28      	ldr	r3, [pc, #160]	@ (800bad4 <__lshift+0xd0>)
 800ba32:	4829      	ldr	r0, [pc, #164]	@ (800bad8 <__lshift+0xd4>)
 800ba34:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ba38:	f000 fb86 	bl	800c148 <__assert_func>
 800ba3c:	3101      	adds	r1, #1
 800ba3e:	005b      	lsls	r3, r3, #1
 800ba40:	e7ee      	b.n	800ba20 <__lshift+0x1c>
 800ba42:	2300      	movs	r3, #0
 800ba44:	f100 0114 	add.w	r1, r0, #20
 800ba48:	f100 0210 	add.w	r2, r0, #16
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	4553      	cmp	r3, sl
 800ba50:	db33      	blt.n	800baba <__lshift+0xb6>
 800ba52:	6920      	ldr	r0, [r4, #16]
 800ba54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba58:	f104 0314 	add.w	r3, r4, #20
 800ba5c:	f019 091f 	ands.w	r9, r9, #31
 800ba60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ba68:	d02b      	beq.n	800bac2 <__lshift+0xbe>
 800ba6a:	f1c9 0e20 	rsb	lr, r9, #32
 800ba6e:	468a      	mov	sl, r1
 800ba70:	2200      	movs	r2, #0
 800ba72:	6818      	ldr	r0, [r3, #0]
 800ba74:	fa00 f009 	lsl.w	r0, r0, r9
 800ba78:	4310      	orrs	r0, r2
 800ba7a:	f84a 0b04 	str.w	r0, [sl], #4
 800ba7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba82:	459c      	cmp	ip, r3
 800ba84:	fa22 f20e 	lsr.w	r2, r2, lr
 800ba88:	d8f3      	bhi.n	800ba72 <__lshift+0x6e>
 800ba8a:	ebac 0304 	sub.w	r3, ip, r4
 800ba8e:	3b15      	subs	r3, #21
 800ba90:	f023 0303 	bic.w	r3, r3, #3
 800ba94:	3304      	adds	r3, #4
 800ba96:	f104 0015 	add.w	r0, r4, #21
 800ba9a:	4584      	cmp	ip, r0
 800ba9c:	bf38      	it	cc
 800ba9e:	2304      	movcc	r3, #4
 800baa0:	50ca      	str	r2, [r1, r3]
 800baa2:	b10a      	cbz	r2, 800baa8 <__lshift+0xa4>
 800baa4:	f108 0602 	add.w	r6, r8, #2
 800baa8:	3e01      	subs	r6, #1
 800baaa:	4638      	mov	r0, r7
 800baac:	612e      	str	r6, [r5, #16]
 800baae:	4621      	mov	r1, r4
 800bab0:	f7ff fdda 	bl	800b668 <_Bfree>
 800bab4:	4628      	mov	r0, r5
 800bab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baba:	f842 0f04 	str.w	r0, [r2, #4]!
 800babe:	3301      	adds	r3, #1
 800bac0:	e7c5      	b.n	800ba4e <__lshift+0x4a>
 800bac2:	3904      	subs	r1, #4
 800bac4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bac8:	f841 2f04 	str.w	r2, [r1, #4]!
 800bacc:	459c      	cmp	ip, r3
 800bace:	d8f9      	bhi.n	800bac4 <__lshift+0xc0>
 800bad0:	e7ea      	b.n	800baa8 <__lshift+0xa4>
 800bad2:	bf00      	nop
 800bad4:	0800d7f8 	.word	0x0800d7f8
 800bad8:	0800d809 	.word	0x0800d809

0800badc <__mcmp>:
 800badc:	690a      	ldr	r2, [r1, #16]
 800bade:	4603      	mov	r3, r0
 800bae0:	6900      	ldr	r0, [r0, #16]
 800bae2:	1a80      	subs	r0, r0, r2
 800bae4:	b530      	push	{r4, r5, lr}
 800bae6:	d10e      	bne.n	800bb06 <__mcmp+0x2a>
 800bae8:	3314      	adds	r3, #20
 800baea:	3114      	adds	r1, #20
 800baec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800baf0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800baf4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800baf8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bafc:	4295      	cmp	r5, r2
 800bafe:	d003      	beq.n	800bb08 <__mcmp+0x2c>
 800bb00:	d205      	bcs.n	800bb0e <__mcmp+0x32>
 800bb02:	f04f 30ff 	mov.w	r0, #4294967295
 800bb06:	bd30      	pop	{r4, r5, pc}
 800bb08:	42a3      	cmp	r3, r4
 800bb0a:	d3f3      	bcc.n	800baf4 <__mcmp+0x18>
 800bb0c:	e7fb      	b.n	800bb06 <__mcmp+0x2a>
 800bb0e:	2001      	movs	r0, #1
 800bb10:	e7f9      	b.n	800bb06 <__mcmp+0x2a>
	...

0800bb14 <__mdiff>:
 800bb14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb18:	4689      	mov	r9, r1
 800bb1a:	4606      	mov	r6, r0
 800bb1c:	4611      	mov	r1, r2
 800bb1e:	4648      	mov	r0, r9
 800bb20:	4614      	mov	r4, r2
 800bb22:	f7ff ffdb 	bl	800badc <__mcmp>
 800bb26:	1e05      	subs	r5, r0, #0
 800bb28:	d112      	bne.n	800bb50 <__mdiff+0x3c>
 800bb2a:	4629      	mov	r1, r5
 800bb2c:	4630      	mov	r0, r6
 800bb2e:	f7ff fd5b 	bl	800b5e8 <_Balloc>
 800bb32:	4602      	mov	r2, r0
 800bb34:	b928      	cbnz	r0, 800bb42 <__mdiff+0x2e>
 800bb36:	4b3f      	ldr	r3, [pc, #252]	@ (800bc34 <__mdiff+0x120>)
 800bb38:	f240 2137 	movw	r1, #567	@ 0x237
 800bb3c:	483e      	ldr	r0, [pc, #248]	@ (800bc38 <__mdiff+0x124>)
 800bb3e:	f000 fb03 	bl	800c148 <__assert_func>
 800bb42:	2301      	movs	r3, #1
 800bb44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb48:	4610      	mov	r0, r2
 800bb4a:	b003      	add	sp, #12
 800bb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb50:	bfbc      	itt	lt
 800bb52:	464b      	movlt	r3, r9
 800bb54:	46a1      	movlt	r9, r4
 800bb56:	4630      	mov	r0, r6
 800bb58:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bb5c:	bfba      	itte	lt
 800bb5e:	461c      	movlt	r4, r3
 800bb60:	2501      	movlt	r5, #1
 800bb62:	2500      	movge	r5, #0
 800bb64:	f7ff fd40 	bl	800b5e8 <_Balloc>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	b918      	cbnz	r0, 800bb74 <__mdiff+0x60>
 800bb6c:	4b31      	ldr	r3, [pc, #196]	@ (800bc34 <__mdiff+0x120>)
 800bb6e:	f240 2145 	movw	r1, #581	@ 0x245
 800bb72:	e7e3      	b.n	800bb3c <__mdiff+0x28>
 800bb74:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bb78:	6926      	ldr	r6, [r4, #16]
 800bb7a:	60c5      	str	r5, [r0, #12]
 800bb7c:	f109 0310 	add.w	r3, r9, #16
 800bb80:	f109 0514 	add.w	r5, r9, #20
 800bb84:	f104 0e14 	add.w	lr, r4, #20
 800bb88:	f100 0b14 	add.w	fp, r0, #20
 800bb8c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bb90:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bb94:	9301      	str	r3, [sp, #4]
 800bb96:	46d9      	mov	r9, fp
 800bb98:	f04f 0c00 	mov.w	ip, #0
 800bb9c:	9b01      	ldr	r3, [sp, #4]
 800bb9e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bba2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bba6:	9301      	str	r3, [sp, #4]
 800bba8:	fa1f f38a 	uxth.w	r3, sl
 800bbac:	4619      	mov	r1, r3
 800bbae:	b283      	uxth	r3, r0
 800bbb0:	1acb      	subs	r3, r1, r3
 800bbb2:	0c00      	lsrs	r0, r0, #16
 800bbb4:	4463      	add	r3, ip
 800bbb6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bbba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bbc4:	4576      	cmp	r6, lr
 800bbc6:	f849 3b04 	str.w	r3, [r9], #4
 800bbca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bbce:	d8e5      	bhi.n	800bb9c <__mdiff+0x88>
 800bbd0:	1b33      	subs	r3, r6, r4
 800bbd2:	3b15      	subs	r3, #21
 800bbd4:	f023 0303 	bic.w	r3, r3, #3
 800bbd8:	3415      	adds	r4, #21
 800bbda:	3304      	adds	r3, #4
 800bbdc:	42a6      	cmp	r6, r4
 800bbde:	bf38      	it	cc
 800bbe0:	2304      	movcc	r3, #4
 800bbe2:	441d      	add	r5, r3
 800bbe4:	445b      	add	r3, fp
 800bbe6:	461e      	mov	r6, r3
 800bbe8:	462c      	mov	r4, r5
 800bbea:	4544      	cmp	r4, r8
 800bbec:	d30e      	bcc.n	800bc0c <__mdiff+0xf8>
 800bbee:	f108 0103 	add.w	r1, r8, #3
 800bbf2:	1b49      	subs	r1, r1, r5
 800bbf4:	f021 0103 	bic.w	r1, r1, #3
 800bbf8:	3d03      	subs	r5, #3
 800bbfa:	45a8      	cmp	r8, r5
 800bbfc:	bf38      	it	cc
 800bbfe:	2100      	movcc	r1, #0
 800bc00:	440b      	add	r3, r1
 800bc02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bc06:	b191      	cbz	r1, 800bc2e <__mdiff+0x11a>
 800bc08:	6117      	str	r7, [r2, #16]
 800bc0a:	e79d      	b.n	800bb48 <__mdiff+0x34>
 800bc0c:	f854 1b04 	ldr.w	r1, [r4], #4
 800bc10:	46e6      	mov	lr, ip
 800bc12:	0c08      	lsrs	r0, r1, #16
 800bc14:	fa1c fc81 	uxtah	ip, ip, r1
 800bc18:	4471      	add	r1, lr
 800bc1a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bc1e:	b289      	uxth	r1, r1
 800bc20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bc24:	f846 1b04 	str.w	r1, [r6], #4
 800bc28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bc2c:	e7dd      	b.n	800bbea <__mdiff+0xd6>
 800bc2e:	3f01      	subs	r7, #1
 800bc30:	e7e7      	b.n	800bc02 <__mdiff+0xee>
 800bc32:	bf00      	nop
 800bc34:	0800d7f8 	.word	0x0800d7f8
 800bc38:	0800d809 	.word	0x0800d809

0800bc3c <__d2b>:
 800bc3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc40:	460f      	mov	r7, r1
 800bc42:	2101      	movs	r1, #1
 800bc44:	ec59 8b10 	vmov	r8, r9, d0
 800bc48:	4616      	mov	r6, r2
 800bc4a:	f7ff fccd 	bl	800b5e8 <_Balloc>
 800bc4e:	4604      	mov	r4, r0
 800bc50:	b930      	cbnz	r0, 800bc60 <__d2b+0x24>
 800bc52:	4602      	mov	r2, r0
 800bc54:	4b23      	ldr	r3, [pc, #140]	@ (800bce4 <__d2b+0xa8>)
 800bc56:	4824      	ldr	r0, [pc, #144]	@ (800bce8 <__d2b+0xac>)
 800bc58:	f240 310f 	movw	r1, #783	@ 0x30f
 800bc5c:	f000 fa74 	bl	800c148 <__assert_func>
 800bc60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bc64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bc68:	b10d      	cbz	r5, 800bc6e <__d2b+0x32>
 800bc6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bc6e:	9301      	str	r3, [sp, #4]
 800bc70:	f1b8 0300 	subs.w	r3, r8, #0
 800bc74:	d023      	beq.n	800bcbe <__d2b+0x82>
 800bc76:	4668      	mov	r0, sp
 800bc78:	9300      	str	r3, [sp, #0]
 800bc7a:	f7ff fd7c 	bl	800b776 <__lo0bits>
 800bc7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bc82:	b1d0      	cbz	r0, 800bcba <__d2b+0x7e>
 800bc84:	f1c0 0320 	rsb	r3, r0, #32
 800bc88:	fa02 f303 	lsl.w	r3, r2, r3
 800bc8c:	430b      	orrs	r3, r1
 800bc8e:	40c2      	lsrs	r2, r0
 800bc90:	6163      	str	r3, [r4, #20]
 800bc92:	9201      	str	r2, [sp, #4]
 800bc94:	9b01      	ldr	r3, [sp, #4]
 800bc96:	61a3      	str	r3, [r4, #24]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	bf0c      	ite	eq
 800bc9c:	2201      	moveq	r2, #1
 800bc9e:	2202      	movne	r2, #2
 800bca0:	6122      	str	r2, [r4, #16]
 800bca2:	b1a5      	cbz	r5, 800bcce <__d2b+0x92>
 800bca4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bca8:	4405      	add	r5, r0
 800bcaa:	603d      	str	r5, [r7, #0]
 800bcac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bcb0:	6030      	str	r0, [r6, #0]
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	b003      	add	sp, #12
 800bcb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcba:	6161      	str	r1, [r4, #20]
 800bcbc:	e7ea      	b.n	800bc94 <__d2b+0x58>
 800bcbe:	a801      	add	r0, sp, #4
 800bcc0:	f7ff fd59 	bl	800b776 <__lo0bits>
 800bcc4:	9b01      	ldr	r3, [sp, #4]
 800bcc6:	6163      	str	r3, [r4, #20]
 800bcc8:	3020      	adds	r0, #32
 800bcca:	2201      	movs	r2, #1
 800bccc:	e7e8      	b.n	800bca0 <__d2b+0x64>
 800bcce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bcd2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bcd6:	6038      	str	r0, [r7, #0]
 800bcd8:	6918      	ldr	r0, [r3, #16]
 800bcda:	f7ff fd2d 	bl	800b738 <__hi0bits>
 800bcde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bce2:	e7e5      	b.n	800bcb0 <__d2b+0x74>
 800bce4:	0800d7f8 	.word	0x0800d7f8
 800bce8:	0800d809 	.word	0x0800d809

0800bcec <__ssputs_r>:
 800bcec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcf0:	688e      	ldr	r6, [r1, #8]
 800bcf2:	461f      	mov	r7, r3
 800bcf4:	42be      	cmp	r6, r7
 800bcf6:	680b      	ldr	r3, [r1, #0]
 800bcf8:	4682      	mov	sl, r0
 800bcfa:	460c      	mov	r4, r1
 800bcfc:	4690      	mov	r8, r2
 800bcfe:	d82d      	bhi.n	800bd5c <__ssputs_r+0x70>
 800bd00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bd04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bd08:	d026      	beq.n	800bd58 <__ssputs_r+0x6c>
 800bd0a:	6965      	ldr	r5, [r4, #20]
 800bd0c:	6909      	ldr	r1, [r1, #16]
 800bd0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd12:	eba3 0901 	sub.w	r9, r3, r1
 800bd16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd1a:	1c7b      	adds	r3, r7, #1
 800bd1c:	444b      	add	r3, r9
 800bd1e:	106d      	asrs	r5, r5, #1
 800bd20:	429d      	cmp	r5, r3
 800bd22:	bf38      	it	cc
 800bd24:	461d      	movcc	r5, r3
 800bd26:	0553      	lsls	r3, r2, #21
 800bd28:	d527      	bpl.n	800bd7a <__ssputs_r+0x8e>
 800bd2a:	4629      	mov	r1, r5
 800bd2c:	f7ff fbd0 	bl	800b4d0 <_malloc_r>
 800bd30:	4606      	mov	r6, r0
 800bd32:	b360      	cbz	r0, 800bd8e <__ssputs_r+0xa2>
 800bd34:	6921      	ldr	r1, [r4, #16]
 800bd36:	464a      	mov	r2, r9
 800bd38:	f7fe fcfb 	bl	800a732 <memcpy>
 800bd3c:	89a3      	ldrh	r3, [r4, #12]
 800bd3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bd42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd46:	81a3      	strh	r3, [r4, #12]
 800bd48:	6126      	str	r6, [r4, #16]
 800bd4a:	6165      	str	r5, [r4, #20]
 800bd4c:	444e      	add	r6, r9
 800bd4e:	eba5 0509 	sub.w	r5, r5, r9
 800bd52:	6026      	str	r6, [r4, #0]
 800bd54:	60a5      	str	r5, [r4, #8]
 800bd56:	463e      	mov	r6, r7
 800bd58:	42be      	cmp	r6, r7
 800bd5a:	d900      	bls.n	800bd5e <__ssputs_r+0x72>
 800bd5c:	463e      	mov	r6, r7
 800bd5e:	6820      	ldr	r0, [r4, #0]
 800bd60:	4632      	mov	r2, r6
 800bd62:	4641      	mov	r1, r8
 800bd64:	f000 f9c6 	bl	800c0f4 <memmove>
 800bd68:	68a3      	ldr	r3, [r4, #8]
 800bd6a:	1b9b      	subs	r3, r3, r6
 800bd6c:	60a3      	str	r3, [r4, #8]
 800bd6e:	6823      	ldr	r3, [r4, #0]
 800bd70:	4433      	add	r3, r6
 800bd72:	6023      	str	r3, [r4, #0]
 800bd74:	2000      	movs	r0, #0
 800bd76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd7a:	462a      	mov	r2, r5
 800bd7c:	f000 fa28 	bl	800c1d0 <_realloc_r>
 800bd80:	4606      	mov	r6, r0
 800bd82:	2800      	cmp	r0, #0
 800bd84:	d1e0      	bne.n	800bd48 <__ssputs_r+0x5c>
 800bd86:	6921      	ldr	r1, [r4, #16]
 800bd88:	4650      	mov	r0, sl
 800bd8a:	f7ff fb2d 	bl	800b3e8 <_free_r>
 800bd8e:	230c      	movs	r3, #12
 800bd90:	f8ca 3000 	str.w	r3, [sl]
 800bd94:	89a3      	ldrh	r3, [r4, #12]
 800bd96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd9a:	81a3      	strh	r3, [r4, #12]
 800bd9c:	f04f 30ff 	mov.w	r0, #4294967295
 800bda0:	e7e9      	b.n	800bd76 <__ssputs_r+0x8a>
	...

0800bda4 <_svfiprintf_r>:
 800bda4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bda8:	4698      	mov	r8, r3
 800bdaa:	898b      	ldrh	r3, [r1, #12]
 800bdac:	061b      	lsls	r3, r3, #24
 800bdae:	b09d      	sub	sp, #116	@ 0x74
 800bdb0:	4607      	mov	r7, r0
 800bdb2:	460d      	mov	r5, r1
 800bdb4:	4614      	mov	r4, r2
 800bdb6:	d510      	bpl.n	800bdda <_svfiprintf_r+0x36>
 800bdb8:	690b      	ldr	r3, [r1, #16]
 800bdba:	b973      	cbnz	r3, 800bdda <_svfiprintf_r+0x36>
 800bdbc:	2140      	movs	r1, #64	@ 0x40
 800bdbe:	f7ff fb87 	bl	800b4d0 <_malloc_r>
 800bdc2:	6028      	str	r0, [r5, #0]
 800bdc4:	6128      	str	r0, [r5, #16]
 800bdc6:	b930      	cbnz	r0, 800bdd6 <_svfiprintf_r+0x32>
 800bdc8:	230c      	movs	r3, #12
 800bdca:	603b      	str	r3, [r7, #0]
 800bdcc:	f04f 30ff 	mov.w	r0, #4294967295
 800bdd0:	b01d      	add	sp, #116	@ 0x74
 800bdd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdd6:	2340      	movs	r3, #64	@ 0x40
 800bdd8:	616b      	str	r3, [r5, #20]
 800bdda:	2300      	movs	r3, #0
 800bddc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdde:	2320      	movs	r3, #32
 800bde0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bde4:	f8cd 800c 	str.w	r8, [sp, #12]
 800bde8:	2330      	movs	r3, #48	@ 0x30
 800bdea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bf88 <_svfiprintf_r+0x1e4>
 800bdee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bdf2:	f04f 0901 	mov.w	r9, #1
 800bdf6:	4623      	mov	r3, r4
 800bdf8:	469a      	mov	sl, r3
 800bdfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdfe:	b10a      	cbz	r2, 800be04 <_svfiprintf_r+0x60>
 800be00:	2a25      	cmp	r2, #37	@ 0x25
 800be02:	d1f9      	bne.n	800bdf8 <_svfiprintf_r+0x54>
 800be04:	ebba 0b04 	subs.w	fp, sl, r4
 800be08:	d00b      	beq.n	800be22 <_svfiprintf_r+0x7e>
 800be0a:	465b      	mov	r3, fp
 800be0c:	4622      	mov	r2, r4
 800be0e:	4629      	mov	r1, r5
 800be10:	4638      	mov	r0, r7
 800be12:	f7ff ff6b 	bl	800bcec <__ssputs_r>
 800be16:	3001      	adds	r0, #1
 800be18:	f000 80a7 	beq.w	800bf6a <_svfiprintf_r+0x1c6>
 800be1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be1e:	445a      	add	r2, fp
 800be20:	9209      	str	r2, [sp, #36]	@ 0x24
 800be22:	f89a 3000 	ldrb.w	r3, [sl]
 800be26:	2b00      	cmp	r3, #0
 800be28:	f000 809f 	beq.w	800bf6a <_svfiprintf_r+0x1c6>
 800be2c:	2300      	movs	r3, #0
 800be2e:	f04f 32ff 	mov.w	r2, #4294967295
 800be32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be36:	f10a 0a01 	add.w	sl, sl, #1
 800be3a:	9304      	str	r3, [sp, #16]
 800be3c:	9307      	str	r3, [sp, #28]
 800be3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800be42:	931a      	str	r3, [sp, #104]	@ 0x68
 800be44:	4654      	mov	r4, sl
 800be46:	2205      	movs	r2, #5
 800be48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be4c:	484e      	ldr	r0, [pc, #312]	@ (800bf88 <_svfiprintf_r+0x1e4>)
 800be4e:	f7f4 f9bf 	bl	80001d0 <memchr>
 800be52:	9a04      	ldr	r2, [sp, #16]
 800be54:	b9d8      	cbnz	r0, 800be8e <_svfiprintf_r+0xea>
 800be56:	06d0      	lsls	r0, r2, #27
 800be58:	bf44      	itt	mi
 800be5a:	2320      	movmi	r3, #32
 800be5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be60:	0711      	lsls	r1, r2, #28
 800be62:	bf44      	itt	mi
 800be64:	232b      	movmi	r3, #43	@ 0x2b
 800be66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be6a:	f89a 3000 	ldrb.w	r3, [sl]
 800be6e:	2b2a      	cmp	r3, #42	@ 0x2a
 800be70:	d015      	beq.n	800be9e <_svfiprintf_r+0xfa>
 800be72:	9a07      	ldr	r2, [sp, #28]
 800be74:	4654      	mov	r4, sl
 800be76:	2000      	movs	r0, #0
 800be78:	f04f 0c0a 	mov.w	ip, #10
 800be7c:	4621      	mov	r1, r4
 800be7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be82:	3b30      	subs	r3, #48	@ 0x30
 800be84:	2b09      	cmp	r3, #9
 800be86:	d94b      	bls.n	800bf20 <_svfiprintf_r+0x17c>
 800be88:	b1b0      	cbz	r0, 800beb8 <_svfiprintf_r+0x114>
 800be8a:	9207      	str	r2, [sp, #28]
 800be8c:	e014      	b.n	800beb8 <_svfiprintf_r+0x114>
 800be8e:	eba0 0308 	sub.w	r3, r0, r8
 800be92:	fa09 f303 	lsl.w	r3, r9, r3
 800be96:	4313      	orrs	r3, r2
 800be98:	9304      	str	r3, [sp, #16]
 800be9a:	46a2      	mov	sl, r4
 800be9c:	e7d2      	b.n	800be44 <_svfiprintf_r+0xa0>
 800be9e:	9b03      	ldr	r3, [sp, #12]
 800bea0:	1d19      	adds	r1, r3, #4
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	9103      	str	r1, [sp, #12]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	bfbb      	ittet	lt
 800beaa:	425b      	neglt	r3, r3
 800beac:	f042 0202 	orrlt.w	r2, r2, #2
 800beb0:	9307      	strge	r3, [sp, #28]
 800beb2:	9307      	strlt	r3, [sp, #28]
 800beb4:	bfb8      	it	lt
 800beb6:	9204      	strlt	r2, [sp, #16]
 800beb8:	7823      	ldrb	r3, [r4, #0]
 800beba:	2b2e      	cmp	r3, #46	@ 0x2e
 800bebc:	d10a      	bne.n	800bed4 <_svfiprintf_r+0x130>
 800bebe:	7863      	ldrb	r3, [r4, #1]
 800bec0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bec2:	d132      	bne.n	800bf2a <_svfiprintf_r+0x186>
 800bec4:	9b03      	ldr	r3, [sp, #12]
 800bec6:	1d1a      	adds	r2, r3, #4
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	9203      	str	r2, [sp, #12]
 800becc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bed0:	3402      	adds	r4, #2
 800bed2:	9305      	str	r3, [sp, #20]
 800bed4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bf98 <_svfiprintf_r+0x1f4>
 800bed8:	7821      	ldrb	r1, [r4, #0]
 800beda:	2203      	movs	r2, #3
 800bedc:	4650      	mov	r0, sl
 800bede:	f7f4 f977 	bl	80001d0 <memchr>
 800bee2:	b138      	cbz	r0, 800bef4 <_svfiprintf_r+0x150>
 800bee4:	9b04      	ldr	r3, [sp, #16]
 800bee6:	eba0 000a 	sub.w	r0, r0, sl
 800beea:	2240      	movs	r2, #64	@ 0x40
 800beec:	4082      	lsls	r2, r0
 800beee:	4313      	orrs	r3, r2
 800bef0:	3401      	adds	r4, #1
 800bef2:	9304      	str	r3, [sp, #16]
 800bef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bef8:	4824      	ldr	r0, [pc, #144]	@ (800bf8c <_svfiprintf_r+0x1e8>)
 800befa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800befe:	2206      	movs	r2, #6
 800bf00:	f7f4 f966 	bl	80001d0 <memchr>
 800bf04:	2800      	cmp	r0, #0
 800bf06:	d036      	beq.n	800bf76 <_svfiprintf_r+0x1d2>
 800bf08:	4b21      	ldr	r3, [pc, #132]	@ (800bf90 <_svfiprintf_r+0x1ec>)
 800bf0a:	bb1b      	cbnz	r3, 800bf54 <_svfiprintf_r+0x1b0>
 800bf0c:	9b03      	ldr	r3, [sp, #12]
 800bf0e:	3307      	adds	r3, #7
 800bf10:	f023 0307 	bic.w	r3, r3, #7
 800bf14:	3308      	adds	r3, #8
 800bf16:	9303      	str	r3, [sp, #12]
 800bf18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf1a:	4433      	add	r3, r6
 800bf1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf1e:	e76a      	b.n	800bdf6 <_svfiprintf_r+0x52>
 800bf20:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf24:	460c      	mov	r4, r1
 800bf26:	2001      	movs	r0, #1
 800bf28:	e7a8      	b.n	800be7c <_svfiprintf_r+0xd8>
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	3401      	adds	r4, #1
 800bf2e:	9305      	str	r3, [sp, #20]
 800bf30:	4619      	mov	r1, r3
 800bf32:	f04f 0c0a 	mov.w	ip, #10
 800bf36:	4620      	mov	r0, r4
 800bf38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf3c:	3a30      	subs	r2, #48	@ 0x30
 800bf3e:	2a09      	cmp	r2, #9
 800bf40:	d903      	bls.n	800bf4a <_svfiprintf_r+0x1a6>
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d0c6      	beq.n	800bed4 <_svfiprintf_r+0x130>
 800bf46:	9105      	str	r1, [sp, #20]
 800bf48:	e7c4      	b.n	800bed4 <_svfiprintf_r+0x130>
 800bf4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf4e:	4604      	mov	r4, r0
 800bf50:	2301      	movs	r3, #1
 800bf52:	e7f0      	b.n	800bf36 <_svfiprintf_r+0x192>
 800bf54:	ab03      	add	r3, sp, #12
 800bf56:	9300      	str	r3, [sp, #0]
 800bf58:	462a      	mov	r2, r5
 800bf5a:	4b0e      	ldr	r3, [pc, #56]	@ (800bf94 <_svfiprintf_r+0x1f0>)
 800bf5c:	a904      	add	r1, sp, #16
 800bf5e:	4638      	mov	r0, r7
 800bf60:	f7fd fe72 	bl	8009c48 <_printf_float>
 800bf64:	1c42      	adds	r2, r0, #1
 800bf66:	4606      	mov	r6, r0
 800bf68:	d1d6      	bne.n	800bf18 <_svfiprintf_r+0x174>
 800bf6a:	89ab      	ldrh	r3, [r5, #12]
 800bf6c:	065b      	lsls	r3, r3, #25
 800bf6e:	f53f af2d 	bmi.w	800bdcc <_svfiprintf_r+0x28>
 800bf72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf74:	e72c      	b.n	800bdd0 <_svfiprintf_r+0x2c>
 800bf76:	ab03      	add	r3, sp, #12
 800bf78:	9300      	str	r3, [sp, #0]
 800bf7a:	462a      	mov	r2, r5
 800bf7c:	4b05      	ldr	r3, [pc, #20]	@ (800bf94 <_svfiprintf_r+0x1f0>)
 800bf7e:	a904      	add	r1, sp, #16
 800bf80:	4638      	mov	r0, r7
 800bf82:	f7fe f8f9 	bl	800a178 <_printf_i>
 800bf86:	e7ed      	b.n	800bf64 <_svfiprintf_r+0x1c0>
 800bf88:	0800d960 	.word	0x0800d960
 800bf8c:	0800d96a 	.word	0x0800d96a
 800bf90:	08009c49 	.word	0x08009c49
 800bf94:	0800bced 	.word	0x0800bced
 800bf98:	0800d966 	.word	0x0800d966

0800bf9c <__sflush_r>:
 800bf9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bfa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfa4:	0716      	lsls	r6, r2, #28
 800bfa6:	4605      	mov	r5, r0
 800bfa8:	460c      	mov	r4, r1
 800bfaa:	d454      	bmi.n	800c056 <__sflush_r+0xba>
 800bfac:	684b      	ldr	r3, [r1, #4]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	dc02      	bgt.n	800bfb8 <__sflush_r+0x1c>
 800bfb2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	dd48      	ble.n	800c04a <__sflush_r+0xae>
 800bfb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bfba:	2e00      	cmp	r6, #0
 800bfbc:	d045      	beq.n	800c04a <__sflush_r+0xae>
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bfc4:	682f      	ldr	r7, [r5, #0]
 800bfc6:	6a21      	ldr	r1, [r4, #32]
 800bfc8:	602b      	str	r3, [r5, #0]
 800bfca:	d030      	beq.n	800c02e <__sflush_r+0x92>
 800bfcc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bfce:	89a3      	ldrh	r3, [r4, #12]
 800bfd0:	0759      	lsls	r1, r3, #29
 800bfd2:	d505      	bpl.n	800bfe0 <__sflush_r+0x44>
 800bfd4:	6863      	ldr	r3, [r4, #4]
 800bfd6:	1ad2      	subs	r2, r2, r3
 800bfd8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bfda:	b10b      	cbz	r3, 800bfe0 <__sflush_r+0x44>
 800bfdc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bfde:	1ad2      	subs	r2, r2, r3
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bfe4:	6a21      	ldr	r1, [r4, #32]
 800bfe6:	4628      	mov	r0, r5
 800bfe8:	47b0      	blx	r6
 800bfea:	1c43      	adds	r3, r0, #1
 800bfec:	89a3      	ldrh	r3, [r4, #12]
 800bfee:	d106      	bne.n	800bffe <__sflush_r+0x62>
 800bff0:	6829      	ldr	r1, [r5, #0]
 800bff2:	291d      	cmp	r1, #29
 800bff4:	d82b      	bhi.n	800c04e <__sflush_r+0xb2>
 800bff6:	4a2a      	ldr	r2, [pc, #168]	@ (800c0a0 <__sflush_r+0x104>)
 800bff8:	410a      	asrs	r2, r1
 800bffa:	07d6      	lsls	r6, r2, #31
 800bffc:	d427      	bmi.n	800c04e <__sflush_r+0xb2>
 800bffe:	2200      	movs	r2, #0
 800c000:	6062      	str	r2, [r4, #4]
 800c002:	04d9      	lsls	r1, r3, #19
 800c004:	6922      	ldr	r2, [r4, #16]
 800c006:	6022      	str	r2, [r4, #0]
 800c008:	d504      	bpl.n	800c014 <__sflush_r+0x78>
 800c00a:	1c42      	adds	r2, r0, #1
 800c00c:	d101      	bne.n	800c012 <__sflush_r+0x76>
 800c00e:	682b      	ldr	r3, [r5, #0]
 800c010:	b903      	cbnz	r3, 800c014 <__sflush_r+0x78>
 800c012:	6560      	str	r0, [r4, #84]	@ 0x54
 800c014:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c016:	602f      	str	r7, [r5, #0]
 800c018:	b1b9      	cbz	r1, 800c04a <__sflush_r+0xae>
 800c01a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c01e:	4299      	cmp	r1, r3
 800c020:	d002      	beq.n	800c028 <__sflush_r+0x8c>
 800c022:	4628      	mov	r0, r5
 800c024:	f7ff f9e0 	bl	800b3e8 <_free_r>
 800c028:	2300      	movs	r3, #0
 800c02a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c02c:	e00d      	b.n	800c04a <__sflush_r+0xae>
 800c02e:	2301      	movs	r3, #1
 800c030:	4628      	mov	r0, r5
 800c032:	47b0      	blx	r6
 800c034:	4602      	mov	r2, r0
 800c036:	1c50      	adds	r0, r2, #1
 800c038:	d1c9      	bne.n	800bfce <__sflush_r+0x32>
 800c03a:	682b      	ldr	r3, [r5, #0]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d0c6      	beq.n	800bfce <__sflush_r+0x32>
 800c040:	2b1d      	cmp	r3, #29
 800c042:	d001      	beq.n	800c048 <__sflush_r+0xac>
 800c044:	2b16      	cmp	r3, #22
 800c046:	d11e      	bne.n	800c086 <__sflush_r+0xea>
 800c048:	602f      	str	r7, [r5, #0]
 800c04a:	2000      	movs	r0, #0
 800c04c:	e022      	b.n	800c094 <__sflush_r+0xf8>
 800c04e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c052:	b21b      	sxth	r3, r3
 800c054:	e01b      	b.n	800c08e <__sflush_r+0xf2>
 800c056:	690f      	ldr	r7, [r1, #16]
 800c058:	2f00      	cmp	r7, #0
 800c05a:	d0f6      	beq.n	800c04a <__sflush_r+0xae>
 800c05c:	0793      	lsls	r3, r2, #30
 800c05e:	680e      	ldr	r6, [r1, #0]
 800c060:	bf08      	it	eq
 800c062:	694b      	ldreq	r3, [r1, #20]
 800c064:	600f      	str	r7, [r1, #0]
 800c066:	bf18      	it	ne
 800c068:	2300      	movne	r3, #0
 800c06a:	eba6 0807 	sub.w	r8, r6, r7
 800c06e:	608b      	str	r3, [r1, #8]
 800c070:	f1b8 0f00 	cmp.w	r8, #0
 800c074:	dde9      	ble.n	800c04a <__sflush_r+0xae>
 800c076:	6a21      	ldr	r1, [r4, #32]
 800c078:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c07a:	4643      	mov	r3, r8
 800c07c:	463a      	mov	r2, r7
 800c07e:	4628      	mov	r0, r5
 800c080:	47b0      	blx	r6
 800c082:	2800      	cmp	r0, #0
 800c084:	dc08      	bgt.n	800c098 <__sflush_r+0xfc>
 800c086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c08a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c08e:	81a3      	strh	r3, [r4, #12]
 800c090:	f04f 30ff 	mov.w	r0, #4294967295
 800c094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c098:	4407      	add	r7, r0
 800c09a:	eba8 0800 	sub.w	r8, r8, r0
 800c09e:	e7e7      	b.n	800c070 <__sflush_r+0xd4>
 800c0a0:	dfbffffe 	.word	0xdfbffffe

0800c0a4 <_fflush_r>:
 800c0a4:	b538      	push	{r3, r4, r5, lr}
 800c0a6:	690b      	ldr	r3, [r1, #16]
 800c0a8:	4605      	mov	r5, r0
 800c0aa:	460c      	mov	r4, r1
 800c0ac:	b913      	cbnz	r3, 800c0b4 <_fflush_r+0x10>
 800c0ae:	2500      	movs	r5, #0
 800c0b0:	4628      	mov	r0, r5
 800c0b2:	bd38      	pop	{r3, r4, r5, pc}
 800c0b4:	b118      	cbz	r0, 800c0be <_fflush_r+0x1a>
 800c0b6:	6a03      	ldr	r3, [r0, #32]
 800c0b8:	b90b      	cbnz	r3, 800c0be <_fflush_r+0x1a>
 800c0ba:	f7fe fa09 	bl	800a4d0 <__sinit>
 800c0be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d0f3      	beq.n	800c0ae <_fflush_r+0xa>
 800c0c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c0c8:	07d0      	lsls	r0, r2, #31
 800c0ca:	d404      	bmi.n	800c0d6 <_fflush_r+0x32>
 800c0cc:	0599      	lsls	r1, r3, #22
 800c0ce:	d402      	bmi.n	800c0d6 <_fflush_r+0x32>
 800c0d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c0d2:	f7fe fb2c 	bl	800a72e <__retarget_lock_acquire_recursive>
 800c0d6:	4628      	mov	r0, r5
 800c0d8:	4621      	mov	r1, r4
 800c0da:	f7ff ff5f 	bl	800bf9c <__sflush_r>
 800c0de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c0e0:	07da      	lsls	r2, r3, #31
 800c0e2:	4605      	mov	r5, r0
 800c0e4:	d4e4      	bmi.n	800c0b0 <_fflush_r+0xc>
 800c0e6:	89a3      	ldrh	r3, [r4, #12]
 800c0e8:	059b      	lsls	r3, r3, #22
 800c0ea:	d4e1      	bmi.n	800c0b0 <_fflush_r+0xc>
 800c0ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c0ee:	f7fe fb1f 	bl	800a730 <__retarget_lock_release_recursive>
 800c0f2:	e7dd      	b.n	800c0b0 <_fflush_r+0xc>

0800c0f4 <memmove>:
 800c0f4:	4288      	cmp	r0, r1
 800c0f6:	b510      	push	{r4, lr}
 800c0f8:	eb01 0402 	add.w	r4, r1, r2
 800c0fc:	d902      	bls.n	800c104 <memmove+0x10>
 800c0fe:	4284      	cmp	r4, r0
 800c100:	4623      	mov	r3, r4
 800c102:	d807      	bhi.n	800c114 <memmove+0x20>
 800c104:	1e43      	subs	r3, r0, #1
 800c106:	42a1      	cmp	r1, r4
 800c108:	d008      	beq.n	800c11c <memmove+0x28>
 800c10a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c10e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c112:	e7f8      	b.n	800c106 <memmove+0x12>
 800c114:	4402      	add	r2, r0
 800c116:	4601      	mov	r1, r0
 800c118:	428a      	cmp	r2, r1
 800c11a:	d100      	bne.n	800c11e <memmove+0x2a>
 800c11c:	bd10      	pop	{r4, pc}
 800c11e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c122:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c126:	e7f7      	b.n	800c118 <memmove+0x24>

0800c128 <_sbrk_r>:
 800c128:	b538      	push	{r3, r4, r5, lr}
 800c12a:	4d06      	ldr	r5, [pc, #24]	@ (800c144 <_sbrk_r+0x1c>)
 800c12c:	2300      	movs	r3, #0
 800c12e:	4604      	mov	r4, r0
 800c130:	4608      	mov	r0, r1
 800c132:	602b      	str	r3, [r5, #0]
 800c134:	f7f6 fe54 	bl	8002de0 <_sbrk>
 800c138:	1c43      	adds	r3, r0, #1
 800c13a:	d102      	bne.n	800c142 <_sbrk_r+0x1a>
 800c13c:	682b      	ldr	r3, [r5, #0]
 800c13e:	b103      	cbz	r3, 800c142 <_sbrk_r+0x1a>
 800c140:	6023      	str	r3, [r4, #0]
 800c142:	bd38      	pop	{r3, r4, r5, pc}
 800c144:	2000bf8c 	.word	0x2000bf8c

0800c148 <__assert_func>:
 800c148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c14a:	4614      	mov	r4, r2
 800c14c:	461a      	mov	r2, r3
 800c14e:	4b09      	ldr	r3, [pc, #36]	@ (800c174 <__assert_func+0x2c>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4605      	mov	r5, r0
 800c154:	68d8      	ldr	r0, [r3, #12]
 800c156:	b954      	cbnz	r4, 800c16e <__assert_func+0x26>
 800c158:	4b07      	ldr	r3, [pc, #28]	@ (800c178 <__assert_func+0x30>)
 800c15a:	461c      	mov	r4, r3
 800c15c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c160:	9100      	str	r1, [sp, #0]
 800c162:	462b      	mov	r3, r5
 800c164:	4905      	ldr	r1, [pc, #20]	@ (800c17c <__assert_func+0x34>)
 800c166:	f000 f86f 	bl	800c248 <fiprintf>
 800c16a:	f000 f87f 	bl	800c26c <abort>
 800c16e:	4b04      	ldr	r3, [pc, #16]	@ (800c180 <__assert_func+0x38>)
 800c170:	e7f4      	b.n	800c15c <__assert_func+0x14>
 800c172:	bf00      	nop
 800c174:	20000030 	.word	0x20000030
 800c178:	0800d9b6 	.word	0x0800d9b6
 800c17c:	0800d988 	.word	0x0800d988
 800c180:	0800d97b 	.word	0x0800d97b

0800c184 <_calloc_r>:
 800c184:	b570      	push	{r4, r5, r6, lr}
 800c186:	fba1 5402 	umull	r5, r4, r1, r2
 800c18a:	b93c      	cbnz	r4, 800c19c <_calloc_r+0x18>
 800c18c:	4629      	mov	r1, r5
 800c18e:	f7ff f99f 	bl	800b4d0 <_malloc_r>
 800c192:	4606      	mov	r6, r0
 800c194:	b928      	cbnz	r0, 800c1a2 <_calloc_r+0x1e>
 800c196:	2600      	movs	r6, #0
 800c198:	4630      	mov	r0, r6
 800c19a:	bd70      	pop	{r4, r5, r6, pc}
 800c19c:	220c      	movs	r2, #12
 800c19e:	6002      	str	r2, [r0, #0]
 800c1a0:	e7f9      	b.n	800c196 <_calloc_r+0x12>
 800c1a2:	462a      	mov	r2, r5
 800c1a4:	4621      	mov	r1, r4
 800c1a6:	f7fe fa45 	bl	800a634 <memset>
 800c1aa:	e7f5      	b.n	800c198 <_calloc_r+0x14>

0800c1ac <__ascii_mbtowc>:
 800c1ac:	b082      	sub	sp, #8
 800c1ae:	b901      	cbnz	r1, 800c1b2 <__ascii_mbtowc+0x6>
 800c1b0:	a901      	add	r1, sp, #4
 800c1b2:	b142      	cbz	r2, 800c1c6 <__ascii_mbtowc+0x1a>
 800c1b4:	b14b      	cbz	r3, 800c1ca <__ascii_mbtowc+0x1e>
 800c1b6:	7813      	ldrb	r3, [r2, #0]
 800c1b8:	600b      	str	r3, [r1, #0]
 800c1ba:	7812      	ldrb	r2, [r2, #0]
 800c1bc:	1e10      	subs	r0, r2, #0
 800c1be:	bf18      	it	ne
 800c1c0:	2001      	movne	r0, #1
 800c1c2:	b002      	add	sp, #8
 800c1c4:	4770      	bx	lr
 800c1c6:	4610      	mov	r0, r2
 800c1c8:	e7fb      	b.n	800c1c2 <__ascii_mbtowc+0x16>
 800c1ca:	f06f 0001 	mvn.w	r0, #1
 800c1ce:	e7f8      	b.n	800c1c2 <__ascii_mbtowc+0x16>

0800c1d0 <_realloc_r>:
 800c1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1d4:	4680      	mov	r8, r0
 800c1d6:	4615      	mov	r5, r2
 800c1d8:	460c      	mov	r4, r1
 800c1da:	b921      	cbnz	r1, 800c1e6 <_realloc_r+0x16>
 800c1dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1e0:	4611      	mov	r1, r2
 800c1e2:	f7ff b975 	b.w	800b4d0 <_malloc_r>
 800c1e6:	b92a      	cbnz	r2, 800c1f4 <_realloc_r+0x24>
 800c1e8:	f7ff f8fe 	bl	800b3e8 <_free_r>
 800c1ec:	2400      	movs	r4, #0
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1f4:	f000 f841 	bl	800c27a <_malloc_usable_size_r>
 800c1f8:	4285      	cmp	r5, r0
 800c1fa:	4606      	mov	r6, r0
 800c1fc:	d802      	bhi.n	800c204 <_realloc_r+0x34>
 800c1fe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c202:	d8f4      	bhi.n	800c1ee <_realloc_r+0x1e>
 800c204:	4629      	mov	r1, r5
 800c206:	4640      	mov	r0, r8
 800c208:	f7ff f962 	bl	800b4d0 <_malloc_r>
 800c20c:	4607      	mov	r7, r0
 800c20e:	2800      	cmp	r0, #0
 800c210:	d0ec      	beq.n	800c1ec <_realloc_r+0x1c>
 800c212:	42b5      	cmp	r5, r6
 800c214:	462a      	mov	r2, r5
 800c216:	4621      	mov	r1, r4
 800c218:	bf28      	it	cs
 800c21a:	4632      	movcs	r2, r6
 800c21c:	f7fe fa89 	bl	800a732 <memcpy>
 800c220:	4621      	mov	r1, r4
 800c222:	4640      	mov	r0, r8
 800c224:	f7ff f8e0 	bl	800b3e8 <_free_r>
 800c228:	463c      	mov	r4, r7
 800c22a:	e7e0      	b.n	800c1ee <_realloc_r+0x1e>

0800c22c <__ascii_wctomb>:
 800c22c:	4603      	mov	r3, r0
 800c22e:	4608      	mov	r0, r1
 800c230:	b141      	cbz	r1, 800c244 <__ascii_wctomb+0x18>
 800c232:	2aff      	cmp	r2, #255	@ 0xff
 800c234:	d904      	bls.n	800c240 <__ascii_wctomb+0x14>
 800c236:	228a      	movs	r2, #138	@ 0x8a
 800c238:	601a      	str	r2, [r3, #0]
 800c23a:	f04f 30ff 	mov.w	r0, #4294967295
 800c23e:	4770      	bx	lr
 800c240:	700a      	strb	r2, [r1, #0]
 800c242:	2001      	movs	r0, #1
 800c244:	4770      	bx	lr
	...

0800c248 <fiprintf>:
 800c248:	b40e      	push	{r1, r2, r3}
 800c24a:	b503      	push	{r0, r1, lr}
 800c24c:	4601      	mov	r1, r0
 800c24e:	ab03      	add	r3, sp, #12
 800c250:	4805      	ldr	r0, [pc, #20]	@ (800c268 <fiprintf+0x20>)
 800c252:	f853 2b04 	ldr.w	r2, [r3], #4
 800c256:	6800      	ldr	r0, [r0, #0]
 800c258:	9301      	str	r3, [sp, #4]
 800c25a:	f000 f83f 	bl	800c2dc <_vfiprintf_r>
 800c25e:	b002      	add	sp, #8
 800c260:	f85d eb04 	ldr.w	lr, [sp], #4
 800c264:	b003      	add	sp, #12
 800c266:	4770      	bx	lr
 800c268:	20000030 	.word	0x20000030

0800c26c <abort>:
 800c26c:	b508      	push	{r3, lr}
 800c26e:	2006      	movs	r0, #6
 800c270:	f000 fa08 	bl	800c684 <raise>
 800c274:	2001      	movs	r0, #1
 800c276:	f7f6 fd3b 	bl	8002cf0 <_exit>

0800c27a <_malloc_usable_size_r>:
 800c27a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c27e:	1f18      	subs	r0, r3, #4
 800c280:	2b00      	cmp	r3, #0
 800c282:	bfbc      	itt	lt
 800c284:	580b      	ldrlt	r3, [r1, r0]
 800c286:	18c0      	addlt	r0, r0, r3
 800c288:	4770      	bx	lr

0800c28a <__sfputc_r>:
 800c28a:	6893      	ldr	r3, [r2, #8]
 800c28c:	3b01      	subs	r3, #1
 800c28e:	2b00      	cmp	r3, #0
 800c290:	b410      	push	{r4}
 800c292:	6093      	str	r3, [r2, #8]
 800c294:	da08      	bge.n	800c2a8 <__sfputc_r+0x1e>
 800c296:	6994      	ldr	r4, [r2, #24]
 800c298:	42a3      	cmp	r3, r4
 800c29a:	db01      	blt.n	800c2a0 <__sfputc_r+0x16>
 800c29c:	290a      	cmp	r1, #10
 800c29e:	d103      	bne.n	800c2a8 <__sfputc_r+0x1e>
 800c2a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2a4:	f000 b932 	b.w	800c50c <__swbuf_r>
 800c2a8:	6813      	ldr	r3, [r2, #0]
 800c2aa:	1c58      	adds	r0, r3, #1
 800c2ac:	6010      	str	r0, [r2, #0]
 800c2ae:	7019      	strb	r1, [r3, #0]
 800c2b0:	4608      	mov	r0, r1
 800c2b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2b6:	4770      	bx	lr

0800c2b8 <__sfputs_r>:
 800c2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ba:	4606      	mov	r6, r0
 800c2bc:	460f      	mov	r7, r1
 800c2be:	4614      	mov	r4, r2
 800c2c0:	18d5      	adds	r5, r2, r3
 800c2c2:	42ac      	cmp	r4, r5
 800c2c4:	d101      	bne.n	800c2ca <__sfputs_r+0x12>
 800c2c6:	2000      	movs	r0, #0
 800c2c8:	e007      	b.n	800c2da <__sfputs_r+0x22>
 800c2ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2ce:	463a      	mov	r2, r7
 800c2d0:	4630      	mov	r0, r6
 800c2d2:	f7ff ffda 	bl	800c28a <__sfputc_r>
 800c2d6:	1c43      	adds	r3, r0, #1
 800c2d8:	d1f3      	bne.n	800c2c2 <__sfputs_r+0xa>
 800c2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c2dc <_vfiprintf_r>:
 800c2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2e0:	460d      	mov	r5, r1
 800c2e2:	b09d      	sub	sp, #116	@ 0x74
 800c2e4:	4614      	mov	r4, r2
 800c2e6:	4698      	mov	r8, r3
 800c2e8:	4606      	mov	r6, r0
 800c2ea:	b118      	cbz	r0, 800c2f4 <_vfiprintf_r+0x18>
 800c2ec:	6a03      	ldr	r3, [r0, #32]
 800c2ee:	b90b      	cbnz	r3, 800c2f4 <_vfiprintf_r+0x18>
 800c2f0:	f7fe f8ee 	bl	800a4d0 <__sinit>
 800c2f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c2f6:	07d9      	lsls	r1, r3, #31
 800c2f8:	d405      	bmi.n	800c306 <_vfiprintf_r+0x2a>
 800c2fa:	89ab      	ldrh	r3, [r5, #12]
 800c2fc:	059a      	lsls	r2, r3, #22
 800c2fe:	d402      	bmi.n	800c306 <_vfiprintf_r+0x2a>
 800c300:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c302:	f7fe fa14 	bl	800a72e <__retarget_lock_acquire_recursive>
 800c306:	89ab      	ldrh	r3, [r5, #12]
 800c308:	071b      	lsls	r3, r3, #28
 800c30a:	d501      	bpl.n	800c310 <_vfiprintf_r+0x34>
 800c30c:	692b      	ldr	r3, [r5, #16]
 800c30e:	b99b      	cbnz	r3, 800c338 <_vfiprintf_r+0x5c>
 800c310:	4629      	mov	r1, r5
 800c312:	4630      	mov	r0, r6
 800c314:	f000 f938 	bl	800c588 <__swsetup_r>
 800c318:	b170      	cbz	r0, 800c338 <_vfiprintf_r+0x5c>
 800c31a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c31c:	07dc      	lsls	r4, r3, #31
 800c31e:	d504      	bpl.n	800c32a <_vfiprintf_r+0x4e>
 800c320:	f04f 30ff 	mov.w	r0, #4294967295
 800c324:	b01d      	add	sp, #116	@ 0x74
 800c326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c32a:	89ab      	ldrh	r3, [r5, #12]
 800c32c:	0598      	lsls	r0, r3, #22
 800c32e:	d4f7      	bmi.n	800c320 <_vfiprintf_r+0x44>
 800c330:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c332:	f7fe f9fd 	bl	800a730 <__retarget_lock_release_recursive>
 800c336:	e7f3      	b.n	800c320 <_vfiprintf_r+0x44>
 800c338:	2300      	movs	r3, #0
 800c33a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c33c:	2320      	movs	r3, #32
 800c33e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c342:	f8cd 800c 	str.w	r8, [sp, #12]
 800c346:	2330      	movs	r3, #48	@ 0x30
 800c348:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c4f8 <_vfiprintf_r+0x21c>
 800c34c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c350:	f04f 0901 	mov.w	r9, #1
 800c354:	4623      	mov	r3, r4
 800c356:	469a      	mov	sl, r3
 800c358:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c35c:	b10a      	cbz	r2, 800c362 <_vfiprintf_r+0x86>
 800c35e:	2a25      	cmp	r2, #37	@ 0x25
 800c360:	d1f9      	bne.n	800c356 <_vfiprintf_r+0x7a>
 800c362:	ebba 0b04 	subs.w	fp, sl, r4
 800c366:	d00b      	beq.n	800c380 <_vfiprintf_r+0xa4>
 800c368:	465b      	mov	r3, fp
 800c36a:	4622      	mov	r2, r4
 800c36c:	4629      	mov	r1, r5
 800c36e:	4630      	mov	r0, r6
 800c370:	f7ff ffa2 	bl	800c2b8 <__sfputs_r>
 800c374:	3001      	adds	r0, #1
 800c376:	f000 80a7 	beq.w	800c4c8 <_vfiprintf_r+0x1ec>
 800c37a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c37c:	445a      	add	r2, fp
 800c37e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c380:	f89a 3000 	ldrb.w	r3, [sl]
 800c384:	2b00      	cmp	r3, #0
 800c386:	f000 809f 	beq.w	800c4c8 <_vfiprintf_r+0x1ec>
 800c38a:	2300      	movs	r3, #0
 800c38c:	f04f 32ff 	mov.w	r2, #4294967295
 800c390:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c394:	f10a 0a01 	add.w	sl, sl, #1
 800c398:	9304      	str	r3, [sp, #16]
 800c39a:	9307      	str	r3, [sp, #28]
 800c39c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c3a0:	931a      	str	r3, [sp, #104]	@ 0x68
 800c3a2:	4654      	mov	r4, sl
 800c3a4:	2205      	movs	r2, #5
 800c3a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3aa:	4853      	ldr	r0, [pc, #332]	@ (800c4f8 <_vfiprintf_r+0x21c>)
 800c3ac:	f7f3 ff10 	bl	80001d0 <memchr>
 800c3b0:	9a04      	ldr	r2, [sp, #16]
 800c3b2:	b9d8      	cbnz	r0, 800c3ec <_vfiprintf_r+0x110>
 800c3b4:	06d1      	lsls	r1, r2, #27
 800c3b6:	bf44      	itt	mi
 800c3b8:	2320      	movmi	r3, #32
 800c3ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3be:	0713      	lsls	r3, r2, #28
 800c3c0:	bf44      	itt	mi
 800c3c2:	232b      	movmi	r3, #43	@ 0x2b
 800c3c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3c8:	f89a 3000 	ldrb.w	r3, [sl]
 800c3cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3ce:	d015      	beq.n	800c3fc <_vfiprintf_r+0x120>
 800c3d0:	9a07      	ldr	r2, [sp, #28]
 800c3d2:	4654      	mov	r4, sl
 800c3d4:	2000      	movs	r0, #0
 800c3d6:	f04f 0c0a 	mov.w	ip, #10
 800c3da:	4621      	mov	r1, r4
 800c3dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3e0:	3b30      	subs	r3, #48	@ 0x30
 800c3e2:	2b09      	cmp	r3, #9
 800c3e4:	d94b      	bls.n	800c47e <_vfiprintf_r+0x1a2>
 800c3e6:	b1b0      	cbz	r0, 800c416 <_vfiprintf_r+0x13a>
 800c3e8:	9207      	str	r2, [sp, #28]
 800c3ea:	e014      	b.n	800c416 <_vfiprintf_r+0x13a>
 800c3ec:	eba0 0308 	sub.w	r3, r0, r8
 800c3f0:	fa09 f303 	lsl.w	r3, r9, r3
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	9304      	str	r3, [sp, #16]
 800c3f8:	46a2      	mov	sl, r4
 800c3fa:	e7d2      	b.n	800c3a2 <_vfiprintf_r+0xc6>
 800c3fc:	9b03      	ldr	r3, [sp, #12]
 800c3fe:	1d19      	adds	r1, r3, #4
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	9103      	str	r1, [sp, #12]
 800c404:	2b00      	cmp	r3, #0
 800c406:	bfbb      	ittet	lt
 800c408:	425b      	neglt	r3, r3
 800c40a:	f042 0202 	orrlt.w	r2, r2, #2
 800c40e:	9307      	strge	r3, [sp, #28]
 800c410:	9307      	strlt	r3, [sp, #28]
 800c412:	bfb8      	it	lt
 800c414:	9204      	strlt	r2, [sp, #16]
 800c416:	7823      	ldrb	r3, [r4, #0]
 800c418:	2b2e      	cmp	r3, #46	@ 0x2e
 800c41a:	d10a      	bne.n	800c432 <_vfiprintf_r+0x156>
 800c41c:	7863      	ldrb	r3, [r4, #1]
 800c41e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c420:	d132      	bne.n	800c488 <_vfiprintf_r+0x1ac>
 800c422:	9b03      	ldr	r3, [sp, #12]
 800c424:	1d1a      	adds	r2, r3, #4
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	9203      	str	r2, [sp, #12]
 800c42a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c42e:	3402      	adds	r4, #2
 800c430:	9305      	str	r3, [sp, #20]
 800c432:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c508 <_vfiprintf_r+0x22c>
 800c436:	7821      	ldrb	r1, [r4, #0]
 800c438:	2203      	movs	r2, #3
 800c43a:	4650      	mov	r0, sl
 800c43c:	f7f3 fec8 	bl	80001d0 <memchr>
 800c440:	b138      	cbz	r0, 800c452 <_vfiprintf_r+0x176>
 800c442:	9b04      	ldr	r3, [sp, #16]
 800c444:	eba0 000a 	sub.w	r0, r0, sl
 800c448:	2240      	movs	r2, #64	@ 0x40
 800c44a:	4082      	lsls	r2, r0
 800c44c:	4313      	orrs	r3, r2
 800c44e:	3401      	adds	r4, #1
 800c450:	9304      	str	r3, [sp, #16]
 800c452:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c456:	4829      	ldr	r0, [pc, #164]	@ (800c4fc <_vfiprintf_r+0x220>)
 800c458:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c45c:	2206      	movs	r2, #6
 800c45e:	f7f3 feb7 	bl	80001d0 <memchr>
 800c462:	2800      	cmp	r0, #0
 800c464:	d03f      	beq.n	800c4e6 <_vfiprintf_r+0x20a>
 800c466:	4b26      	ldr	r3, [pc, #152]	@ (800c500 <_vfiprintf_r+0x224>)
 800c468:	bb1b      	cbnz	r3, 800c4b2 <_vfiprintf_r+0x1d6>
 800c46a:	9b03      	ldr	r3, [sp, #12]
 800c46c:	3307      	adds	r3, #7
 800c46e:	f023 0307 	bic.w	r3, r3, #7
 800c472:	3308      	adds	r3, #8
 800c474:	9303      	str	r3, [sp, #12]
 800c476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c478:	443b      	add	r3, r7
 800c47a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c47c:	e76a      	b.n	800c354 <_vfiprintf_r+0x78>
 800c47e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c482:	460c      	mov	r4, r1
 800c484:	2001      	movs	r0, #1
 800c486:	e7a8      	b.n	800c3da <_vfiprintf_r+0xfe>
 800c488:	2300      	movs	r3, #0
 800c48a:	3401      	adds	r4, #1
 800c48c:	9305      	str	r3, [sp, #20]
 800c48e:	4619      	mov	r1, r3
 800c490:	f04f 0c0a 	mov.w	ip, #10
 800c494:	4620      	mov	r0, r4
 800c496:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c49a:	3a30      	subs	r2, #48	@ 0x30
 800c49c:	2a09      	cmp	r2, #9
 800c49e:	d903      	bls.n	800c4a8 <_vfiprintf_r+0x1cc>
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d0c6      	beq.n	800c432 <_vfiprintf_r+0x156>
 800c4a4:	9105      	str	r1, [sp, #20]
 800c4a6:	e7c4      	b.n	800c432 <_vfiprintf_r+0x156>
 800c4a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4ac:	4604      	mov	r4, r0
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	e7f0      	b.n	800c494 <_vfiprintf_r+0x1b8>
 800c4b2:	ab03      	add	r3, sp, #12
 800c4b4:	9300      	str	r3, [sp, #0]
 800c4b6:	462a      	mov	r2, r5
 800c4b8:	4b12      	ldr	r3, [pc, #72]	@ (800c504 <_vfiprintf_r+0x228>)
 800c4ba:	a904      	add	r1, sp, #16
 800c4bc:	4630      	mov	r0, r6
 800c4be:	f7fd fbc3 	bl	8009c48 <_printf_float>
 800c4c2:	4607      	mov	r7, r0
 800c4c4:	1c78      	adds	r0, r7, #1
 800c4c6:	d1d6      	bne.n	800c476 <_vfiprintf_r+0x19a>
 800c4c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c4ca:	07d9      	lsls	r1, r3, #31
 800c4cc:	d405      	bmi.n	800c4da <_vfiprintf_r+0x1fe>
 800c4ce:	89ab      	ldrh	r3, [r5, #12]
 800c4d0:	059a      	lsls	r2, r3, #22
 800c4d2:	d402      	bmi.n	800c4da <_vfiprintf_r+0x1fe>
 800c4d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c4d6:	f7fe f92b 	bl	800a730 <__retarget_lock_release_recursive>
 800c4da:	89ab      	ldrh	r3, [r5, #12]
 800c4dc:	065b      	lsls	r3, r3, #25
 800c4de:	f53f af1f 	bmi.w	800c320 <_vfiprintf_r+0x44>
 800c4e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c4e4:	e71e      	b.n	800c324 <_vfiprintf_r+0x48>
 800c4e6:	ab03      	add	r3, sp, #12
 800c4e8:	9300      	str	r3, [sp, #0]
 800c4ea:	462a      	mov	r2, r5
 800c4ec:	4b05      	ldr	r3, [pc, #20]	@ (800c504 <_vfiprintf_r+0x228>)
 800c4ee:	a904      	add	r1, sp, #16
 800c4f0:	4630      	mov	r0, r6
 800c4f2:	f7fd fe41 	bl	800a178 <_printf_i>
 800c4f6:	e7e4      	b.n	800c4c2 <_vfiprintf_r+0x1e6>
 800c4f8:	0800d960 	.word	0x0800d960
 800c4fc:	0800d96a 	.word	0x0800d96a
 800c500:	08009c49 	.word	0x08009c49
 800c504:	0800c2b9 	.word	0x0800c2b9
 800c508:	0800d966 	.word	0x0800d966

0800c50c <__swbuf_r>:
 800c50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c50e:	460e      	mov	r6, r1
 800c510:	4614      	mov	r4, r2
 800c512:	4605      	mov	r5, r0
 800c514:	b118      	cbz	r0, 800c51e <__swbuf_r+0x12>
 800c516:	6a03      	ldr	r3, [r0, #32]
 800c518:	b90b      	cbnz	r3, 800c51e <__swbuf_r+0x12>
 800c51a:	f7fd ffd9 	bl	800a4d0 <__sinit>
 800c51e:	69a3      	ldr	r3, [r4, #24]
 800c520:	60a3      	str	r3, [r4, #8]
 800c522:	89a3      	ldrh	r3, [r4, #12]
 800c524:	071a      	lsls	r2, r3, #28
 800c526:	d501      	bpl.n	800c52c <__swbuf_r+0x20>
 800c528:	6923      	ldr	r3, [r4, #16]
 800c52a:	b943      	cbnz	r3, 800c53e <__swbuf_r+0x32>
 800c52c:	4621      	mov	r1, r4
 800c52e:	4628      	mov	r0, r5
 800c530:	f000 f82a 	bl	800c588 <__swsetup_r>
 800c534:	b118      	cbz	r0, 800c53e <__swbuf_r+0x32>
 800c536:	f04f 37ff 	mov.w	r7, #4294967295
 800c53a:	4638      	mov	r0, r7
 800c53c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c53e:	6823      	ldr	r3, [r4, #0]
 800c540:	6922      	ldr	r2, [r4, #16]
 800c542:	1a98      	subs	r0, r3, r2
 800c544:	6963      	ldr	r3, [r4, #20]
 800c546:	b2f6      	uxtb	r6, r6
 800c548:	4283      	cmp	r3, r0
 800c54a:	4637      	mov	r7, r6
 800c54c:	dc05      	bgt.n	800c55a <__swbuf_r+0x4e>
 800c54e:	4621      	mov	r1, r4
 800c550:	4628      	mov	r0, r5
 800c552:	f7ff fda7 	bl	800c0a4 <_fflush_r>
 800c556:	2800      	cmp	r0, #0
 800c558:	d1ed      	bne.n	800c536 <__swbuf_r+0x2a>
 800c55a:	68a3      	ldr	r3, [r4, #8]
 800c55c:	3b01      	subs	r3, #1
 800c55e:	60a3      	str	r3, [r4, #8]
 800c560:	6823      	ldr	r3, [r4, #0]
 800c562:	1c5a      	adds	r2, r3, #1
 800c564:	6022      	str	r2, [r4, #0]
 800c566:	701e      	strb	r6, [r3, #0]
 800c568:	6962      	ldr	r2, [r4, #20]
 800c56a:	1c43      	adds	r3, r0, #1
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d004      	beq.n	800c57a <__swbuf_r+0x6e>
 800c570:	89a3      	ldrh	r3, [r4, #12]
 800c572:	07db      	lsls	r3, r3, #31
 800c574:	d5e1      	bpl.n	800c53a <__swbuf_r+0x2e>
 800c576:	2e0a      	cmp	r6, #10
 800c578:	d1df      	bne.n	800c53a <__swbuf_r+0x2e>
 800c57a:	4621      	mov	r1, r4
 800c57c:	4628      	mov	r0, r5
 800c57e:	f7ff fd91 	bl	800c0a4 <_fflush_r>
 800c582:	2800      	cmp	r0, #0
 800c584:	d0d9      	beq.n	800c53a <__swbuf_r+0x2e>
 800c586:	e7d6      	b.n	800c536 <__swbuf_r+0x2a>

0800c588 <__swsetup_r>:
 800c588:	b538      	push	{r3, r4, r5, lr}
 800c58a:	4b29      	ldr	r3, [pc, #164]	@ (800c630 <__swsetup_r+0xa8>)
 800c58c:	4605      	mov	r5, r0
 800c58e:	6818      	ldr	r0, [r3, #0]
 800c590:	460c      	mov	r4, r1
 800c592:	b118      	cbz	r0, 800c59c <__swsetup_r+0x14>
 800c594:	6a03      	ldr	r3, [r0, #32]
 800c596:	b90b      	cbnz	r3, 800c59c <__swsetup_r+0x14>
 800c598:	f7fd ff9a 	bl	800a4d0 <__sinit>
 800c59c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5a0:	0719      	lsls	r1, r3, #28
 800c5a2:	d422      	bmi.n	800c5ea <__swsetup_r+0x62>
 800c5a4:	06da      	lsls	r2, r3, #27
 800c5a6:	d407      	bmi.n	800c5b8 <__swsetup_r+0x30>
 800c5a8:	2209      	movs	r2, #9
 800c5aa:	602a      	str	r2, [r5, #0]
 800c5ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5b0:	81a3      	strh	r3, [r4, #12]
 800c5b2:	f04f 30ff 	mov.w	r0, #4294967295
 800c5b6:	e033      	b.n	800c620 <__swsetup_r+0x98>
 800c5b8:	0758      	lsls	r0, r3, #29
 800c5ba:	d512      	bpl.n	800c5e2 <__swsetup_r+0x5a>
 800c5bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c5be:	b141      	cbz	r1, 800c5d2 <__swsetup_r+0x4a>
 800c5c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c5c4:	4299      	cmp	r1, r3
 800c5c6:	d002      	beq.n	800c5ce <__swsetup_r+0x46>
 800c5c8:	4628      	mov	r0, r5
 800c5ca:	f7fe ff0d 	bl	800b3e8 <_free_r>
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	6363      	str	r3, [r4, #52]	@ 0x34
 800c5d2:	89a3      	ldrh	r3, [r4, #12]
 800c5d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c5d8:	81a3      	strh	r3, [r4, #12]
 800c5da:	2300      	movs	r3, #0
 800c5dc:	6063      	str	r3, [r4, #4]
 800c5de:	6923      	ldr	r3, [r4, #16]
 800c5e0:	6023      	str	r3, [r4, #0]
 800c5e2:	89a3      	ldrh	r3, [r4, #12]
 800c5e4:	f043 0308 	orr.w	r3, r3, #8
 800c5e8:	81a3      	strh	r3, [r4, #12]
 800c5ea:	6923      	ldr	r3, [r4, #16]
 800c5ec:	b94b      	cbnz	r3, 800c602 <__swsetup_r+0x7a>
 800c5ee:	89a3      	ldrh	r3, [r4, #12]
 800c5f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c5f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c5f8:	d003      	beq.n	800c602 <__swsetup_r+0x7a>
 800c5fa:	4621      	mov	r1, r4
 800c5fc:	4628      	mov	r0, r5
 800c5fe:	f000 f883 	bl	800c708 <__smakebuf_r>
 800c602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c606:	f013 0201 	ands.w	r2, r3, #1
 800c60a:	d00a      	beq.n	800c622 <__swsetup_r+0x9a>
 800c60c:	2200      	movs	r2, #0
 800c60e:	60a2      	str	r2, [r4, #8]
 800c610:	6962      	ldr	r2, [r4, #20]
 800c612:	4252      	negs	r2, r2
 800c614:	61a2      	str	r2, [r4, #24]
 800c616:	6922      	ldr	r2, [r4, #16]
 800c618:	b942      	cbnz	r2, 800c62c <__swsetup_r+0xa4>
 800c61a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c61e:	d1c5      	bne.n	800c5ac <__swsetup_r+0x24>
 800c620:	bd38      	pop	{r3, r4, r5, pc}
 800c622:	0799      	lsls	r1, r3, #30
 800c624:	bf58      	it	pl
 800c626:	6962      	ldrpl	r2, [r4, #20]
 800c628:	60a2      	str	r2, [r4, #8]
 800c62a:	e7f4      	b.n	800c616 <__swsetup_r+0x8e>
 800c62c:	2000      	movs	r0, #0
 800c62e:	e7f7      	b.n	800c620 <__swsetup_r+0x98>
 800c630:	20000030 	.word	0x20000030

0800c634 <_raise_r>:
 800c634:	291f      	cmp	r1, #31
 800c636:	b538      	push	{r3, r4, r5, lr}
 800c638:	4605      	mov	r5, r0
 800c63a:	460c      	mov	r4, r1
 800c63c:	d904      	bls.n	800c648 <_raise_r+0x14>
 800c63e:	2316      	movs	r3, #22
 800c640:	6003      	str	r3, [r0, #0]
 800c642:	f04f 30ff 	mov.w	r0, #4294967295
 800c646:	bd38      	pop	{r3, r4, r5, pc}
 800c648:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c64a:	b112      	cbz	r2, 800c652 <_raise_r+0x1e>
 800c64c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c650:	b94b      	cbnz	r3, 800c666 <_raise_r+0x32>
 800c652:	4628      	mov	r0, r5
 800c654:	f000 f830 	bl	800c6b8 <_getpid_r>
 800c658:	4622      	mov	r2, r4
 800c65a:	4601      	mov	r1, r0
 800c65c:	4628      	mov	r0, r5
 800c65e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c662:	f000 b817 	b.w	800c694 <_kill_r>
 800c666:	2b01      	cmp	r3, #1
 800c668:	d00a      	beq.n	800c680 <_raise_r+0x4c>
 800c66a:	1c59      	adds	r1, r3, #1
 800c66c:	d103      	bne.n	800c676 <_raise_r+0x42>
 800c66e:	2316      	movs	r3, #22
 800c670:	6003      	str	r3, [r0, #0]
 800c672:	2001      	movs	r0, #1
 800c674:	e7e7      	b.n	800c646 <_raise_r+0x12>
 800c676:	2100      	movs	r1, #0
 800c678:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c67c:	4620      	mov	r0, r4
 800c67e:	4798      	blx	r3
 800c680:	2000      	movs	r0, #0
 800c682:	e7e0      	b.n	800c646 <_raise_r+0x12>

0800c684 <raise>:
 800c684:	4b02      	ldr	r3, [pc, #8]	@ (800c690 <raise+0xc>)
 800c686:	4601      	mov	r1, r0
 800c688:	6818      	ldr	r0, [r3, #0]
 800c68a:	f7ff bfd3 	b.w	800c634 <_raise_r>
 800c68e:	bf00      	nop
 800c690:	20000030 	.word	0x20000030

0800c694 <_kill_r>:
 800c694:	b538      	push	{r3, r4, r5, lr}
 800c696:	4d07      	ldr	r5, [pc, #28]	@ (800c6b4 <_kill_r+0x20>)
 800c698:	2300      	movs	r3, #0
 800c69a:	4604      	mov	r4, r0
 800c69c:	4608      	mov	r0, r1
 800c69e:	4611      	mov	r1, r2
 800c6a0:	602b      	str	r3, [r5, #0]
 800c6a2:	f7f6 fb15 	bl	8002cd0 <_kill>
 800c6a6:	1c43      	adds	r3, r0, #1
 800c6a8:	d102      	bne.n	800c6b0 <_kill_r+0x1c>
 800c6aa:	682b      	ldr	r3, [r5, #0]
 800c6ac:	b103      	cbz	r3, 800c6b0 <_kill_r+0x1c>
 800c6ae:	6023      	str	r3, [r4, #0]
 800c6b0:	bd38      	pop	{r3, r4, r5, pc}
 800c6b2:	bf00      	nop
 800c6b4:	2000bf8c 	.word	0x2000bf8c

0800c6b8 <_getpid_r>:
 800c6b8:	f7f6 bb02 	b.w	8002cc0 <_getpid>

0800c6bc <__swhatbuf_r>:
 800c6bc:	b570      	push	{r4, r5, r6, lr}
 800c6be:	460c      	mov	r4, r1
 800c6c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6c4:	2900      	cmp	r1, #0
 800c6c6:	b096      	sub	sp, #88	@ 0x58
 800c6c8:	4615      	mov	r5, r2
 800c6ca:	461e      	mov	r6, r3
 800c6cc:	da0d      	bge.n	800c6ea <__swhatbuf_r+0x2e>
 800c6ce:	89a3      	ldrh	r3, [r4, #12]
 800c6d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c6d4:	f04f 0100 	mov.w	r1, #0
 800c6d8:	bf14      	ite	ne
 800c6da:	2340      	movne	r3, #64	@ 0x40
 800c6dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c6e0:	2000      	movs	r0, #0
 800c6e2:	6031      	str	r1, [r6, #0]
 800c6e4:	602b      	str	r3, [r5, #0]
 800c6e6:	b016      	add	sp, #88	@ 0x58
 800c6e8:	bd70      	pop	{r4, r5, r6, pc}
 800c6ea:	466a      	mov	r2, sp
 800c6ec:	f000 f848 	bl	800c780 <_fstat_r>
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	dbec      	blt.n	800c6ce <__swhatbuf_r+0x12>
 800c6f4:	9901      	ldr	r1, [sp, #4]
 800c6f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c6fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c6fe:	4259      	negs	r1, r3
 800c700:	4159      	adcs	r1, r3
 800c702:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c706:	e7eb      	b.n	800c6e0 <__swhatbuf_r+0x24>

0800c708 <__smakebuf_r>:
 800c708:	898b      	ldrh	r3, [r1, #12]
 800c70a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c70c:	079d      	lsls	r5, r3, #30
 800c70e:	4606      	mov	r6, r0
 800c710:	460c      	mov	r4, r1
 800c712:	d507      	bpl.n	800c724 <__smakebuf_r+0x1c>
 800c714:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c718:	6023      	str	r3, [r4, #0]
 800c71a:	6123      	str	r3, [r4, #16]
 800c71c:	2301      	movs	r3, #1
 800c71e:	6163      	str	r3, [r4, #20]
 800c720:	b003      	add	sp, #12
 800c722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c724:	ab01      	add	r3, sp, #4
 800c726:	466a      	mov	r2, sp
 800c728:	f7ff ffc8 	bl	800c6bc <__swhatbuf_r>
 800c72c:	9f00      	ldr	r7, [sp, #0]
 800c72e:	4605      	mov	r5, r0
 800c730:	4639      	mov	r1, r7
 800c732:	4630      	mov	r0, r6
 800c734:	f7fe fecc 	bl	800b4d0 <_malloc_r>
 800c738:	b948      	cbnz	r0, 800c74e <__smakebuf_r+0x46>
 800c73a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c73e:	059a      	lsls	r2, r3, #22
 800c740:	d4ee      	bmi.n	800c720 <__smakebuf_r+0x18>
 800c742:	f023 0303 	bic.w	r3, r3, #3
 800c746:	f043 0302 	orr.w	r3, r3, #2
 800c74a:	81a3      	strh	r3, [r4, #12]
 800c74c:	e7e2      	b.n	800c714 <__smakebuf_r+0xc>
 800c74e:	89a3      	ldrh	r3, [r4, #12]
 800c750:	6020      	str	r0, [r4, #0]
 800c752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c756:	81a3      	strh	r3, [r4, #12]
 800c758:	9b01      	ldr	r3, [sp, #4]
 800c75a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c75e:	b15b      	cbz	r3, 800c778 <__smakebuf_r+0x70>
 800c760:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c764:	4630      	mov	r0, r6
 800c766:	f000 f81d 	bl	800c7a4 <_isatty_r>
 800c76a:	b128      	cbz	r0, 800c778 <__smakebuf_r+0x70>
 800c76c:	89a3      	ldrh	r3, [r4, #12]
 800c76e:	f023 0303 	bic.w	r3, r3, #3
 800c772:	f043 0301 	orr.w	r3, r3, #1
 800c776:	81a3      	strh	r3, [r4, #12]
 800c778:	89a3      	ldrh	r3, [r4, #12]
 800c77a:	431d      	orrs	r5, r3
 800c77c:	81a5      	strh	r5, [r4, #12]
 800c77e:	e7cf      	b.n	800c720 <__smakebuf_r+0x18>

0800c780 <_fstat_r>:
 800c780:	b538      	push	{r3, r4, r5, lr}
 800c782:	4d07      	ldr	r5, [pc, #28]	@ (800c7a0 <_fstat_r+0x20>)
 800c784:	2300      	movs	r3, #0
 800c786:	4604      	mov	r4, r0
 800c788:	4608      	mov	r0, r1
 800c78a:	4611      	mov	r1, r2
 800c78c:	602b      	str	r3, [r5, #0]
 800c78e:	f7f6 faff 	bl	8002d90 <_fstat>
 800c792:	1c43      	adds	r3, r0, #1
 800c794:	d102      	bne.n	800c79c <_fstat_r+0x1c>
 800c796:	682b      	ldr	r3, [r5, #0]
 800c798:	b103      	cbz	r3, 800c79c <_fstat_r+0x1c>
 800c79a:	6023      	str	r3, [r4, #0]
 800c79c:	bd38      	pop	{r3, r4, r5, pc}
 800c79e:	bf00      	nop
 800c7a0:	2000bf8c 	.word	0x2000bf8c

0800c7a4 <_isatty_r>:
 800c7a4:	b538      	push	{r3, r4, r5, lr}
 800c7a6:	4d06      	ldr	r5, [pc, #24]	@ (800c7c0 <_isatty_r+0x1c>)
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	4604      	mov	r4, r0
 800c7ac:	4608      	mov	r0, r1
 800c7ae:	602b      	str	r3, [r5, #0]
 800c7b0:	f7f6 fafe 	bl	8002db0 <_isatty>
 800c7b4:	1c43      	adds	r3, r0, #1
 800c7b6:	d102      	bne.n	800c7be <_isatty_r+0x1a>
 800c7b8:	682b      	ldr	r3, [r5, #0]
 800c7ba:	b103      	cbz	r3, 800c7be <_isatty_r+0x1a>
 800c7bc:	6023      	str	r3, [r4, #0]
 800c7be:	bd38      	pop	{r3, r4, r5, pc}
 800c7c0:	2000bf8c 	.word	0x2000bf8c

0800c7c4 <pow>:
 800c7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7c6:	ed2d 8b02 	vpush	{d8}
 800c7ca:	eeb0 8a40 	vmov.f32	s16, s0
 800c7ce:	eef0 8a60 	vmov.f32	s17, s1
 800c7d2:	ec55 4b11 	vmov	r4, r5, d1
 800c7d6:	f000 f873 	bl	800c8c0 <__ieee754_pow>
 800c7da:	4622      	mov	r2, r4
 800c7dc:	462b      	mov	r3, r5
 800c7de:	4620      	mov	r0, r4
 800c7e0:	4629      	mov	r1, r5
 800c7e2:	ec57 6b10 	vmov	r6, r7, d0
 800c7e6:	f7f4 f9a1 	bl	8000b2c <__aeabi_dcmpun>
 800c7ea:	2800      	cmp	r0, #0
 800c7ec:	d13b      	bne.n	800c866 <pow+0xa2>
 800c7ee:	ec51 0b18 	vmov	r0, r1, d8
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	f7f4 f967 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7fa:	b1b8      	cbz	r0, 800c82c <pow+0x68>
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	2300      	movs	r3, #0
 800c800:	4620      	mov	r0, r4
 800c802:	4629      	mov	r1, r5
 800c804:	f7f4 f960 	bl	8000ac8 <__aeabi_dcmpeq>
 800c808:	2800      	cmp	r0, #0
 800c80a:	d146      	bne.n	800c89a <pow+0xd6>
 800c80c:	ec45 4b10 	vmov	d0, r4, r5
 800c810:	f000 f848 	bl	800c8a4 <finite>
 800c814:	b338      	cbz	r0, 800c866 <pow+0xa2>
 800c816:	2200      	movs	r2, #0
 800c818:	2300      	movs	r3, #0
 800c81a:	4620      	mov	r0, r4
 800c81c:	4629      	mov	r1, r5
 800c81e:	f7f4 f95d 	bl	8000adc <__aeabi_dcmplt>
 800c822:	b300      	cbz	r0, 800c866 <pow+0xa2>
 800c824:	f7fd ff58 	bl	800a6d8 <__errno>
 800c828:	2322      	movs	r3, #34	@ 0x22
 800c82a:	e01b      	b.n	800c864 <pow+0xa0>
 800c82c:	ec47 6b10 	vmov	d0, r6, r7
 800c830:	f000 f838 	bl	800c8a4 <finite>
 800c834:	b9e0      	cbnz	r0, 800c870 <pow+0xac>
 800c836:	eeb0 0a48 	vmov.f32	s0, s16
 800c83a:	eef0 0a68 	vmov.f32	s1, s17
 800c83e:	f000 f831 	bl	800c8a4 <finite>
 800c842:	b1a8      	cbz	r0, 800c870 <pow+0xac>
 800c844:	ec45 4b10 	vmov	d0, r4, r5
 800c848:	f000 f82c 	bl	800c8a4 <finite>
 800c84c:	b180      	cbz	r0, 800c870 <pow+0xac>
 800c84e:	4632      	mov	r2, r6
 800c850:	463b      	mov	r3, r7
 800c852:	4630      	mov	r0, r6
 800c854:	4639      	mov	r1, r7
 800c856:	f7f4 f969 	bl	8000b2c <__aeabi_dcmpun>
 800c85a:	2800      	cmp	r0, #0
 800c85c:	d0e2      	beq.n	800c824 <pow+0x60>
 800c85e:	f7fd ff3b 	bl	800a6d8 <__errno>
 800c862:	2321      	movs	r3, #33	@ 0x21
 800c864:	6003      	str	r3, [r0, #0]
 800c866:	ecbd 8b02 	vpop	{d8}
 800c86a:	ec47 6b10 	vmov	d0, r6, r7
 800c86e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c870:	2200      	movs	r2, #0
 800c872:	2300      	movs	r3, #0
 800c874:	4630      	mov	r0, r6
 800c876:	4639      	mov	r1, r7
 800c878:	f7f4 f926 	bl	8000ac8 <__aeabi_dcmpeq>
 800c87c:	2800      	cmp	r0, #0
 800c87e:	d0f2      	beq.n	800c866 <pow+0xa2>
 800c880:	eeb0 0a48 	vmov.f32	s0, s16
 800c884:	eef0 0a68 	vmov.f32	s1, s17
 800c888:	f000 f80c 	bl	800c8a4 <finite>
 800c88c:	2800      	cmp	r0, #0
 800c88e:	d0ea      	beq.n	800c866 <pow+0xa2>
 800c890:	ec45 4b10 	vmov	d0, r4, r5
 800c894:	f000 f806 	bl	800c8a4 <finite>
 800c898:	e7c3      	b.n	800c822 <pow+0x5e>
 800c89a:	4f01      	ldr	r7, [pc, #4]	@ (800c8a0 <pow+0xdc>)
 800c89c:	2600      	movs	r6, #0
 800c89e:	e7e2      	b.n	800c866 <pow+0xa2>
 800c8a0:	3ff00000 	.word	0x3ff00000

0800c8a4 <finite>:
 800c8a4:	b082      	sub	sp, #8
 800c8a6:	ed8d 0b00 	vstr	d0, [sp]
 800c8aa:	9801      	ldr	r0, [sp, #4]
 800c8ac:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800c8b0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800c8b4:	0fc0      	lsrs	r0, r0, #31
 800c8b6:	b002      	add	sp, #8
 800c8b8:	4770      	bx	lr
 800c8ba:	0000      	movs	r0, r0
 800c8bc:	0000      	movs	r0, r0
	...

0800c8c0 <__ieee754_pow>:
 800c8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8c4:	b091      	sub	sp, #68	@ 0x44
 800c8c6:	ed8d 1b00 	vstr	d1, [sp]
 800c8ca:	e9dd 1900 	ldrd	r1, r9, [sp]
 800c8ce:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800c8d2:	ea5a 0001 	orrs.w	r0, sl, r1
 800c8d6:	ec57 6b10 	vmov	r6, r7, d0
 800c8da:	d113      	bne.n	800c904 <__ieee754_pow+0x44>
 800c8dc:	19b3      	adds	r3, r6, r6
 800c8de:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800c8e2:	4152      	adcs	r2, r2
 800c8e4:	4298      	cmp	r0, r3
 800c8e6:	4b98      	ldr	r3, [pc, #608]	@ (800cb48 <__ieee754_pow+0x288>)
 800c8e8:	4193      	sbcs	r3, r2
 800c8ea:	f080 84ea 	bcs.w	800d2c2 <__ieee754_pow+0xa02>
 800c8ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8f2:	4630      	mov	r0, r6
 800c8f4:	4639      	mov	r1, r7
 800c8f6:	f7f3 fcc9 	bl	800028c <__adddf3>
 800c8fa:	ec41 0b10 	vmov	d0, r0, r1
 800c8fe:	b011      	add	sp, #68	@ 0x44
 800c900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c904:	4a91      	ldr	r2, [pc, #580]	@ (800cb4c <__ieee754_pow+0x28c>)
 800c906:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c90a:	4590      	cmp	r8, r2
 800c90c:	463d      	mov	r5, r7
 800c90e:	4633      	mov	r3, r6
 800c910:	d806      	bhi.n	800c920 <__ieee754_pow+0x60>
 800c912:	d101      	bne.n	800c918 <__ieee754_pow+0x58>
 800c914:	2e00      	cmp	r6, #0
 800c916:	d1ea      	bne.n	800c8ee <__ieee754_pow+0x2e>
 800c918:	4592      	cmp	sl, r2
 800c91a:	d801      	bhi.n	800c920 <__ieee754_pow+0x60>
 800c91c:	d10e      	bne.n	800c93c <__ieee754_pow+0x7c>
 800c91e:	b169      	cbz	r1, 800c93c <__ieee754_pow+0x7c>
 800c920:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800c924:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800c928:	431d      	orrs	r5, r3
 800c92a:	d1e0      	bne.n	800c8ee <__ieee754_pow+0x2e>
 800c92c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c930:	18db      	adds	r3, r3, r3
 800c932:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800c936:	4152      	adcs	r2, r2
 800c938:	429d      	cmp	r5, r3
 800c93a:	e7d4      	b.n	800c8e6 <__ieee754_pow+0x26>
 800c93c:	2d00      	cmp	r5, #0
 800c93e:	46c3      	mov	fp, r8
 800c940:	da3a      	bge.n	800c9b8 <__ieee754_pow+0xf8>
 800c942:	4a83      	ldr	r2, [pc, #524]	@ (800cb50 <__ieee754_pow+0x290>)
 800c944:	4592      	cmp	sl, r2
 800c946:	d84d      	bhi.n	800c9e4 <__ieee754_pow+0x124>
 800c948:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800c94c:	4592      	cmp	sl, r2
 800c94e:	f240 84c7 	bls.w	800d2e0 <__ieee754_pow+0xa20>
 800c952:	ea4f 522a 	mov.w	r2, sl, asr #20
 800c956:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800c95a:	2a14      	cmp	r2, #20
 800c95c:	dd0f      	ble.n	800c97e <__ieee754_pow+0xbe>
 800c95e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800c962:	fa21 f402 	lsr.w	r4, r1, r2
 800c966:	fa04 f202 	lsl.w	r2, r4, r2
 800c96a:	428a      	cmp	r2, r1
 800c96c:	f040 84b8 	bne.w	800d2e0 <__ieee754_pow+0xa20>
 800c970:	f004 0401 	and.w	r4, r4, #1
 800c974:	f1c4 0402 	rsb	r4, r4, #2
 800c978:	2900      	cmp	r1, #0
 800c97a:	d158      	bne.n	800ca2e <__ieee754_pow+0x16e>
 800c97c:	e00e      	b.n	800c99c <__ieee754_pow+0xdc>
 800c97e:	2900      	cmp	r1, #0
 800c980:	d154      	bne.n	800ca2c <__ieee754_pow+0x16c>
 800c982:	f1c2 0214 	rsb	r2, r2, #20
 800c986:	fa4a f402 	asr.w	r4, sl, r2
 800c98a:	fa04 f202 	lsl.w	r2, r4, r2
 800c98e:	4552      	cmp	r2, sl
 800c990:	f040 84a3 	bne.w	800d2da <__ieee754_pow+0xa1a>
 800c994:	f004 0401 	and.w	r4, r4, #1
 800c998:	f1c4 0402 	rsb	r4, r4, #2
 800c99c:	4a6d      	ldr	r2, [pc, #436]	@ (800cb54 <__ieee754_pow+0x294>)
 800c99e:	4592      	cmp	sl, r2
 800c9a0:	d12e      	bne.n	800ca00 <__ieee754_pow+0x140>
 800c9a2:	f1b9 0f00 	cmp.w	r9, #0
 800c9a6:	f280 8494 	bge.w	800d2d2 <__ieee754_pow+0xa12>
 800c9aa:	496a      	ldr	r1, [pc, #424]	@ (800cb54 <__ieee754_pow+0x294>)
 800c9ac:	4632      	mov	r2, r6
 800c9ae:	463b      	mov	r3, r7
 800c9b0:	2000      	movs	r0, #0
 800c9b2:	f7f3 ff4b 	bl	800084c <__aeabi_ddiv>
 800c9b6:	e7a0      	b.n	800c8fa <__ieee754_pow+0x3a>
 800c9b8:	2400      	movs	r4, #0
 800c9ba:	bbc1      	cbnz	r1, 800ca2e <__ieee754_pow+0x16e>
 800c9bc:	4a63      	ldr	r2, [pc, #396]	@ (800cb4c <__ieee754_pow+0x28c>)
 800c9be:	4592      	cmp	sl, r2
 800c9c0:	d1ec      	bne.n	800c99c <__ieee754_pow+0xdc>
 800c9c2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800c9c6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800c9ca:	431a      	orrs	r2, r3
 800c9cc:	f000 8479 	beq.w	800d2c2 <__ieee754_pow+0xa02>
 800c9d0:	4b61      	ldr	r3, [pc, #388]	@ (800cb58 <__ieee754_pow+0x298>)
 800c9d2:	4598      	cmp	r8, r3
 800c9d4:	d908      	bls.n	800c9e8 <__ieee754_pow+0x128>
 800c9d6:	f1b9 0f00 	cmp.w	r9, #0
 800c9da:	f2c0 8476 	blt.w	800d2ca <__ieee754_pow+0xa0a>
 800c9de:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c9e2:	e78a      	b.n	800c8fa <__ieee754_pow+0x3a>
 800c9e4:	2402      	movs	r4, #2
 800c9e6:	e7e8      	b.n	800c9ba <__ieee754_pow+0xfa>
 800c9e8:	f1b9 0f00 	cmp.w	r9, #0
 800c9ec:	f04f 0000 	mov.w	r0, #0
 800c9f0:	f04f 0100 	mov.w	r1, #0
 800c9f4:	da81      	bge.n	800c8fa <__ieee754_pow+0x3a>
 800c9f6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c9fa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c9fe:	e77c      	b.n	800c8fa <__ieee754_pow+0x3a>
 800ca00:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800ca04:	d106      	bne.n	800ca14 <__ieee754_pow+0x154>
 800ca06:	4632      	mov	r2, r6
 800ca08:	463b      	mov	r3, r7
 800ca0a:	4630      	mov	r0, r6
 800ca0c:	4639      	mov	r1, r7
 800ca0e:	f7f3 fdf3 	bl	80005f8 <__aeabi_dmul>
 800ca12:	e772      	b.n	800c8fa <__ieee754_pow+0x3a>
 800ca14:	4a51      	ldr	r2, [pc, #324]	@ (800cb5c <__ieee754_pow+0x29c>)
 800ca16:	4591      	cmp	r9, r2
 800ca18:	d109      	bne.n	800ca2e <__ieee754_pow+0x16e>
 800ca1a:	2d00      	cmp	r5, #0
 800ca1c:	db07      	blt.n	800ca2e <__ieee754_pow+0x16e>
 800ca1e:	ec47 6b10 	vmov	d0, r6, r7
 800ca22:	b011      	add	sp, #68	@ 0x44
 800ca24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca28:	f000 bd52 	b.w	800d4d0 <__ieee754_sqrt>
 800ca2c:	2400      	movs	r4, #0
 800ca2e:	ec47 6b10 	vmov	d0, r6, r7
 800ca32:	9302      	str	r3, [sp, #8]
 800ca34:	f000 fc88 	bl	800d348 <fabs>
 800ca38:	9b02      	ldr	r3, [sp, #8]
 800ca3a:	ec51 0b10 	vmov	r0, r1, d0
 800ca3e:	bb53      	cbnz	r3, 800ca96 <__ieee754_pow+0x1d6>
 800ca40:	4b44      	ldr	r3, [pc, #272]	@ (800cb54 <__ieee754_pow+0x294>)
 800ca42:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800ca46:	429a      	cmp	r2, r3
 800ca48:	d002      	beq.n	800ca50 <__ieee754_pow+0x190>
 800ca4a:	f1b8 0f00 	cmp.w	r8, #0
 800ca4e:	d122      	bne.n	800ca96 <__ieee754_pow+0x1d6>
 800ca50:	f1b9 0f00 	cmp.w	r9, #0
 800ca54:	da05      	bge.n	800ca62 <__ieee754_pow+0x1a2>
 800ca56:	4602      	mov	r2, r0
 800ca58:	460b      	mov	r3, r1
 800ca5a:	2000      	movs	r0, #0
 800ca5c:	493d      	ldr	r1, [pc, #244]	@ (800cb54 <__ieee754_pow+0x294>)
 800ca5e:	f7f3 fef5 	bl	800084c <__aeabi_ddiv>
 800ca62:	2d00      	cmp	r5, #0
 800ca64:	f6bf af49 	bge.w	800c8fa <__ieee754_pow+0x3a>
 800ca68:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800ca6c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800ca70:	ea58 0804 	orrs.w	r8, r8, r4
 800ca74:	d108      	bne.n	800ca88 <__ieee754_pow+0x1c8>
 800ca76:	4602      	mov	r2, r0
 800ca78:	460b      	mov	r3, r1
 800ca7a:	4610      	mov	r0, r2
 800ca7c:	4619      	mov	r1, r3
 800ca7e:	f7f3 fc03 	bl	8000288 <__aeabi_dsub>
 800ca82:	4602      	mov	r2, r0
 800ca84:	460b      	mov	r3, r1
 800ca86:	e794      	b.n	800c9b2 <__ieee754_pow+0xf2>
 800ca88:	2c01      	cmp	r4, #1
 800ca8a:	f47f af36 	bne.w	800c8fa <__ieee754_pow+0x3a>
 800ca8e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ca92:	4619      	mov	r1, r3
 800ca94:	e731      	b.n	800c8fa <__ieee754_pow+0x3a>
 800ca96:	0feb      	lsrs	r3, r5, #31
 800ca98:	3b01      	subs	r3, #1
 800ca9a:	ea53 0204 	orrs.w	r2, r3, r4
 800ca9e:	d102      	bne.n	800caa6 <__ieee754_pow+0x1e6>
 800caa0:	4632      	mov	r2, r6
 800caa2:	463b      	mov	r3, r7
 800caa4:	e7e9      	b.n	800ca7a <__ieee754_pow+0x1ba>
 800caa6:	3c01      	subs	r4, #1
 800caa8:	431c      	orrs	r4, r3
 800caaa:	d016      	beq.n	800cada <__ieee754_pow+0x21a>
 800caac:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800cb38 <__ieee754_pow+0x278>
 800cab0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800cab4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cab8:	f240 8112 	bls.w	800cce0 <__ieee754_pow+0x420>
 800cabc:	4b28      	ldr	r3, [pc, #160]	@ (800cb60 <__ieee754_pow+0x2a0>)
 800cabe:	459a      	cmp	sl, r3
 800cac0:	4b25      	ldr	r3, [pc, #148]	@ (800cb58 <__ieee754_pow+0x298>)
 800cac2:	d916      	bls.n	800caf2 <__ieee754_pow+0x232>
 800cac4:	4598      	cmp	r8, r3
 800cac6:	d80b      	bhi.n	800cae0 <__ieee754_pow+0x220>
 800cac8:	f1b9 0f00 	cmp.w	r9, #0
 800cacc:	da0b      	bge.n	800cae6 <__ieee754_pow+0x226>
 800cace:	2000      	movs	r0, #0
 800cad0:	b011      	add	sp, #68	@ 0x44
 800cad2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad6:	f000 bcf3 	b.w	800d4c0 <__math_oflow>
 800cada:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800cb40 <__ieee754_pow+0x280>
 800cade:	e7e7      	b.n	800cab0 <__ieee754_pow+0x1f0>
 800cae0:	f1b9 0f00 	cmp.w	r9, #0
 800cae4:	dcf3      	bgt.n	800cace <__ieee754_pow+0x20e>
 800cae6:	2000      	movs	r0, #0
 800cae8:	b011      	add	sp, #68	@ 0x44
 800caea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caee:	f000 bcdf 	b.w	800d4b0 <__math_uflow>
 800caf2:	4598      	cmp	r8, r3
 800caf4:	d20c      	bcs.n	800cb10 <__ieee754_pow+0x250>
 800caf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cafa:	2200      	movs	r2, #0
 800cafc:	2300      	movs	r3, #0
 800cafe:	f7f3 ffed 	bl	8000adc <__aeabi_dcmplt>
 800cb02:	3800      	subs	r0, #0
 800cb04:	bf18      	it	ne
 800cb06:	2001      	movne	r0, #1
 800cb08:	f1b9 0f00 	cmp.w	r9, #0
 800cb0c:	daec      	bge.n	800cae8 <__ieee754_pow+0x228>
 800cb0e:	e7df      	b.n	800cad0 <__ieee754_pow+0x210>
 800cb10:	4b10      	ldr	r3, [pc, #64]	@ (800cb54 <__ieee754_pow+0x294>)
 800cb12:	4598      	cmp	r8, r3
 800cb14:	f04f 0200 	mov.w	r2, #0
 800cb18:	d924      	bls.n	800cb64 <__ieee754_pow+0x2a4>
 800cb1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb1e:	2300      	movs	r3, #0
 800cb20:	f7f3 ffdc 	bl	8000adc <__aeabi_dcmplt>
 800cb24:	3800      	subs	r0, #0
 800cb26:	bf18      	it	ne
 800cb28:	2001      	movne	r0, #1
 800cb2a:	f1b9 0f00 	cmp.w	r9, #0
 800cb2e:	dccf      	bgt.n	800cad0 <__ieee754_pow+0x210>
 800cb30:	e7da      	b.n	800cae8 <__ieee754_pow+0x228>
 800cb32:	bf00      	nop
 800cb34:	f3af 8000 	nop.w
 800cb38:	00000000 	.word	0x00000000
 800cb3c:	3ff00000 	.word	0x3ff00000
 800cb40:	00000000 	.word	0x00000000
 800cb44:	bff00000 	.word	0xbff00000
 800cb48:	fff00000 	.word	0xfff00000
 800cb4c:	7ff00000 	.word	0x7ff00000
 800cb50:	433fffff 	.word	0x433fffff
 800cb54:	3ff00000 	.word	0x3ff00000
 800cb58:	3fefffff 	.word	0x3fefffff
 800cb5c:	3fe00000 	.word	0x3fe00000
 800cb60:	43f00000 	.word	0x43f00000
 800cb64:	4b5a      	ldr	r3, [pc, #360]	@ (800ccd0 <__ieee754_pow+0x410>)
 800cb66:	f7f3 fb8f 	bl	8000288 <__aeabi_dsub>
 800cb6a:	a351      	add	r3, pc, #324	@ (adr r3, 800ccb0 <__ieee754_pow+0x3f0>)
 800cb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb70:	4604      	mov	r4, r0
 800cb72:	460d      	mov	r5, r1
 800cb74:	f7f3 fd40 	bl	80005f8 <__aeabi_dmul>
 800cb78:	a34f      	add	r3, pc, #316	@ (adr r3, 800ccb8 <__ieee754_pow+0x3f8>)
 800cb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb7e:	4606      	mov	r6, r0
 800cb80:	460f      	mov	r7, r1
 800cb82:	4620      	mov	r0, r4
 800cb84:	4629      	mov	r1, r5
 800cb86:	f7f3 fd37 	bl	80005f8 <__aeabi_dmul>
 800cb8a:	4b52      	ldr	r3, [pc, #328]	@ (800ccd4 <__ieee754_pow+0x414>)
 800cb8c:	4682      	mov	sl, r0
 800cb8e:	468b      	mov	fp, r1
 800cb90:	2200      	movs	r2, #0
 800cb92:	4620      	mov	r0, r4
 800cb94:	4629      	mov	r1, r5
 800cb96:	f7f3 fd2f 	bl	80005f8 <__aeabi_dmul>
 800cb9a:	4602      	mov	r2, r0
 800cb9c:	460b      	mov	r3, r1
 800cb9e:	a148      	add	r1, pc, #288	@ (adr r1, 800ccc0 <__ieee754_pow+0x400>)
 800cba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cba4:	f7f3 fb70 	bl	8000288 <__aeabi_dsub>
 800cba8:	4622      	mov	r2, r4
 800cbaa:	462b      	mov	r3, r5
 800cbac:	f7f3 fd24 	bl	80005f8 <__aeabi_dmul>
 800cbb0:	4602      	mov	r2, r0
 800cbb2:	460b      	mov	r3, r1
 800cbb4:	2000      	movs	r0, #0
 800cbb6:	4948      	ldr	r1, [pc, #288]	@ (800ccd8 <__ieee754_pow+0x418>)
 800cbb8:	f7f3 fb66 	bl	8000288 <__aeabi_dsub>
 800cbbc:	4622      	mov	r2, r4
 800cbbe:	4680      	mov	r8, r0
 800cbc0:	4689      	mov	r9, r1
 800cbc2:	462b      	mov	r3, r5
 800cbc4:	4620      	mov	r0, r4
 800cbc6:	4629      	mov	r1, r5
 800cbc8:	f7f3 fd16 	bl	80005f8 <__aeabi_dmul>
 800cbcc:	4602      	mov	r2, r0
 800cbce:	460b      	mov	r3, r1
 800cbd0:	4640      	mov	r0, r8
 800cbd2:	4649      	mov	r1, r9
 800cbd4:	f7f3 fd10 	bl	80005f8 <__aeabi_dmul>
 800cbd8:	a33b      	add	r3, pc, #236	@ (adr r3, 800ccc8 <__ieee754_pow+0x408>)
 800cbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbde:	f7f3 fd0b 	bl	80005f8 <__aeabi_dmul>
 800cbe2:	4602      	mov	r2, r0
 800cbe4:	460b      	mov	r3, r1
 800cbe6:	4650      	mov	r0, sl
 800cbe8:	4659      	mov	r1, fp
 800cbea:	f7f3 fb4d 	bl	8000288 <__aeabi_dsub>
 800cbee:	4602      	mov	r2, r0
 800cbf0:	460b      	mov	r3, r1
 800cbf2:	4680      	mov	r8, r0
 800cbf4:	4689      	mov	r9, r1
 800cbf6:	4630      	mov	r0, r6
 800cbf8:	4639      	mov	r1, r7
 800cbfa:	f7f3 fb47 	bl	800028c <__adddf3>
 800cbfe:	2400      	movs	r4, #0
 800cc00:	4632      	mov	r2, r6
 800cc02:	463b      	mov	r3, r7
 800cc04:	4620      	mov	r0, r4
 800cc06:	460d      	mov	r5, r1
 800cc08:	f7f3 fb3e 	bl	8000288 <__aeabi_dsub>
 800cc0c:	4602      	mov	r2, r0
 800cc0e:	460b      	mov	r3, r1
 800cc10:	4640      	mov	r0, r8
 800cc12:	4649      	mov	r1, r9
 800cc14:	f7f3 fb38 	bl	8000288 <__aeabi_dsub>
 800cc18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cc20:	2300      	movs	r3, #0
 800cc22:	9304      	str	r3, [sp, #16]
 800cc24:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800cc28:	4606      	mov	r6, r0
 800cc2a:	460f      	mov	r7, r1
 800cc2c:	4652      	mov	r2, sl
 800cc2e:	465b      	mov	r3, fp
 800cc30:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc34:	f7f3 fb28 	bl	8000288 <__aeabi_dsub>
 800cc38:	4622      	mov	r2, r4
 800cc3a:	462b      	mov	r3, r5
 800cc3c:	f7f3 fcdc 	bl	80005f8 <__aeabi_dmul>
 800cc40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc44:	4680      	mov	r8, r0
 800cc46:	4689      	mov	r9, r1
 800cc48:	4630      	mov	r0, r6
 800cc4a:	4639      	mov	r1, r7
 800cc4c:	f7f3 fcd4 	bl	80005f8 <__aeabi_dmul>
 800cc50:	4602      	mov	r2, r0
 800cc52:	460b      	mov	r3, r1
 800cc54:	4640      	mov	r0, r8
 800cc56:	4649      	mov	r1, r9
 800cc58:	f7f3 fb18 	bl	800028c <__adddf3>
 800cc5c:	4652      	mov	r2, sl
 800cc5e:	465b      	mov	r3, fp
 800cc60:	4606      	mov	r6, r0
 800cc62:	460f      	mov	r7, r1
 800cc64:	4620      	mov	r0, r4
 800cc66:	4629      	mov	r1, r5
 800cc68:	f7f3 fcc6 	bl	80005f8 <__aeabi_dmul>
 800cc6c:	460b      	mov	r3, r1
 800cc6e:	4602      	mov	r2, r0
 800cc70:	4680      	mov	r8, r0
 800cc72:	4689      	mov	r9, r1
 800cc74:	4630      	mov	r0, r6
 800cc76:	4639      	mov	r1, r7
 800cc78:	f7f3 fb08 	bl	800028c <__adddf3>
 800cc7c:	4b17      	ldr	r3, [pc, #92]	@ (800ccdc <__ieee754_pow+0x41c>)
 800cc7e:	4299      	cmp	r1, r3
 800cc80:	4604      	mov	r4, r0
 800cc82:	460d      	mov	r5, r1
 800cc84:	468a      	mov	sl, r1
 800cc86:	468b      	mov	fp, r1
 800cc88:	f340 82ef 	ble.w	800d26a <__ieee754_pow+0x9aa>
 800cc8c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800cc90:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800cc94:	4303      	orrs	r3, r0
 800cc96:	f000 81e8 	beq.w	800d06a <__ieee754_pow+0x7aa>
 800cc9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	2300      	movs	r3, #0
 800cca2:	f7f3 ff1b 	bl	8000adc <__aeabi_dcmplt>
 800cca6:	3800      	subs	r0, #0
 800cca8:	bf18      	it	ne
 800ccaa:	2001      	movne	r0, #1
 800ccac:	e710      	b.n	800cad0 <__ieee754_pow+0x210>
 800ccae:	bf00      	nop
 800ccb0:	60000000 	.word	0x60000000
 800ccb4:	3ff71547 	.word	0x3ff71547
 800ccb8:	f85ddf44 	.word	0xf85ddf44
 800ccbc:	3e54ae0b 	.word	0x3e54ae0b
 800ccc0:	55555555 	.word	0x55555555
 800ccc4:	3fd55555 	.word	0x3fd55555
 800ccc8:	652b82fe 	.word	0x652b82fe
 800cccc:	3ff71547 	.word	0x3ff71547
 800ccd0:	3ff00000 	.word	0x3ff00000
 800ccd4:	3fd00000 	.word	0x3fd00000
 800ccd8:	3fe00000 	.word	0x3fe00000
 800ccdc:	408fffff 	.word	0x408fffff
 800cce0:	4bd5      	ldr	r3, [pc, #852]	@ (800d038 <__ieee754_pow+0x778>)
 800cce2:	402b      	ands	r3, r5
 800cce4:	2200      	movs	r2, #0
 800cce6:	b92b      	cbnz	r3, 800ccf4 <__ieee754_pow+0x434>
 800cce8:	4bd4      	ldr	r3, [pc, #848]	@ (800d03c <__ieee754_pow+0x77c>)
 800ccea:	f7f3 fc85 	bl	80005f8 <__aeabi_dmul>
 800ccee:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800ccf2:	468b      	mov	fp, r1
 800ccf4:	ea4f 532b 	mov.w	r3, fp, asr #20
 800ccf8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ccfc:	4413      	add	r3, r2
 800ccfe:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd00:	4bcf      	ldr	r3, [pc, #828]	@ (800d040 <__ieee754_pow+0x780>)
 800cd02:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800cd06:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800cd0a:	459b      	cmp	fp, r3
 800cd0c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cd10:	dd08      	ble.n	800cd24 <__ieee754_pow+0x464>
 800cd12:	4bcc      	ldr	r3, [pc, #816]	@ (800d044 <__ieee754_pow+0x784>)
 800cd14:	459b      	cmp	fp, r3
 800cd16:	f340 81a5 	ble.w	800d064 <__ieee754_pow+0x7a4>
 800cd1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd1c:	3301      	adds	r3, #1
 800cd1e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd20:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800cd24:	f04f 0a00 	mov.w	sl, #0
 800cd28:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800cd2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd2e:	4bc6      	ldr	r3, [pc, #792]	@ (800d048 <__ieee754_pow+0x788>)
 800cd30:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cd34:	ed93 7b00 	vldr	d7, [r3]
 800cd38:	4629      	mov	r1, r5
 800cd3a:	ec53 2b17 	vmov	r2, r3, d7
 800cd3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cd42:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cd46:	f7f3 fa9f 	bl	8000288 <__aeabi_dsub>
 800cd4a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cd4e:	4606      	mov	r6, r0
 800cd50:	460f      	mov	r7, r1
 800cd52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd56:	f7f3 fa99 	bl	800028c <__adddf3>
 800cd5a:	4602      	mov	r2, r0
 800cd5c:	460b      	mov	r3, r1
 800cd5e:	2000      	movs	r0, #0
 800cd60:	49ba      	ldr	r1, [pc, #744]	@ (800d04c <__ieee754_pow+0x78c>)
 800cd62:	f7f3 fd73 	bl	800084c <__aeabi_ddiv>
 800cd66:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800cd6a:	4602      	mov	r2, r0
 800cd6c:	460b      	mov	r3, r1
 800cd6e:	4630      	mov	r0, r6
 800cd70:	4639      	mov	r1, r7
 800cd72:	f7f3 fc41 	bl	80005f8 <__aeabi_dmul>
 800cd76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cd7a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800cd7e:	106d      	asrs	r5, r5, #1
 800cd80:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800cd84:	f04f 0b00 	mov.w	fp, #0
 800cd88:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800cd8c:	4661      	mov	r1, ip
 800cd8e:	2200      	movs	r2, #0
 800cd90:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800cd94:	4658      	mov	r0, fp
 800cd96:	46e1      	mov	r9, ip
 800cd98:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800cd9c:	4614      	mov	r4, r2
 800cd9e:	461d      	mov	r5, r3
 800cda0:	f7f3 fc2a 	bl	80005f8 <__aeabi_dmul>
 800cda4:	4602      	mov	r2, r0
 800cda6:	460b      	mov	r3, r1
 800cda8:	4630      	mov	r0, r6
 800cdaa:	4639      	mov	r1, r7
 800cdac:	f7f3 fa6c 	bl	8000288 <__aeabi_dsub>
 800cdb0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cdb4:	4606      	mov	r6, r0
 800cdb6:	460f      	mov	r7, r1
 800cdb8:	4620      	mov	r0, r4
 800cdba:	4629      	mov	r1, r5
 800cdbc:	f7f3 fa64 	bl	8000288 <__aeabi_dsub>
 800cdc0:	4602      	mov	r2, r0
 800cdc2:	460b      	mov	r3, r1
 800cdc4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cdc8:	f7f3 fa5e 	bl	8000288 <__aeabi_dsub>
 800cdcc:	465a      	mov	r2, fp
 800cdce:	464b      	mov	r3, r9
 800cdd0:	f7f3 fc12 	bl	80005f8 <__aeabi_dmul>
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	460b      	mov	r3, r1
 800cdd8:	4630      	mov	r0, r6
 800cdda:	4639      	mov	r1, r7
 800cddc:	f7f3 fa54 	bl	8000288 <__aeabi_dsub>
 800cde0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cde4:	f7f3 fc08 	bl	80005f8 <__aeabi_dmul>
 800cde8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cdec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cdf0:	4610      	mov	r0, r2
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	f7f3 fc00 	bl	80005f8 <__aeabi_dmul>
 800cdf8:	a37d      	add	r3, pc, #500	@ (adr r3, 800cff0 <__ieee754_pow+0x730>)
 800cdfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdfe:	4604      	mov	r4, r0
 800ce00:	460d      	mov	r5, r1
 800ce02:	f7f3 fbf9 	bl	80005f8 <__aeabi_dmul>
 800ce06:	a37c      	add	r3, pc, #496	@ (adr r3, 800cff8 <__ieee754_pow+0x738>)
 800ce08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce0c:	f7f3 fa3e 	bl	800028c <__adddf3>
 800ce10:	4622      	mov	r2, r4
 800ce12:	462b      	mov	r3, r5
 800ce14:	f7f3 fbf0 	bl	80005f8 <__aeabi_dmul>
 800ce18:	a379      	add	r3, pc, #484	@ (adr r3, 800d000 <__ieee754_pow+0x740>)
 800ce1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce1e:	f7f3 fa35 	bl	800028c <__adddf3>
 800ce22:	4622      	mov	r2, r4
 800ce24:	462b      	mov	r3, r5
 800ce26:	f7f3 fbe7 	bl	80005f8 <__aeabi_dmul>
 800ce2a:	a377      	add	r3, pc, #476	@ (adr r3, 800d008 <__ieee754_pow+0x748>)
 800ce2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce30:	f7f3 fa2c 	bl	800028c <__adddf3>
 800ce34:	4622      	mov	r2, r4
 800ce36:	462b      	mov	r3, r5
 800ce38:	f7f3 fbde 	bl	80005f8 <__aeabi_dmul>
 800ce3c:	a374      	add	r3, pc, #464	@ (adr r3, 800d010 <__ieee754_pow+0x750>)
 800ce3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce42:	f7f3 fa23 	bl	800028c <__adddf3>
 800ce46:	4622      	mov	r2, r4
 800ce48:	462b      	mov	r3, r5
 800ce4a:	f7f3 fbd5 	bl	80005f8 <__aeabi_dmul>
 800ce4e:	a372      	add	r3, pc, #456	@ (adr r3, 800d018 <__ieee754_pow+0x758>)
 800ce50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce54:	f7f3 fa1a 	bl	800028c <__adddf3>
 800ce58:	4622      	mov	r2, r4
 800ce5a:	4606      	mov	r6, r0
 800ce5c:	460f      	mov	r7, r1
 800ce5e:	462b      	mov	r3, r5
 800ce60:	4620      	mov	r0, r4
 800ce62:	4629      	mov	r1, r5
 800ce64:	f7f3 fbc8 	bl	80005f8 <__aeabi_dmul>
 800ce68:	4602      	mov	r2, r0
 800ce6a:	460b      	mov	r3, r1
 800ce6c:	4630      	mov	r0, r6
 800ce6e:	4639      	mov	r1, r7
 800ce70:	f7f3 fbc2 	bl	80005f8 <__aeabi_dmul>
 800ce74:	465a      	mov	r2, fp
 800ce76:	4604      	mov	r4, r0
 800ce78:	460d      	mov	r5, r1
 800ce7a:	464b      	mov	r3, r9
 800ce7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce80:	f7f3 fa04 	bl	800028c <__adddf3>
 800ce84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce88:	f7f3 fbb6 	bl	80005f8 <__aeabi_dmul>
 800ce8c:	4622      	mov	r2, r4
 800ce8e:	462b      	mov	r3, r5
 800ce90:	f7f3 f9fc 	bl	800028c <__adddf3>
 800ce94:	465a      	mov	r2, fp
 800ce96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ce9a:	464b      	mov	r3, r9
 800ce9c:	4658      	mov	r0, fp
 800ce9e:	4649      	mov	r1, r9
 800cea0:	f7f3 fbaa 	bl	80005f8 <__aeabi_dmul>
 800cea4:	4b6a      	ldr	r3, [pc, #424]	@ (800d050 <__ieee754_pow+0x790>)
 800cea6:	2200      	movs	r2, #0
 800cea8:	4606      	mov	r6, r0
 800ceaa:	460f      	mov	r7, r1
 800ceac:	f7f3 f9ee 	bl	800028c <__adddf3>
 800ceb0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ceb4:	f7f3 f9ea 	bl	800028c <__adddf3>
 800ceb8:	46d8      	mov	r8, fp
 800ceba:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800cebe:	460d      	mov	r5, r1
 800cec0:	465a      	mov	r2, fp
 800cec2:	460b      	mov	r3, r1
 800cec4:	4640      	mov	r0, r8
 800cec6:	4649      	mov	r1, r9
 800cec8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800cecc:	f7f3 fb94 	bl	80005f8 <__aeabi_dmul>
 800ced0:	465c      	mov	r4, fp
 800ced2:	4680      	mov	r8, r0
 800ced4:	4689      	mov	r9, r1
 800ced6:	4b5e      	ldr	r3, [pc, #376]	@ (800d050 <__ieee754_pow+0x790>)
 800ced8:	2200      	movs	r2, #0
 800ceda:	4620      	mov	r0, r4
 800cedc:	4629      	mov	r1, r5
 800cede:	f7f3 f9d3 	bl	8000288 <__aeabi_dsub>
 800cee2:	4632      	mov	r2, r6
 800cee4:	463b      	mov	r3, r7
 800cee6:	f7f3 f9cf 	bl	8000288 <__aeabi_dsub>
 800ceea:	4602      	mov	r2, r0
 800ceec:	460b      	mov	r3, r1
 800ceee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cef2:	f7f3 f9c9 	bl	8000288 <__aeabi_dsub>
 800cef6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cefa:	f7f3 fb7d 	bl	80005f8 <__aeabi_dmul>
 800cefe:	4622      	mov	r2, r4
 800cf00:	4606      	mov	r6, r0
 800cf02:	460f      	mov	r7, r1
 800cf04:	462b      	mov	r3, r5
 800cf06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cf0a:	f7f3 fb75 	bl	80005f8 <__aeabi_dmul>
 800cf0e:	4602      	mov	r2, r0
 800cf10:	460b      	mov	r3, r1
 800cf12:	4630      	mov	r0, r6
 800cf14:	4639      	mov	r1, r7
 800cf16:	f7f3 f9b9 	bl	800028c <__adddf3>
 800cf1a:	4606      	mov	r6, r0
 800cf1c:	460f      	mov	r7, r1
 800cf1e:	4602      	mov	r2, r0
 800cf20:	460b      	mov	r3, r1
 800cf22:	4640      	mov	r0, r8
 800cf24:	4649      	mov	r1, r9
 800cf26:	f7f3 f9b1 	bl	800028c <__adddf3>
 800cf2a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800cf2e:	a33c      	add	r3, pc, #240	@ (adr r3, 800d020 <__ieee754_pow+0x760>)
 800cf30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf34:	4658      	mov	r0, fp
 800cf36:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800cf3a:	460d      	mov	r5, r1
 800cf3c:	f7f3 fb5c 	bl	80005f8 <__aeabi_dmul>
 800cf40:	465c      	mov	r4, fp
 800cf42:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cf46:	4642      	mov	r2, r8
 800cf48:	464b      	mov	r3, r9
 800cf4a:	4620      	mov	r0, r4
 800cf4c:	4629      	mov	r1, r5
 800cf4e:	f7f3 f99b 	bl	8000288 <__aeabi_dsub>
 800cf52:	4602      	mov	r2, r0
 800cf54:	460b      	mov	r3, r1
 800cf56:	4630      	mov	r0, r6
 800cf58:	4639      	mov	r1, r7
 800cf5a:	f7f3 f995 	bl	8000288 <__aeabi_dsub>
 800cf5e:	a332      	add	r3, pc, #200	@ (adr r3, 800d028 <__ieee754_pow+0x768>)
 800cf60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf64:	f7f3 fb48 	bl	80005f8 <__aeabi_dmul>
 800cf68:	a331      	add	r3, pc, #196	@ (adr r3, 800d030 <__ieee754_pow+0x770>)
 800cf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf6e:	4606      	mov	r6, r0
 800cf70:	460f      	mov	r7, r1
 800cf72:	4620      	mov	r0, r4
 800cf74:	4629      	mov	r1, r5
 800cf76:	f7f3 fb3f 	bl	80005f8 <__aeabi_dmul>
 800cf7a:	4602      	mov	r2, r0
 800cf7c:	460b      	mov	r3, r1
 800cf7e:	4630      	mov	r0, r6
 800cf80:	4639      	mov	r1, r7
 800cf82:	f7f3 f983 	bl	800028c <__adddf3>
 800cf86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cf88:	4b32      	ldr	r3, [pc, #200]	@ (800d054 <__ieee754_pow+0x794>)
 800cf8a:	4413      	add	r3, r2
 800cf8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf90:	f7f3 f97c 	bl	800028c <__adddf3>
 800cf94:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cf98:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cf9a:	f7f3 fac3 	bl	8000524 <__aeabi_i2d>
 800cf9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cfa0:	4b2d      	ldr	r3, [pc, #180]	@ (800d058 <__ieee754_pow+0x798>)
 800cfa2:	4413      	add	r3, r2
 800cfa4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cfa8:	4606      	mov	r6, r0
 800cfaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cfae:	460f      	mov	r7, r1
 800cfb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cfb4:	f7f3 f96a 	bl	800028c <__adddf3>
 800cfb8:	4642      	mov	r2, r8
 800cfba:	464b      	mov	r3, r9
 800cfbc:	f7f3 f966 	bl	800028c <__adddf3>
 800cfc0:	4632      	mov	r2, r6
 800cfc2:	463b      	mov	r3, r7
 800cfc4:	f7f3 f962 	bl	800028c <__adddf3>
 800cfc8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800cfcc:	4632      	mov	r2, r6
 800cfce:	463b      	mov	r3, r7
 800cfd0:	4658      	mov	r0, fp
 800cfd2:	460d      	mov	r5, r1
 800cfd4:	f7f3 f958 	bl	8000288 <__aeabi_dsub>
 800cfd8:	4642      	mov	r2, r8
 800cfda:	464b      	mov	r3, r9
 800cfdc:	f7f3 f954 	bl	8000288 <__aeabi_dsub>
 800cfe0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cfe4:	f7f3 f950 	bl	8000288 <__aeabi_dsub>
 800cfe8:	465c      	mov	r4, fp
 800cfea:	4602      	mov	r2, r0
 800cfec:	e036      	b.n	800d05c <__ieee754_pow+0x79c>
 800cfee:	bf00      	nop
 800cff0:	4a454eef 	.word	0x4a454eef
 800cff4:	3fca7e28 	.word	0x3fca7e28
 800cff8:	93c9db65 	.word	0x93c9db65
 800cffc:	3fcd864a 	.word	0x3fcd864a
 800d000:	a91d4101 	.word	0xa91d4101
 800d004:	3fd17460 	.word	0x3fd17460
 800d008:	518f264d 	.word	0x518f264d
 800d00c:	3fd55555 	.word	0x3fd55555
 800d010:	db6fabff 	.word	0xdb6fabff
 800d014:	3fdb6db6 	.word	0x3fdb6db6
 800d018:	33333303 	.word	0x33333303
 800d01c:	3fe33333 	.word	0x3fe33333
 800d020:	e0000000 	.word	0xe0000000
 800d024:	3feec709 	.word	0x3feec709
 800d028:	dc3a03fd 	.word	0xdc3a03fd
 800d02c:	3feec709 	.word	0x3feec709
 800d030:	145b01f5 	.word	0x145b01f5
 800d034:	be3e2fe0 	.word	0xbe3e2fe0
 800d038:	7ff00000 	.word	0x7ff00000
 800d03c:	43400000 	.word	0x43400000
 800d040:	0003988e 	.word	0x0003988e
 800d044:	000bb679 	.word	0x000bb679
 800d048:	0800dad8 	.word	0x0800dad8
 800d04c:	3ff00000 	.word	0x3ff00000
 800d050:	40080000 	.word	0x40080000
 800d054:	0800dab8 	.word	0x0800dab8
 800d058:	0800dac8 	.word	0x0800dac8
 800d05c:	460b      	mov	r3, r1
 800d05e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d062:	e5d7      	b.n	800cc14 <__ieee754_pow+0x354>
 800d064:	f04f 0a01 	mov.w	sl, #1
 800d068:	e65e      	b.n	800cd28 <__ieee754_pow+0x468>
 800d06a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800d33c <__ieee754_pow+0xa7c>)
 800d06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d070:	4630      	mov	r0, r6
 800d072:	4639      	mov	r1, r7
 800d074:	f7f3 f90a 	bl	800028c <__adddf3>
 800d078:	4642      	mov	r2, r8
 800d07a:	e9cd 0100 	strd	r0, r1, [sp]
 800d07e:	464b      	mov	r3, r9
 800d080:	4620      	mov	r0, r4
 800d082:	4629      	mov	r1, r5
 800d084:	f7f3 f900 	bl	8000288 <__aeabi_dsub>
 800d088:	4602      	mov	r2, r0
 800d08a:	460b      	mov	r3, r1
 800d08c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d090:	f7f3 fd42 	bl	8000b18 <__aeabi_dcmpgt>
 800d094:	2800      	cmp	r0, #0
 800d096:	f47f ae00 	bne.w	800cc9a <__ieee754_pow+0x3da>
 800d09a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800d09e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d0a2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800d0a6:	fa43 fa0a 	asr.w	sl, r3, sl
 800d0aa:	44da      	add	sl, fp
 800d0ac:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800d0b0:	489d      	ldr	r0, [pc, #628]	@ (800d328 <__ieee754_pow+0xa68>)
 800d0b2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800d0b6:	4108      	asrs	r0, r1
 800d0b8:	ea00 030a 	and.w	r3, r0, sl
 800d0bc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800d0c0:	f1c1 0114 	rsb	r1, r1, #20
 800d0c4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800d0c8:	fa4a fa01 	asr.w	sl, sl, r1
 800d0cc:	f1bb 0f00 	cmp.w	fp, #0
 800d0d0:	4640      	mov	r0, r8
 800d0d2:	4649      	mov	r1, r9
 800d0d4:	f04f 0200 	mov.w	r2, #0
 800d0d8:	bfb8      	it	lt
 800d0da:	f1ca 0a00 	rsblt	sl, sl, #0
 800d0de:	f7f3 f8d3 	bl	8000288 <__aeabi_dsub>
 800d0e2:	4680      	mov	r8, r0
 800d0e4:	4689      	mov	r9, r1
 800d0e6:	4632      	mov	r2, r6
 800d0e8:	463b      	mov	r3, r7
 800d0ea:	4640      	mov	r0, r8
 800d0ec:	4649      	mov	r1, r9
 800d0ee:	f7f3 f8cd 	bl	800028c <__adddf3>
 800d0f2:	2400      	movs	r4, #0
 800d0f4:	a37c      	add	r3, pc, #496	@ (adr r3, 800d2e8 <__ieee754_pow+0xa28>)
 800d0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0fa:	4620      	mov	r0, r4
 800d0fc:	460d      	mov	r5, r1
 800d0fe:	f7f3 fa7b 	bl	80005f8 <__aeabi_dmul>
 800d102:	4642      	mov	r2, r8
 800d104:	e9cd 0100 	strd	r0, r1, [sp]
 800d108:	464b      	mov	r3, r9
 800d10a:	4620      	mov	r0, r4
 800d10c:	4629      	mov	r1, r5
 800d10e:	f7f3 f8bb 	bl	8000288 <__aeabi_dsub>
 800d112:	4602      	mov	r2, r0
 800d114:	460b      	mov	r3, r1
 800d116:	4630      	mov	r0, r6
 800d118:	4639      	mov	r1, r7
 800d11a:	f7f3 f8b5 	bl	8000288 <__aeabi_dsub>
 800d11e:	a374      	add	r3, pc, #464	@ (adr r3, 800d2f0 <__ieee754_pow+0xa30>)
 800d120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d124:	f7f3 fa68 	bl	80005f8 <__aeabi_dmul>
 800d128:	a373      	add	r3, pc, #460	@ (adr r3, 800d2f8 <__ieee754_pow+0xa38>)
 800d12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12e:	4680      	mov	r8, r0
 800d130:	4689      	mov	r9, r1
 800d132:	4620      	mov	r0, r4
 800d134:	4629      	mov	r1, r5
 800d136:	f7f3 fa5f 	bl	80005f8 <__aeabi_dmul>
 800d13a:	4602      	mov	r2, r0
 800d13c:	460b      	mov	r3, r1
 800d13e:	4640      	mov	r0, r8
 800d140:	4649      	mov	r1, r9
 800d142:	f7f3 f8a3 	bl	800028c <__adddf3>
 800d146:	4604      	mov	r4, r0
 800d148:	460d      	mov	r5, r1
 800d14a:	4602      	mov	r2, r0
 800d14c:	460b      	mov	r3, r1
 800d14e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d152:	f7f3 f89b 	bl	800028c <__adddf3>
 800d156:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d15a:	4680      	mov	r8, r0
 800d15c:	4689      	mov	r9, r1
 800d15e:	f7f3 f893 	bl	8000288 <__aeabi_dsub>
 800d162:	4602      	mov	r2, r0
 800d164:	460b      	mov	r3, r1
 800d166:	4620      	mov	r0, r4
 800d168:	4629      	mov	r1, r5
 800d16a:	f7f3 f88d 	bl	8000288 <__aeabi_dsub>
 800d16e:	4642      	mov	r2, r8
 800d170:	4606      	mov	r6, r0
 800d172:	460f      	mov	r7, r1
 800d174:	464b      	mov	r3, r9
 800d176:	4640      	mov	r0, r8
 800d178:	4649      	mov	r1, r9
 800d17a:	f7f3 fa3d 	bl	80005f8 <__aeabi_dmul>
 800d17e:	a360      	add	r3, pc, #384	@ (adr r3, 800d300 <__ieee754_pow+0xa40>)
 800d180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d184:	4604      	mov	r4, r0
 800d186:	460d      	mov	r5, r1
 800d188:	f7f3 fa36 	bl	80005f8 <__aeabi_dmul>
 800d18c:	a35e      	add	r3, pc, #376	@ (adr r3, 800d308 <__ieee754_pow+0xa48>)
 800d18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d192:	f7f3 f879 	bl	8000288 <__aeabi_dsub>
 800d196:	4622      	mov	r2, r4
 800d198:	462b      	mov	r3, r5
 800d19a:	f7f3 fa2d 	bl	80005f8 <__aeabi_dmul>
 800d19e:	a35c      	add	r3, pc, #368	@ (adr r3, 800d310 <__ieee754_pow+0xa50>)
 800d1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a4:	f7f3 f872 	bl	800028c <__adddf3>
 800d1a8:	4622      	mov	r2, r4
 800d1aa:	462b      	mov	r3, r5
 800d1ac:	f7f3 fa24 	bl	80005f8 <__aeabi_dmul>
 800d1b0:	a359      	add	r3, pc, #356	@ (adr r3, 800d318 <__ieee754_pow+0xa58>)
 800d1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b6:	f7f3 f867 	bl	8000288 <__aeabi_dsub>
 800d1ba:	4622      	mov	r2, r4
 800d1bc:	462b      	mov	r3, r5
 800d1be:	f7f3 fa1b 	bl	80005f8 <__aeabi_dmul>
 800d1c2:	a357      	add	r3, pc, #348	@ (adr r3, 800d320 <__ieee754_pow+0xa60>)
 800d1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c8:	f7f3 f860 	bl	800028c <__adddf3>
 800d1cc:	4622      	mov	r2, r4
 800d1ce:	462b      	mov	r3, r5
 800d1d0:	f7f3 fa12 	bl	80005f8 <__aeabi_dmul>
 800d1d4:	4602      	mov	r2, r0
 800d1d6:	460b      	mov	r3, r1
 800d1d8:	4640      	mov	r0, r8
 800d1da:	4649      	mov	r1, r9
 800d1dc:	f7f3 f854 	bl	8000288 <__aeabi_dsub>
 800d1e0:	4604      	mov	r4, r0
 800d1e2:	460d      	mov	r5, r1
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	4640      	mov	r0, r8
 800d1ea:	4649      	mov	r1, r9
 800d1ec:	f7f3 fa04 	bl	80005f8 <__aeabi_dmul>
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	e9cd 0100 	strd	r0, r1, [sp]
 800d1f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d1fa:	4620      	mov	r0, r4
 800d1fc:	4629      	mov	r1, r5
 800d1fe:	f7f3 f843 	bl	8000288 <__aeabi_dsub>
 800d202:	4602      	mov	r2, r0
 800d204:	460b      	mov	r3, r1
 800d206:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d20a:	f7f3 fb1f 	bl	800084c <__aeabi_ddiv>
 800d20e:	4632      	mov	r2, r6
 800d210:	4604      	mov	r4, r0
 800d212:	460d      	mov	r5, r1
 800d214:	463b      	mov	r3, r7
 800d216:	4640      	mov	r0, r8
 800d218:	4649      	mov	r1, r9
 800d21a:	f7f3 f9ed 	bl	80005f8 <__aeabi_dmul>
 800d21e:	4632      	mov	r2, r6
 800d220:	463b      	mov	r3, r7
 800d222:	f7f3 f833 	bl	800028c <__adddf3>
 800d226:	4602      	mov	r2, r0
 800d228:	460b      	mov	r3, r1
 800d22a:	4620      	mov	r0, r4
 800d22c:	4629      	mov	r1, r5
 800d22e:	f7f3 f82b 	bl	8000288 <__aeabi_dsub>
 800d232:	4642      	mov	r2, r8
 800d234:	464b      	mov	r3, r9
 800d236:	f7f3 f827 	bl	8000288 <__aeabi_dsub>
 800d23a:	460b      	mov	r3, r1
 800d23c:	4602      	mov	r2, r0
 800d23e:	493b      	ldr	r1, [pc, #236]	@ (800d32c <__ieee754_pow+0xa6c>)
 800d240:	2000      	movs	r0, #0
 800d242:	f7f3 f821 	bl	8000288 <__aeabi_dsub>
 800d246:	ec41 0b10 	vmov	d0, r0, r1
 800d24a:	ee10 3a90 	vmov	r3, s1
 800d24e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d252:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d256:	da30      	bge.n	800d2ba <__ieee754_pow+0x9fa>
 800d258:	4650      	mov	r0, sl
 800d25a:	f000 f87d 	bl	800d358 <scalbn>
 800d25e:	ec51 0b10 	vmov	r0, r1, d0
 800d262:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d266:	f7ff bbd2 	b.w	800ca0e <__ieee754_pow+0x14e>
 800d26a:	4c31      	ldr	r4, [pc, #196]	@ (800d330 <__ieee754_pow+0xa70>)
 800d26c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d270:	42a3      	cmp	r3, r4
 800d272:	d91a      	bls.n	800d2aa <__ieee754_pow+0x9ea>
 800d274:	4b2f      	ldr	r3, [pc, #188]	@ (800d334 <__ieee754_pow+0xa74>)
 800d276:	440b      	add	r3, r1
 800d278:	4303      	orrs	r3, r0
 800d27a:	d009      	beq.n	800d290 <__ieee754_pow+0x9d0>
 800d27c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d280:	2200      	movs	r2, #0
 800d282:	2300      	movs	r3, #0
 800d284:	f7f3 fc2a 	bl	8000adc <__aeabi_dcmplt>
 800d288:	3800      	subs	r0, #0
 800d28a:	bf18      	it	ne
 800d28c:	2001      	movne	r0, #1
 800d28e:	e42b      	b.n	800cae8 <__ieee754_pow+0x228>
 800d290:	4642      	mov	r2, r8
 800d292:	464b      	mov	r3, r9
 800d294:	f7f2 fff8 	bl	8000288 <__aeabi_dsub>
 800d298:	4632      	mov	r2, r6
 800d29a:	463b      	mov	r3, r7
 800d29c:	f7f3 fc32 	bl	8000b04 <__aeabi_dcmpge>
 800d2a0:	2800      	cmp	r0, #0
 800d2a2:	d1eb      	bne.n	800d27c <__ieee754_pow+0x9bc>
 800d2a4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800d344 <__ieee754_pow+0xa84>
 800d2a8:	e6f7      	b.n	800d09a <__ieee754_pow+0x7da>
 800d2aa:	469a      	mov	sl, r3
 800d2ac:	4b22      	ldr	r3, [pc, #136]	@ (800d338 <__ieee754_pow+0xa78>)
 800d2ae:	459a      	cmp	sl, r3
 800d2b0:	f63f aef3 	bhi.w	800d09a <__ieee754_pow+0x7da>
 800d2b4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d2b8:	e715      	b.n	800d0e6 <__ieee754_pow+0x826>
 800d2ba:	ec51 0b10 	vmov	r0, r1, d0
 800d2be:	4619      	mov	r1, r3
 800d2c0:	e7cf      	b.n	800d262 <__ieee754_pow+0x9a2>
 800d2c2:	491a      	ldr	r1, [pc, #104]	@ (800d32c <__ieee754_pow+0xa6c>)
 800d2c4:	2000      	movs	r0, #0
 800d2c6:	f7ff bb18 	b.w	800c8fa <__ieee754_pow+0x3a>
 800d2ca:	2000      	movs	r0, #0
 800d2cc:	2100      	movs	r1, #0
 800d2ce:	f7ff bb14 	b.w	800c8fa <__ieee754_pow+0x3a>
 800d2d2:	4630      	mov	r0, r6
 800d2d4:	4639      	mov	r1, r7
 800d2d6:	f7ff bb10 	b.w	800c8fa <__ieee754_pow+0x3a>
 800d2da:	460c      	mov	r4, r1
 800d2dc:	f7ff bb5e 	b.w	800c99c <__ieee754_pow+0xdc>
 800d2e0:	2400      	movs	r4, #0
 800d2e2:	f7ff bb49 	b.w	800c978 <__ieee754_pow+0xb8>
 800d2e6:	bf00      	nop
 800d2e8:	00000000 	.word	0x00000000
 800d2ec:	3fe62e43 	.word	0x3fe62e43
 800d2f0:	fefa39ef 	.word	0xfefa39ef
 800d2f4:	3fe62e42 	.word	0x3fe62e42
 800d2f8:	0ca86c39 	.word	0x0ca86c39
 800d2fc:	be205c61 	.word	0xbe205c61
 800d300:	72bea4d0 	.word	0x72bea4d0
 800d304:	3e663769 	.word	0x3e663769
 800d308:	c5d26bf1 	.word	0xc5d26bf1
 800d30c:	3ebbbd41 	.word	0x3ebbbd41
 800d310:	af25de2c 	.word	0xaf25de2c
 800d314:	3f11566a 	.word	0x3f11566a
 800d318:	16bebd93 	.word	0x16bebd93
 800d31c:	3f66c16c 	.word	0x3f66c16c
 800d320:	5555553e 	.word	0x5555553e
 800d324:	3fc55555 	.word	0x3fc55555
 800d328:	fff00000 	.word	0xfff00000
 800d32c:	3ff00000 	.word	0x3ff00000
 800d330:	4090cbff 	.word	0x4090cbff
 800d334:	3f6f3400 	.word	0x3f6f3400
 800d338:	3fe00000 	.word	0x3fe00000
 800d33c:	652b82fe 	.word	0x652b82fe
 800d340:	3c971547 	.word	0x3c971547
 800d344:	4090cc00 	.word	0x4090cc00

0800d348 <fabs>:
 800d348:	ec51 0b10 	vmov	r0, r1, d0
 800d34c:	4602      	mov	r2, r0
 800d34e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d352:	ec43 2b10 	vmov	d0, r2, r3
 800d356:	4770      	bx	lr

0800d358 <scalbn>:
 800d358:	b570      	push	{r4, r5, r6, lr}
 800d35a:	ec55 4b10 	vmov	r4, r5, d0
 800d35e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d362:	4606      	mov	r6, r0
 800d364:	462b      	mov	r3, r5
 800d366:	b991      	cbnz	r1, 800d38e <scalbn+0x36>
 800d368:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d36c:	4323      	orrs	r3, r4
 800d36e:	d03d      	beq.n	800d3ec <scalbn+0x94>
 800d370:	4b35      	ldr	r3, [pc, #212]	@ (800d448 <scalbn+0xf0>)
 800d372:	4620      	mov	r0, r4
 800d374:	4629      	mov	r1, r5
 800d376:	2200      	movs	r2, #0
 800d378:	f7f3 f93e 	bl	80005f8 <__aeabi_dmul>
 800d37c:	4b33      	ldr	r3, [pc, #204]	@ (800d44c <scalbn+0xf4>)
 800d37e:	429e      	cmp	r6, r3
 800d380:	4604      	mov	r4, r0
 800d382:	460d      	mov	r5, r1
 800d384:	da0f      	bge.n	800d3a6 <scalbn+0x4e>
 800d386:	a328      	add	r3, pc, #160	@ (adr r3, 800d428 <scalbn+0xd0>)
 800d388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d38c:	e01e      	b.n	800d3cc <scalbn+0x74>
 800d38e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800d392:	4291      	cmp	r1, r2
 800d394:	d10b      	bne.n	800d3ae <scalbn+0x56>
 800d396:	4622      	mov	r2, r4
 800d398:	4620      	mov	r0, r4
 800d39a:	4629      	mov	r1, r5
 800d39c:	f7f2 ff76 	bl	800028c <__adddf3>
 800d3a0:	4604      	mov	r4, r0
 800d3a2:	460d      	mov	r5, r1
 800d3a4:	e022      	b.n	800d3ec <scalbn+0x94>
 800d3a6:	460b      	mov	r3, r1
 800d3a8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d3ac:	3936      	subs	r1, #54	@ 0x36
 800d3ae:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800d3b2:	4296      	cmp	r6, r2
 800d3b4:	dd0d      	ble.n	800d3d2 <scalbn+0x7a>
 800d3b6:	2d00      	cmp	r5, #0
 800d3b8:	a11d      	add	r1, pc, #116	@ (adr r1, 800d430 <scalbn+0xd8>)
 800d3ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3be:	da02      	bge.n	800d3c6 <scalbn+0x6e>
 800d3c0:	a11d      	add	r1, pc, #116	@ (adr r1, 800d438 <scalbn+0xe0>)
 800d3c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3c6:	a31a      	add	r3, pc, #104	@ (adr r3, 800d430 <scalbn+0xd8>)
 800d3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3cc:	f7f3 f914 	bl	80005f8 <__aeabi_dmul>
 800d3d0:	e7e6      	b.n	800d3a0 <scalbn+0x48>
 800d3d2:	1872      	adds	r2, r6, r1
 800d3d4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800d3d8:	428a      	cmp	r2, r1
 800d3da:	dcec      	bgt.n	800d3b6 <scalbn+0x5e>
 800d3dc:	2a00      	cmp	r2, #0
 800d3de:	dd08      	ble.n	800d3f2 <scalbn+0x9a>
 800d3e0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d3e4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d3e8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d3ec:	ec45 4b10 	vmov	d0, r4, r5
 800d3f0:	bd70      	pop	{r4, r5, r6, pc}
 800d3f2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800d3f6:	da08      	bge.n	800d40a <scalbn+0xb2>
 800d3f8:	2d00      	cmp	r5, #0
 800d3fa:	a10b      	add	r1, pc, #44	@ (adr r1, 800d428 <scalbn+0xd0>)
 800d3fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d400:	dac1      	bge.n	800d386 <scalbn+0x2e>
 800d402:	a10f      	add	r1, pc, #60	@ (adr r1, 800d440 <scalbn+0xe8>)
 800d404:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d408:	e7bd      	b.n	800d386 <scalbn+0x2e>
 800d40a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d40e:	3236      	adds	r2, #54	@ 0x36
 800d410:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d414:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d418:	4620      	mov	r0, r4
 800d41a:	4b0d      	ldr	r3, [pc, #52]	@ (800d450 <scalbn+0xf8>)
 800d41c:	4629      	mov	r1, r5
 800d41e:	2200      	movs	r2, #0
 800d420:	e7d4      	b.n	800d3cc <scalbn+0x74>
 800d422:	bf00      	nop
 800d424:	f3af 8000 	nop.w
 800d428:	c2f8f359 	.word	0xc2f8f359
 800d42c:	01a56e1f 	.word	0x01a56e1f
 800d430:	8800759c 	.word	0x8800759c
 800d434:	7e37e43c 	.word	0x7e37e43c
 800d438:	8800759c 	.word	0x8800759c
 800d43c:	fe37e43c 	.word	0xfe37e43c
 800d440:	c2f8f359 	.word	0xc2f8f359
 800d444:	81a56e1f 	.word	0x81a56e1f
 800d448:	43500000 	.word	0x43500000
 800d44c:	ffff3cb0 	.word	0xffff3cb0
 800d450:	3c900000 	.word	0x3c900000

0800d454 <with_errno>:
 800d454:	b510      	push	{r4, lr}
 800d456:	ed2d 8b02 	vpush	{d8}
 800d45a:	eeb0 8a40 	vmov.f32	s16, s0
 800d45e:	eef0 8a60 	vmov.f32	s17, s1
 800d462:	4604      	mov	r4, r0
 800d464:	f7fd f938 	bl	800a6d8 <__errno>
 800d468:	eeb0 0a48 	vmov.f32	s0, s16
 800d46c:	eef0 0a68 	vmov.f32	s1, s17
 800d470:	ecbd 8b02 	vpop	{d8}
 800d474:	6004      	str	r4, [r0, #0]
 800d476:	bd10      	pop	{r4, pc}

0800d478 <xflow>:
 800d478:	4603      	mov	r3, r0
 800d47a:	b507      	push	{r0, r1, r2, lr}
 800d47c:	ec51 0b10 	vmov	r0, r1, d0
 800d480:	b183      	cbz	r3, 800d4a4 <xflow+0x2c>
 800d482:	4602      	mov	r2, r0
 800d484:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d488:	e9cd 2300 	strd	r2, r3, [sp]
 800d48c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d490:	f7f3 f8b2 	bl	80005f8 <__aeabi_dmul>
 800d494:	ec41 0b10 	vmov	d0, r0, r1
 800d498:	2022      	movs	r0, #34	@ 0x22
 800d49a:	b003      	add	sp, #12
 800d49c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d4a0:	f7ff bfd8 	b.w	800d454 <with_errno>
 800d4a4:	4602      	mov	r2, r0
 800d4a6:	460b      	mov	r3, r1
 800d4a8:	e7ee      	b.n	800d488 <xflow+0x10>
 800d4aa:	0000      	movs	r0, r0
 800d4ac:	0000      	movs	r0, r0
	...

0800d4b0 <__math_uflow>:
 800d4b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d4b8 <__math_uflow+0x8>
 800d4b4:	f7ff bfe0 	b.w	800d478 <xflow>
 800d4b8:	00000000 	.word	0x00000000
 800d4bc:	10000000 	.word	0x10000000

0800d4c0 <__math_oflow>:
 800d4c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d4c8 <__math_oflow+0x8>
 800d4c4:	f7ff bfd8 	b.w	800d478 <xflow>
 800d4c8:	00000000 	.word	0x00000000
 800d4cc:	70000000 	.word	0x70000000

0800d4d0 <__ieee754_sqrt>:
 800d4d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4d4:	4a68      	ldr	r2, [pc, #416]	@ (800d678 <__ieee754_sqrt+0x1a8>)
 800d4d6:	ec55 4b10 	vmov	r4, r5, d0
 800d4da:	43aa      	bics	r2, r5
 800d4dc:	462b      	mov	r3, r5
 800d4de:	4621      	mov	r1, r4
 800d4e0:	d110      	bne.n	800d504 <__ieee754_sqrt+0x34>
 800d4e2:	4622      	mov	r2, r4
 800d4e4:	4620      	mov	r0, r4
 800d4e6:	4629      	mov	r1, r5
 800d4e8:	f7f3 f886 	bl	80005f8 <__aeabi_dmul>
 800d4ec:	4602      	mov	r2, r0
 800d4ee:	460b      	mov	r3, r1
 800d4f0:	4620      	mov	r0, r4
 800d4f2:	4629      	mov	r1, r5
 800d4f4:	f7f2 feca 	bl	800028c <__adddf3>
 800d4f8:	4604      	mov	r4, r0
 800d4fa:	460d      	mov	r5, r1
 800d4fc:	ec45 4b10 	vmov	d0, r4, r5
 800d500:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d504:	2d00      	cmp	r5, #0
 800d506:	dc0e      	bgt.n	800d526 <__ieee754_sqrt+0x56>
 800d508:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d50c:	4322      	orrs	r2, r4
 800d50e:	d0f5      	beq.n	800d4fc <__ieee754_sqrt+0x2c>
 800d510:	b19d      	cbz	r5, 800d53a <__ieee754_sqrt+0x6a>
 800d512:	4622      	mov	r2, r4
 800d514:	4620      	mov	r0, r4
 800d516:	4629      	mov	r1, r5
 800d518:	f7f2 feb6 	bl	8000288 <__aeabi_dsub>
 800d51c:	4602      	mov	r2, r0
 800d51e:	460b      	mov	r3, r1
 800d520:	f7f3 f994 	bl	800084c <__aeabi_ddiv>
 800d524:	e7e8      	b.n	800d4f8 <__ieee754_sqrt+0x28>
 800d526:	152a      	asrs	r2, r5, #20
 800d528:	d115      	bne.n	800d556 <__ieee754_sqrt+0x86>
 800d52a:	2000      	movs	r0, #0
 800d52c:	e009      	b.n	800d542 <__ieee754_sqrt+0x72>
 800d52e:	0acb      	lsrs	r3, r1, #11
 800d530:	3a15      	subs	r2, #21
 800d532:	0549      	lsls	r1, r1, #21
 800d534:	2b00      	cmp	r3, #0
 800d536:	d0fa      	beq.n	800d52e <__ieee754_sqrt+0x5e>
 800d538:	e7f7      	b.n	800d52a <__ieee754_sqrt+0x5a>
 800d53a:	462a      	mov	r2, r5
 800d53c:	e7fa      	b.n	800d534 <__ieee754_sqrt+0x64>
 800d53e:	005b      	lsls	r3, r3, #1
 800d540:	3001      	adds	r0, #1
 800d542:	02dc      	lsls	r4, r3, #11
 800d544:	d5fb      	bpl.n	800d53e <__ieee754_sqrt+0x6e>
 800d546:	1e44      	subs	r4, r0, #1
 800d548:	1b12      	subs	r2, r2, r4
 800d54a:	f1c0 0420 	rsb	r4, r0, #32
 800d54e:	fa21 f404 	lsr.w	r4, r1, r4
 800d552:	4323      	orrs	r3, r4
 800d554:	4081      	lsls	r1, r0
 800d556:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d55a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800d55e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d562:	07d2      	lsls	r2, r2, #31
 800d564:	bf5c      	itt	pl
 800d566:	005b      	lslpl	r3, r3, #1
 800d568:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800d56c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d570:	bf58      	it	pl
 800d572:	0049      	lslpl	r1, r1, #1
 800d574:	2600      	movs	r6, #0
 800d576:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800d57a:	106d      	asrs	r5, r5, #1
 800d57c:	0049      	lsls	r1, r1, #1
 800d57e:	2016      	movs	r0, #22
 800d580:	4632      	mov	r2, r6
 800d582:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800d586:	1917      	adds	r7, r2, r4
 800d588:	429f      	cmp	r7, r3
 800d58a:	bfde      	ittt	le
 800d58c:	193a      	addle	r2, r7, r4
 800d58e:	1bdb      	suble	r3, r3, r7
 800d590:	1936      	addle	r6, r6, r4
 800d592:	0fcf      	lsrs	r7, r1, #31
 800d594:	3801      	subs	r0, #1
 800d596:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800d59a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d59e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d5a2:	d1f0      	bne.n	800d586 <__ieee754_sqrt+0xb6>
 800d5a4:	4604      	mov	r4, r0
 800d5a6:	2720      	movs	r7, #32
 800d5a8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	eb00 0e0c 	add.w	lr, r0, ip
 800d5b2:	db02      	blt.n	800d5ba <__ieee754_sqrt+0xea>
 800d5b4:	d113      	bne.n	800d5de <__ieee754_sqrt+0x10e>
 800d5b6:	458e      	cmp	lr, r1
 800d5b8:	d811      	bhi.n	800d5de <__ieee754_sqrt+0x10e>
 800d5ba:	f1be 0f00 	cmp.w	lr, #0
 800d5be:	eb0e 000c 	add.w	r0, lr, ip
 800d5c2:	da42      	bge.n	800d64a <__ieee754_sqrt+0x17a>
 800d5c4:	2800      	cmp	r0, #0
 800d5c6:	db40      	blt.n	800d64a <__ieee754_sqrt+0x17a>
 800d5c8:	f102 0801 	add.w	r8, r2, #1
 800d5cc:	1a9b      	subs	r3, r3, r2
 800d5ce:	458e      	cmp	lr, r1
 800d5d0:	bf88      	it	hi
 800d5d2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d5d6:	eba1 010e 	sub.w	r1, r1, lr
 800d5da:	4464      	add	r4, ip
 800d5dc:	4642      	mov	r2, r8
 800d5de:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800d5e2:	3f01      	subs	r7, #1
 800d5e4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800d5e8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d5ec:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d5f0:	d1dc      	bne.n	800d5ac <__ieee754_sqrt+0xdc>
 800d5f2:	4319      	orrs	r1, r3
 800d5f4:	d01b      	beq.n	800d62e <__ieee754_sqrt+0x15e>
 800d5f6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800d67c <__ieee754_sqrt+0x1ac>
 800d5fa:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800d680 <__ieee754_sqrt+0x1b0>
 800d5fe:	e9da 0100 	ldrd	r0, r1, [sl]
 800d602:	e9db 2300 	ldrd	r2, r3, [fp]
 800d606:	f7f2 fe3f 	bl	8000288 <__aeabi_dsub>
 800d60a:	e9da 8900 	ldrd	r8, r9, [sl]
 800d60e:	4602      	mov	r2, r0
 800d610:	460b      	mov	r3, r1
 800d612:	4640      	mov	r0, r8
 800d614:	4649      	mov	r1, r9
 800d616:	f7f3 fa6b 	bl	8000af0 <__aeabi_dcmple>
 800d61a:	b140      	cbz	r0, 800d62e <__ieee754_sqrt+0x15e>
 800d61c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d620:	e9da 0100 	ldrd	r0, r1, [sl]
 800d624:	e9db 2300 	ldrd	r2, r3, [fp]
 800d628:	d111      	bne.n	800d64e <__ieee754_sqrt+0x17e>
 800d62a:	3601      	adds	r6, #1
 800d62c:	463c      	mov	r4, r7
 800d62e:	1072      	asrs	r2, r6, #1
 800d630:	0863      	lsrs	r3, r4, #1
 800d632:	07f1      	lsls	r1, r6, #31
 800d634:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800d638:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800d63c:	bf48      	it	mi
 800d63e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800d642:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800d646:	4618      	mov	r0, r3
 800d648:	e756      	b.n	800d4f8 <__ieee754_sqrt+0x28>
 800d64a:	4690      	mov	r8, r2
 800d64c:	e7be      	b.n	800d5cc <__ieee754_sqrt+0xfc>
 800d64e:	f7f2 fe1d 	bl	800028c <__adddf3>
 800d652:	e9da 8900 	ldrd	r8, r9, [sl]
 800d656:	4602      	mov	r2, r0
 800d658:	460b      	mov	r3, r1
 800d65a:	4640      	mov	r0, r8
 800d65c:	4649      	mov	r1, r9
 800d65e:	f7f3 fa3d 	bl	8000adc <__aeabi_dcmplt>
 800d662:	b120      	cbz	r0, 800d66e <__ieee754_sqrt+0x19e>
 800d664:	1ca0      	adds	r0, r4, #2
 800d666:	bf08      	it	eq
 800d668:	3601      	addeq	r6, #1
 800d66a:	3402      	adds	r4, #2
 800d66c:	e7df      	b.n	800d62e <__ieee754_sqrt+0x15e>
 800d66e:	1c63      	adds	r3, r4, #1
 800d670:	f023 0401 	bic.w	r4, r3, #1
 800d674:	e7db      	b.n	800d62e <__ieee754_sqrt+0x15e>
 800d676:	bf00      	nop
 800d678:	7ff00000 	.word	0x7ff00000
 800d67c:	200001f8 	.word	0x200001f8
 800d680:	200001f0 	.word	0x200001f0

0800d684 <_init>:
 800d684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d686:	bf00      	nop
 800d688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d68a:	bc08      	pop	{r3}
 800d68c:	469e      	mov	lr, r3
 800d68e:	4770      	bx	lr

0800d690 <_fini>:
 800d690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d692:	bf00      	nop
 800d694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d696:	bc08      	pop	{r3}
 800d698:	469e      	mov	lr, r3
 800d69a:	4770      	bx	lr
